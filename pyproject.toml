[tool.ruff]
line-length = 120
exclude = [
  "docs/build/",
  "node_modules/",
  ".eggs/",
  "versioneer.py",
  "venv/",
  ".venv/",
  ".git/",
  ".history/",
]

[tool.ruff.lint]
select = ["E", "F", "W", "C4", "S"]
extend-ignore = [
  "E203", # space before : (needed for how black formats slicing)
  "E402", # module level import not at top of file
  "E731", # do not assign a lambda expression, use a def
  "E741", # ignore not easy to read variables like i l I etc.
  "C406", # Unnecessary list literal - rewrite as a dict literal.
  "C408", # Unnecessary dict call - rewrite as a literal.
  "C409", # Unnecessary list passed to tuple() - rewrite as a tuple literal.
  "F401", # unused imports
  "S101", # use of assert
]

[tool.ruff.lint.isort]
known-first-party = ["pytorch_forecasting"]
combine-as-imports = true
force-sort-within-sections = true

[tool.black]
line-length = 120
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | docs/build/
  | node_modules/
  | venve/
  | .venv/
)
'''

[tool.nbqa.mutate]
ruff = 1
black = 1

[project]
name = "pytorch-forecasting"
readme = "README.md"         # Markdown files are supported
version = "1.1.1"            # is being replaced automatically

authors = [
  {name = "Jan Beitner"},
]
requires-python = ">=3.9,<3.13"
classifiers = [
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
]
description = "Forecasting timeseries with PyTorch - dataloaders, normalizers, metrics and models"

dependencies = [
  "numpy<=3.0.0",
  "torch >=2.0.0,!=2.0.1,<3.0.0",
  "lightning >=2.0.0,<3.0.0",
  "scipy >=1.8,<2.0",
  "pandas >=1.3.0,<3.0.0",
  "scikit-learn >=1.2,<2.0",
]

[project.optional-dependencies]
# there are the following dependency sets:
# - all_extras - all soft dependencies
# - granular dependency sets:
#     - tuning - dependencies for tuning hyperparameters via optuna
#     - mqf2 - dependencies for multivariate quantile loss
#     - graph - dependencies for graph based forecasting
# - dev - the developer dependency set, for contributors to pytorch-forecasting
# - CI related: e.g., dev, github-actions. Not for users of sktime.
#
# soft dependencies are not required for the core functionality of sktime
# but are required by popular estimators, e.g., prophet, tbats, etc.

# all soft dependencies
#
# users can install via "pip install pytorch-forecasting[all_extras]"
#
all_extras = [
  "cpflows",
  "matplotlib",
  "optuna >=3.1.0,<5.0.0",
  "optuna-integration",
  "pytorch_optimizer >=2.5.1,<4.0.0",
  "statsmodels",
]

tuning = [
  "optuna >=3.1.0,<5.0.0",
  "optuna-integration",
  "statsmodels",
]

mqf2 = ["cpflows"]

# the graph set is not currently used within pytorch-forecasting
# but is kept for future development, as it has already been released
graph = ["networkx"]

# dev - the developer dependency set, for contributors to pytorch-forecasting
dev = [
  "pydocstyle >=6.1.1,<7.0.0",
  # checks and make tools
  "pre-commit >=3.2.0,<5.0.0",
  "invoke",
  "mypy",
  "pylint",
  "ruff",
  # pytest
  "pytest",
  "pytest-xdist",
  "pytest-cov",
  "pytest-sugar",
  "coverage",
  "pyarrow",
  # jupyter notebook
  "ipykernel",
  "nbconvert",
  "black[jupyter]",
  # documentatation
  "sphinx",
  "pydata-sphinx-theme",
  "nbsphinx",
  "recommonmark",
  "ipywidgets>=8.0.1,<9.0.0",
  "pytest-dotenv>=0.5.2,<1.0.0",
  "tensorboard>=2.12.1,<3.0.0",
  "pandoc>=2.3,<3.0.0",
]

# docs - dependencies for building the documentation
docs = [
  "sphinx>3.2",
  "pydata-sphinx-theme",
  "nbsphinx",
  "pandoc",
  "nbconvert",
  "recommonmark",
  "docutils",
]

github-actions = ["pytest-github-actions-annotate-failures"]

[tool.setuptools.packages.find]
exclude = ["build_tools"]

[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=70.0.0",
]
