# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-notebook-tutorials:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ".[dev,all_extras,github-actions]"

      - name: Show dependencies
        run: python -m pip list

      - name: Run example notebooks
        run: build_tools/run_examples.sh
        shell: bash

  pytest-nosoftdeps:
    name: no-softdeps
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup macOS
        if: runner.os == 'macOS'
        run: |
          brew install libomp  # https://github.com/pytorch/pytorch/issues/20030

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Install dependencies
        shell: bash
        run: |
          pip install ".[dev,github-actions]"

      - name: Show dependencies
        run: python -m pip list

      - name: Run pytest
        shell: bash
        run: python -m pytest tests

  pytest:
    name: Run pytest
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup macOS
        if: runner.os == 'macOS'
        run: |
          brew install libomp  # https://github.com/pytorch/pytorch/issues/20030

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install ".[dev,all_extras,github-actions]"

      - name: Show dependencies
        run: python -m pip list

      - name: Run pytest
        shell: bash
        run: python -m pytest tests

      - name: Statistics
        run: |
          pip install coverage
          coverage report
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        if: always()
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          flags: cpu,pytest
          name: CPU-coverage
          fail_ci_if_error: false

  docs:
    name: Docs build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('docs/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get install -y pandoc
          pip install -r docs/requirements.txt

      - name: Build sphinx documentation
        working-directory: docs/
        run: make html --debug --jobs 2 SPHINXOPTS="-W"

      - name: Upload built docs
        uses: actions/upload-artifact@v4
        with:
          name: docs-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}
          path: docs/build/html/
        # Use always() to always run this step to publish test results when there are test failures
        #if: success()
