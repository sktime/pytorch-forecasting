Search.setIndex({"alltitles": {"API": [[1, "api"]], "AddNorm": [[174, "addnorm"]], "Added": [[0, "added"], [0, "id14"], [0, "id18"], [0, "id21"], [0, "id24"], [0, "id29"], [0, "id30"], [0, "id33"], [0, "id36"], [0, "id39"], [0, "id43"], [0, "id47"], [0, "id48"], [0, "id52"], [0, "id55"], [0, "id60"], [0, "id62"], [0, "id66"], [0, "id71"], [0, "id74"], [0, "id75"]], "AggregationMetric": [[55, "aggregationmetric"]], "All Contributors": [[0, "all-contributors"], [0, "id6"], [0, "id10"], [0, "id12"]], "AttentionLayer": [[211, "attentionlayer"]], "AutoRegressiveBaseModel": [[89, "autoregressivebasemodel"]], "AutoRegressiveBaseModelWithCovariates": [[90, "autoregressivebasemodelwithcovariates"]], "BaseModel": [[91, "basemodel"], [99, "basemodel"]], "BaseModelWithCovariates": [[92, "basemodelwithcovariates"]], "Baseline": [[108, "baseline"]], "BetaDistributionLoss": [[67, "betadistributionloss"]], "Breaking Changes": [[0, "breaking-changes"]], "Breaking changes": [[0, "id27"], [0, "id68"]], "Bugfixes": [[0, "bugfixes"]], "Changed": [[0, "changed"], [0, "id40"], [0, "id44"], [0, "id49"], [0, "id56"], [0, "id63"]], "Changed (breaking for new model implementations)": [[0, "changed-breaking-for-new-model-implementations"]], "Changes": [[0, "changes"], [0, "id72"]], "CompositeMetric": [[56, "compositemetric"]], "Contributing to pytorch-forecasting": [[278, "contributing-to-pytorch-forecasting"]], "Contribution Guidelines and Recommendations": [[278, "contribution-guidelines-and-recommendations"]], "Contributors": [[0, "contributors"], [0, "id17"], [0, "id20"], [0, "id23"], [0, "id26"], [0, "id32"], [0, "id35"], [0, "id38"], [0, "id42"], [0, "id46"], [0, "id51"], [0, "id54"], [0, "id58"], [0, "id65"], [0, "id69"]], "Creating a fork and cloning the repository": [[278, "creating-a-fork-and-cloning-the-repository"]], "Creating datasets": [[275, "creating-datasets"]], "CrossEntropy": [[76, "crossentropy"]], "DLinear": [[118, "dlinear"]], "DLinear_pkg_v2": [[116, "dlinear-pkg-v2"]], "Data": [[0, "data"], [0, "id67"], [274, "data"]], "DataEmbedding_inverted": [[212, "dataembedding-inverted"]], "DecoderMLP": [[121, "decodermlp"]], "DecoderMLP_pkg": [[123, "decodermlp-pkg"]], "DeepAR": [[111, "deepar"]], "DeepAR_pkg": [[113, "deepar-pkg"]], "DeepConvexNet": [[45, "deepconvexnet"]], "Dependency changes": [[0, "dependency-changes"], [0, "id11"]], "Deprecations and removals": [[0, "deprecations-and-removals"]], "Details": [[274, "details"], [279, "details"]], "DistributionLoss": [[57, "distributionloss"]], "Docs": [[0, "docs"]], "Documentation": [[0, "documentation"], [0, "id4"], [0, "id8"]], "EnEmbedding": [[213, "enembedding"]], "Encoder": [[214, "encoder"]], "EncoderDecoderTimeSeriesDataModule": [[7, "encoderdecodertimeseriesdatamodule"]], "EncoderLayer": [[215, "encoderlayer"]], "EncoderNormalizer": [[9, "encodernormalizer"]], "Enhancements": [[0, "enhancements"], [0, "id2"]], "Example": [[276, "example"]], "Expm1Transform": [[10, "expm1transform"]], "FAQ": [[275, "faq"]], "Fixed": [[0, "fixed"], [0, "id13"], [0, "id15"], [0, "id16"], [0, "id19"], [0, "id22"], [0, "id25"], [0, "id28"], [0, "id31"], [0, "id34"], [0, "id37"], [0, "id41"], [0, "id45"], [0, "id50"], [0, "id53"], [0, "id57"], [0, "id70"], [0, "id73"]], "Fixes": [[0, "fixes"], [0, "id3"], [0, "id7"], [0, "id59"], [0, "id61"], [0, "id64"]], "FlattenHead": [[216, "flattenhead"]], "FullAttention": [[217, "fullattention"]], "FullyConnectedModule": [[125, "fullyconnectedmodule"]], "GRU": [[155, "gru"]], "GateAddNorm": [[175, "gateaddnorm"]], "GatedLinearUnit": [[176, "gatedlinearunit"]], "GatedResidualNetwork": [[177, "gatedresidualnetwork"]], "Getting started": [[276, "getting-started"]], "GroupNormalizer": [[11, "groupnormalizer"]], "GroupedSampler": [[32, "groupedsampler"]], "Highlights": [[0, "highlights"], [0, "id1"]], "IdentityBasis": [[144, "identitybasis"]], "ImplicitQuantileNetwork": [[68, "implicitquantilenetwork"]], "ImplicitQuantileNetworkDistributionLoss": [[69, "implicitquantilenetworkdistributionloss"]], "Indices and tables": [[277, "indices-and-tables"]], "InitialParameterRepresenterMixIn": [[254, "initialparameterrepresentermixin"]], "Installation": [[276, "installation"], [278, "installation"]], "Installing pytorch-forecasting": [[278, "installing-pytorch-forecasting"]], "InterpretableMultiHeadAttention": [[178, "interpretablemultiheadattention"]], "Interpreting models": [[275, "interpreting-models"]], "LSTM": [[156, "lstm"]], "LTSF-DLinear model for Pytorch Forecasting.": [[117, "ltsf-dlinear-model-for-pytorch-forecasting"]], "LogNormalDistributionLoss": [[70, "lognormaldistributionloss"]], "MAE": [[77, "mae"]], "MAPE": [[78, "mape"]], "MASE": [[79, "mase"]], "MLP": [[145, "mlp"]], "MQF2Distribution": [[46, "mqf2distribution"]], "MQF2DistributionLoss": [[71, "mqf2distributionloss"]], "Main API": [[276, "main-api"]], "Maintenance": [[0, "maintenance"], [0, "id5"], [0, "id9"]], "Metric": [[58, "metric"]], "Metrics": [[0, "metrics"], [279, "metrics"]], "MinusOneTransform": [[12, "minusonetransform"]], "Model": [[0, "model"]], "Models": [[0, "models"], [280, "models"]], "Modified": [[0, "modified"]], "MultiEmbedding": [[152, "multiembedding"]], "MultiHorizonMetric": [[59, "multihorizonmetric"]], "MultiLoss": [[60, "multiloss"]], "MultiNormalizer": [[13, "multinormalizer"]], "MultivariateDistributionLoss": [[61, "multivariatedistributionloss"]], "MultivariateNormalDistributionLoss": [[72, "multivariatenormaldistributionloss"]], "NBEATSBlock": [[132, "nbeatsblock"]], "NBEATSGenericBlock": [[133, "nbeatsgenericblock"]], "NBEATSSeasonalBlock": [[134, "nbeatsseasonalblock"]], "NBEATSTrendBlock": [[135, "nbeatstrendblock"]], "NBeats": [[128, "nbeats"]], "NBeats_pkg": [[130, "nbeats-pkg"]], "NHiTS": [[140, "nhits"], [146, "nhits"]], "NHiTSBlock": [[147, "nhitsblock"]], "NHiTS_pkg": [[142, "nhits-pkg"]], "NaNLabelEncoder": [[14, "nanlabelencoder"]], "NegativeBinomialDistributionLoss": [[73, "negativebinomialdistributionloss"]], "NormalDistributionLoss": [[74, "normaldistributionloss"]], "Obtaining a latest pytorch-forecasting version": [[278, "obtaining-a-latest-pytorch-forecasting-version"]], "OutputMixIn": [[255, "outputmixin"]], "PoissonLoss": [[80, "poissonloss"]], "PositionalEmbedding": [[218, "positionalembedding"]], "PositionalEncoder": [[179, "positionalencoder"]], "PredictCallback": [[93, "predictcallback"]], "PredictTuple": [[94, "predicttuple"]], "Prediction": [[95, "prediction"]], "PyTorch Forecasting Documentation": [[277, "pytorch-forecasting-documentation"]], "QuantileLoss": [[85, "quantileloss"]], "QuantileLoss_pkg": [[52, "quantileloss-pkg"]], "RMSE": [[81, "rmse"]], "RNN": [[157, "rnn"]], "ReLuTransform": [[15, "relutransform"]], "RecurrentNetwork": [[161, "recurrentnetwork"]], "RecurrentNetwork_pkg": [[163, "recurrentnetwork-pkg"]], "Release Notes": [[0, "release-notes"]], "ResampleNorm": [[180, "resamplenorm"]], "SMAPE": [[82, "smape"]], "ScaledDotProductAttention": [[181, "scaleddotproductattention"]], "SequentialNet": [[47, "sequentialnet"]], "Setting up an editible virtual environment": [[278, "setting-up-an-editible-virtual-environment"]], "SoftplusTransform": [[16, "softplustransform"]], "StaticFeaturesEncoder": [[148, "staticfeaturesencoder"]], "Submitting pull request best practices": [[278, "submitting-pull-request-best-practices"]], "TFT": [[172, "tft"]], "TFT_pkg_v2": [[170, "tft-pkg-v2"]], "TIDE": [[193, "tide"]], "TIDE_pkg_v2": [[195, "tide-pkg-v2"]], "Technical Design Principles": [[278, "technical-design-principles"]], "TemporalFusionTransformer": [[166, "temporalfusiontransformer"]], "TemporalFusionTransformer_pkg": [[168, "temporalfusiontransformer-pkg"]], "TiDEModel": [[190, "tidemodel"]], "TiDEModel_pkg": [[197, "tidemodel-pkg"]], "Time Series Transformer with eXogenous variables (TimeXer)": [[202, "time-series-transformer-with-exogenous-variables-timexer"], [208, "time-series-transformer-with-exogenous-variables-timexer"]], "Time series data set": [[274, "time-series-data-set"]], "Time-series Dense Encoder (TiDE)": [[198, "time-series-dense-encoder-tide"]], "TimeDistributed": [[182, "timedistributed"]], "TimeDistributedEmbeddingBag": [[153, "timedistributedembeddingbag"]], "TimeDistributedInterpolation": [[183, "timedistributedinterpolation"]], "TimeSeries": [[41, "timeseries"]], "TimeSeriesDataSet": [[37, "timeseriesdataset"]], "TimeSynchronizedBatchSampler": [[33, "timesynchronizedbatchsampler"]], "TimeXer": [[203, "timexer"], [209, "timexer"]], "TimeXer_pkg": [[205, "timexer-pkg"]], "TimeXer_pkg_v2": [[207, "timexer-pkg-v2"]], "TorchMetricWrapper": [[62, "torchmetricwrapper"]], "TorchNormalizer": [[17, "torchnormalizer"]], "Training models": [[275, "training-models"]], "TransformMixIn": [[18, "transformmixin"]], "TransformedMQF2Distribution": [[48, "transformedmqf2distribution"]], "TriangularCausalMask": [[219, "triangularcausalmask"]], "TslibBaseModel": [[105, "tslibbasemodel"]], "TslibDataModule": [[4, "tslibdatamodule"]], "TupleOutputMixIn": [[256, "tupleoutputmixin"]], "Tutorials": [[281, "tutorials"]], "TweedieLoss": [[83, "tweedieloss"]], "Usage": [[276, "usage"]], "VariableSelectionNetwork": [[184, "variableselectionnetwork"]], "_BasePtForecaster": [[101, "baseptforecaster"]], "_BasePtForecasterV2": [[102, "baseptforecasterv2"]], "_BasePtForecaster_Common": [[103, "baseptforecaster-common"]], "_BasePtMetric": [[65, "baseptmetric"]], "_ResidualBlock": [[199, "residualblock"]], "_TideModule": [[200, "tidemodule"]], "_TslibDataset": [[5, "tslibdataset"]], "_base_metrics": [[54, "module-pytorch_forecasting.metrics.base_metrics._base_metrics"]], "_base_model": [[88, "module-pytorch_forecasting.models.base._base_model"]], "_base_model_v2": [[98, "module-pytorch_forecasting.models.base._base_model_v2"]], "_base_object": [[64, "module-pytorch_forecasting.metrics.base_metrics._base_object"], [100, "module-pytorch_forecasting.models.base._base_object"]], "_check_matplotlib": [[233, "check-matplotlib"]], "_classproperty": [[226, "module-pytorch_forecasting.utils._classproperty"]], "_clipped_log": [[19, "clipped-log"]], "_clipped_logit": [[20, "clipped-logit"]], "_coerce": [[228, "module-pytorch_forecasting.utils._coerce"]], "_coerce_to_dict": [[229, "coerce-to-dict"]], "_coerce_to_list": [[230, "coerce-to-list"]], "_concatenate_output": [[96, "concatenate-output"]], "_decodermlp": [[120, "module-pytorch_forecasting.models.mlp._decodermlp"]], "_decodermlp_pkg": [[122, "module-pytorch_forecasting.models.mlp._decodermlp_pkg"]], "_deepar": [[110, "module-pytorch_forecasting.models.deepar._deepar"]], "_deepar_pkg": [[112, "module-pytorch_forecasting.models.deepar._deepar_pkg"]], "_dependencies": [[231, "module-pytorch_forecasting.utils._dependencies"], [232, "module-pytorch_forecasting.utils._dependencies._dependencies"]], "_distributions_pkg": [[43, "module-pytorch_forecasting.metrics._distributions_pkg"]], "_dlinear_pkg_v2": [[115, "module-pytorch_forecasting.models.dlinear._dlinear_pkg_v2"]], "_dlinear_v2": [[117, "module-pytorch_forecasting.models.dlinear._dlinear_v2"]], "_find_end_indices": [[38, "find-end-indices"]], "_get_data_by_filename": [[27, "get-data-by-filename"]], "_get_deps_info": [[250, "get-deps-info"]], "_get_installed_packages": [[234, "get-installed-packages"]], "_get_installed_packages_private": [[235, "get-installed-packages-private"]], "_get_sys_info": [[251, "get-sys-info"]], "_identity": [[21, "identity"]], "_lazywhere": [[186, "lazywhere"]], "_maint": [[248, "module-pytorch_forecasting.utils._maint"]], "_minus_one": [[22, "minus-one"]], "_mqf2_utils": [[44, "module-pytorch_forecasting.metrics._mqf2_utils"]], "_nbeats": [[127, "module-pytorch_forecasting.models.nbeats._nbeats"]], "_nbeats_pkg": [[129, "module-pytorch_forecasting.models.nbeats._nbeats_pkg"]], "_nhits": [[139, "module-pytorch_forecasting.models.nhits._nhits"]], "_nhits_pkg": [[141, "module-pytorch_forecasting.models.nhits._nhits_pkg"]], "_plus_one": [[23, "plus-one"]], "_point_pkg": [[49, "module-pytorch_forecasting.metrics._point_pkg"]], "_quantile_loss_pkg": [[51, "module-pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg"]], "_quantile_pkg": [[50, "module-pytorch_forecasting.metrics._quantile_pkg"]], "_rnn": [[160, "module-pytorch_forecasting.models.rnn._rnn"]], "_rnn_pkg": [[162, "module-pytorch_forecasting.models.rnn._rnn_pkg"]], "_safe_import": [[236, "module-pytorch_forecasting.utils._dependencies._safe_import"]], "_show_versions": [[249, "module-pytorch_forecasting.utils._maint._show_versions"]], "_square": [[24, "square"]], "_tft": [[165, "module-pytorch_forecasting.models.temporal_fusion_transformer._tft"]], "_tft_pkg": [[167, "module-pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg"]], "_tft_pkg_v2": [[169, "module-pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2"]], "_tft_v2": [[171, "module-pytorch_forecasting.models.temporal_fusion_transformer._tft_v2"]], "_tide": [[189, "module-pytorch_forecasting.models.tide._tide"]], "_tide_dsipts": [[191, "module-pytorch_forecasting.models.tide._tide_dsipts"]], "_tide_pkg": [[196, "module-pytorch_forecasting.models.tide._tide_pkg"]], "_tide_v2": [[192, "module-pytorch_forecasting.models.tide._tide_dsipts._tide_v2"]], "_tide_v2_pkg": [[194, "module-pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg"]], "_timeseries": [[36, "module-pytorch_forecasting.data.timeseries._timeseries"]], "_timeseries_v2": [[40, "module-pytorch_forecasting.data.timeseries._timeseries_v2"]], "_timexer": [[202, "module-pytorch_forecasting.models.timexer._timexer"]], "_timexer_pkg": [[204, "module-pytorch_forecasting.models.timexer._timexer_pkg"]], "_timexer_pkg_v2": [[206, "module-pytorch_forecasting.models.timexer._timexer_pkg_v2"]], "_timexer_v2": [[208, "module-pytorch_forecasting.models.timexer._timexer_v2"]], "_torch_cat_na": [[97, "torch-cat-na"]], "_tslib_base_model_v2": [[104, "module-pytorch_forecasting.models.base._tslib_base_model_v2"]], "_tslib_data_module": [[3, "module-pytorch_forecasting.data._tslib_data_module"]], "_utils": [[253, "module-pytorch_forecasting.utils._utils"]], "_xlstm": [[221, "module-pytorch_forecasting.models.xlstm._xlstm"]], "_xlstm_pkg": [[223, "module-pytorch_forecasting.models.xlstm._xlstm_pkg"]], "apply_to_list": [[257, "apply-to-list"]], "autocorrelation": [[258, "autocorrelation"]], "base": [[87, "module-pytorch_forecasting.models.base"]], "base_metrics": [[53, "module-pytorch_forecasting.metrics.base_metrics"]], "base_model": [[106, "module-pytorch_forecasting.models.base_model"]], "baseline": [[107, "module-pytorch_forecasting.models.baseline"]], "check_for_nonfinite": [[39, "check-for-nonfinite"]], "classproperty": [[227, "classproperty"]], "concat_sequences": [[259, "concat-sequences"]], "convert_torchmetric_to_pytorch_forecasting_metric": [[63, "convert-torchmetric-to-pytorch-forecasting-metric"]], "create_mask": [[260, "create-mask"]], "data": [[2, "module-pytorch_forecasting.data"]], "data_module": [[6, "module-pytorch_forecasting.data.data_module"]], "deepar": [[109, "module-pytorch_forecasting.models.deepar"]], "detach": [[261, "detach"]], "distributions": [[66, "module-pytorch_forecasting.metrics.distributions"]], "dlinear": [[114, "module-pytorch_forecasting.models.dlinear"]], "embeddings": [[151, "module-pytorch_forecasting.models.nn.embeddings"]], "encoders": [[8, "module-pytorch_forecasting.data.encoders"]], "examples": [[26, "module-pytorch_forecasting.data.examples"]], "generate_ar_data": [[28, "generate-ar-data"]], "get_embedding_size": [[262, "get-embedding-size"]], "get_rnn": [[158, "get-rnn"]], "get_stallion_data": [[29, "get-stallion-data"]], "groupby_apply": [[263, "groupby-apply"]], "init_weights": [[149, "init-weights"]], "integer_histogram": [[264, "integer-histogram"]], "linear": [[136, "linear"]], "linspace": [[137, "linspace"]], "load_toydata": [[30, "load-toydata"]], "masked_op": [[265, "masked-op"]], "metrics": [[42, "module-pytorch_forecasting.metrics"]], "mlp": [[119, "module-pytorch_forecasting.models.mlp"]], "models": [[86, "module-pytorch_forecasting.models"]], "move_to_device": [[266, "move-to-device"]], "nbeats": [[126, "module-pytorch_forecasting.models.nbeats"]], "next_fast_len": [[267, "next-fast-len"]], "nhits": [[138, "module-pytorch_forecasting.models.nhits"]], "nn": [[150, "module-pytorch_forecasting.models.nn"]], "optimize_hyperparameters": [[187, "optimize-hyperparameters"]], "padded_stack": [[268, "padded-stack"]], "point": [[75, "module-pytorch_forecasting.metrics.point"]], "profile": [[269, "profile"]], "quantile": [[84, "module-pytorch_forecasting.metrics.quantile"]], "repr_class": [[270, "repr-class"]], "rnn": [[154, "module-pytorch_forecasting.models.nn.rnn"], [159, "module-pytorch_forecasting.models.rnn"]], "samplers": [[31, "module-pytorch_forecasting.data.samplers"]], "show_versions": [[252, "show-versions"]], "softplus_inv": [[25, "softplus-inv"]], "sub_modules": [[131, "module-pytorch_forecasting.models.nbeats.sub_modules"], [143, "module-pytorch_forecasting.models.nhits.sub_modules"], [173, "module-pytorch_forecasting.models.temporal_fusion_transformer.sub_modules"], [198, "module-pytorch_forecasting.models.tide.sub_modules"], [210, "module-pytorch_forecasting.models.timexer.sub_modules"]], "submodules": [[124, "module-pytorch_forecasting.models.mlp.submodules"]], "temporal_fusion_transformer": [[164, "module-pytorch_forecasting.models.temporal_fusion_transformer"]], "test_import_class": [[239, "test-import-class"]], "test_import_existing_object": [[240, "test-import-existing-object"]], "test_import_missing_module": [[241, "test-import-missing-module"]], "test_import_present_module": [[242, "test-import-present-module"]], "test_import_submodule": [[243, "test-import-submodule"]], "test_import_with_different_pkg_name_1": [[244, "test-import-with-different-pkg-name-1"]], "test_import_with_different_pkg_name_2": [[245, "test-import-with-different-pkg-name-2"]], "test_import_without_pkg_name": [[246, "test-import-without-pkg-name"]], "test_multiple_inheritance_from_mock": [[247, "test-multiple-inheritance-from-mock"]], "test_safe_import": [[238, "module-pytorch_forecasting.utils._dependencies.tests.test_safe_import"]], "tests": [[34, "module-pytorch_forecasting.data.tests"], [237, "module-pytorch_forecasting.utils._dependencies.tests"]], "tide": [[188, "module-pytorch_forecasting.models.tide"]], "timeseries": [[35, "module-pytorch_forecasting.data.timeseries"]], "timexer": [[201, "module-pytorch_forecasting.models.timexer"]], "to_list": [[271, "to-list"]], "tuning": [[185, "module-pytorch_forecasting.models.temporal_fusion_transformer.tuning"]], "unpack_sequence": [[272, "unpack-sequence"]], "unsqueeze_like": [[273, "unsqueeze-like"]], "utils": [[225, "module-pytorch_forecasting.utils"]], "v0.10.0 Adding N-HiTS network (N-BEATS successor) (23/03/2022)": [[0, "v0-10-0-adding-n-hits-network-n-beats-successor-23-03-2022"]], "v0.10.1 Bugfixes (24/03/2022)": [[0, "v0-10-1-bugfixes-24-03-2022"]], "v0.10.2 Multivariate networks (23/05/2022)": [[0, "v0-10-2-multivariate-networks-23-05-2022"]], "v0.10.3 Poetry update (07/09/2022)": [[0, "v0-10-3-poetry-update-07-09-2022"]], "v0.2.0 Minor release (16/08/2020)": [[0, "v0-2-0-minor-release-16-08-2020"]], "v0.2.1 Patch release (23/08/2020)": [[0, "v0-2-1-patch-release-23-08-2020"]], "v0.2.2 Improving tests (23/08/2020)": [[0, "v0-2-2-improving-tests-23-08-2020"]], "v0.2.3 Make pip installable from master branch (23/08/2020)": [[0, "v0-2-3-make-pip-installable-from-master-branch-23-08-2020"]], "v0.2.4 Fix edge case in prediction logging (26/08/2020)": [[0, "v0-2-4-fix-edge-case-in-prediction-logging-26-08-2020"]], "v0.3.0 More testing and interpretation features (02/09/2020)": [[0, "v0-3-0-more-testing-and-interpretation-features-02-09-2020"]], "v0.3.1 More tests and better docs (13/09/2020)": [[0, "v0-3-1-more-tests-and-better-docs-13-09-2020"]], "v0.4.0 Metrics, performance, and subsequence detection (28/09/2020)": [[0, "v0-4-0-metrics-performance-and-subsequence-detection-28-09-2020"]], "v0.4.1 Various fixes models and data (01/10/2020)": [[0, "v0-4-1-various-fixes-models-and-data-01-10-2020"]], "v0.5.0 PyTorch Lightning 0.10 compatibility and classification (12/10/2020)": [[0, "v0-5-0-pytorch-lightning-0-10-compatibility-and-classification-12-10-2020"]], "v0.5.1 PyTorch Lightning 1.0 compatibility (14/10/2020)": [[0, "v0-5-1-pytorch-lightning-1-0-compatibility-14-10-2020"]], "v0.5.2 Fixes to interpretation and more control over hyperparameter verbosity (18/10/2020)": [[0, "v0-5-2-fixes-to-interpretation-and-more-control-over-hyperparameter-verbosity-18-10-2020"]], "v0.5.3 Bug fixes (31/10/2020)": [[0, "v0-5-3-bug-fixes-31-10-2020"]], "v0.6.0 Adding DeepAR (10/11/2020)": [[0, "v0-6-0-adding-deepar-10-11-2020"]], "v0.6.1 Bugfixes and DeepAR improvements (24/11/2020)": [[0, "v0-6-1-bugfixes-and-deepar-improvements-24-11-2020"]], "v0.7.0 New API for transforming inputs and outputs with encoders (03/12/2020)": [[0, "v0-7-0-new-api-for-transforming-inputs-and-outputs-with-encoders-03-12-2020"]], "v0.7.1 Tutorial on how to implement a new architecture (07/12/2020)": [[0, "v0-7-1-tutorial-on-how-to-implement-a-new-architecture-07-12-2020"]], "v0.8.0 Adding multi-target support (03/01/2021)": [[0, "v0-8-0-adding-multi-target-support-03-01-2021"]], "v0.8.1 Adding support for lag variables (10/01/2021)": [[0, "v0-8-1-adding-support-for-lag-variables-10-01-2021"]], "v0.8.2 Fix for output transformer (12/01/2021)": [[0, "v0-8-2-fix-for-output-transformer-12-01-2021"]], "v0.8.3 Bugfix release (31/01/2021)": [[0, "v0-8-3-bugfix-release-31-01-2021"]], "v0.8.4 Simple models (07/03/2021)": [[0, "v0-8-4-simple-models-07-03-2021"]], "v0.8.5 Generic distribution loss(es) (27/04/2021)": [[0, "v0-8-5-generic-distribution-loss-es-27-04-2021"]], "v0.9.0 Simplified API (04/06/2021)": [[0, "v0-9-0-simplified-api-04-06-2021"]], "v0.9.1 Maintenance Release (26/09/2021)": [[0, "v0-9-1-maintenance-release-26-09-2021"]], "v0.9.2 Maintenance Release (30/11/2021)": [[0, "v0-9-2-maintenance-release-30-11-2021"]], "v1.0.0 Update to pytorch 2.0 (10/04/2023)": [[0, "v1-0-0-update-to-pytorch-2-0-10-04-2023"]], "v1.1.0": [[0, "v1-1-0"]], "v1.1.1": [[0, "v1-1-1"]], "v1.2.0": [[0, "v1-2-0"]], "v1.3.0": [[0, "v1-3-0"]], "v1.4.0": [[0, "v1-4-0"]], "xLSTMTime": [[222, "xlstmtime"]], "xLSTMTime_pkg": [[224, "xlstmtime-pkg"]], "xlstm": [[220, "module-pytorch_forecasting.models.xlstm"]]}, "docnames": ["CHANGELOG", "api", "api/pytorch_forecasting.data", "api/pytorch_forecasting.data._tslib_data_module", "api/pytorch_forecasting.data._tslib_data_module.TslibDataModule", "api/pytorch_forecasting.data._tslib_data_module._TslibDataset", "api/pytorch_forecasting.data.data_module", "api/pytorch_forecasting.data.data_module.EncoderDecoderTimeSeriesDataModule", "api/pytorch_forecasting.data.encoders", "api/pytorch_forecasting.data.encoders.EncoderNormalizer", "api/pytorch_forecasting.data.encoders.Expm1Transform", "api/pytorch_forecasting.data.encoders.GroupNormalizer", "api/pytorch_forecasting.data.encoders.MinusOneTransform", "api/pytorch_forecasting.data.encoders.MultiNormalizer", "api/pytorch_forecasting.data.encoders.NaNLabelEncoder", "api/pytorch_forecasting.data.encoders.ReLuTransform", "api/pytorch_forecasting.data.encoders.SoftplusTransform", "api/pytorch_forecasting.data.encoders.TorchNormalizer", "api/pytorch_forecasting.data.encoders.TransformMixIn", "api/pytorch_forecasting.data.encoders._clipped_log", "api/pytorch_forecasting.data.encoders._clipped_logit", "api/pytorch_forecasting.data.encoders._identity", "api/pytorch_forecasting.data.encoders._minus_one", "api/pytorch_forecasting.data.encoders._plus_one", "api/pytorch_forecasting.data.encoders._square", "api/pytorch_forecasting.data.encoders.softplus_inv", "api/pytorch_forecasting.data.examples", "api/pytorch_forecasting.data.examples._get_data_by_filename", "api/pytorch_forecasting.data.examples.generate_ar_data", "api/pytorch_forecasting.data.examples.get_stallion_data", "api/pytorch_forecasting.data.examples.load_toydata", "api/pytorch_forecasting.data.samplers", "api/pytorch_forecasting.data.samplers.GroupedSampler", "api/pytorch_forecasting.data.samplers.TimeSynchronizedBatchSampler", "api/pytorch_forecasting.data.tests", "api/pytorch_forecasting.data.timeseries", "api/pytorch_forecasting.data.timeseries._timeseries", "api/pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet", "api/pytorch_forecasting.data.timeseries._timeseries._find_end_indices", "api/pytorch_forecasting.data.timeseries._timeseries.check_for_nonfinite", "api/pytorch_forecasting.data.timeseries._timeseries_v2", "api/pytorch_forecasting.data.timeseries._timeseries_v2.TimeSeries", "api/pytorch_forecasting.metrics", "api/pytorch_forecasting.metrics._distributions_pkg", "api/pytorch_forecasting.metrics._mqf2_utils", "api/pytorch_forecasting.metrics._mqf2_utils.DeepConvexNet", "api/pytorch_forecasting.metrics._mqf2_utils.MQF2Distribution", "api/pytorch_forecasting.metrics._mqf2_utils.SequentialNet", "api/pytorch_forecasting.metrics._mqf2_utils.TransformedMQF2Distribution", "api/pytorch_forecasting.metrics._point_pkg", "api/pytorch_forecasting.metrics._quantile_pkg", "api/pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg", "api/pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg.QuantileLoss_pkg", "api/pytorch_forecasting.metrics.base_metrics", "api/pytorch_forecasting.metrics.base_metrics._base_metrics", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.AggregationMetric", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.CompositeMetric", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.DistributionLoss", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.Metric", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.MultiHorizonMetric", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.MultiLoss", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.MultivariateDistributionLoss", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.TorchMetricWrapper", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.convert_torchmetric_to_pytorch_forecasting_metric", "api/pytorch_forecasting.metrics.base_metrics._base_object", "api/pytorch_forecasting.metrics.base_metrics._base_object._BasePtMetric", "api/pytorch_forecasting.metrics.distributions", "api/pytorch_forecasting.metrics.distributions.BetaDistributionLoss", "api/pytorch_forecasting.metrics.distributions.ImplicitQuantileNetwork", "api/pytorch_forecasting.metrics.distributions.ImplicitQuantileNetworkDistributionLoss", "api/pytorch_forecasting.metrics.distributions.LogNormalDistributionLoss", "api/pytorch_forecasting.metrics.distributions.MQF2DistributionLoss", "api/pytorch_forecasting.metrics.distributions.MultivariateNormalDistributionLoss", "api/pytorch_forecasting.metrics.distributions.NegativeBinomialDistributionLoss", "api/pytorch_forecasting.metrics.distributions.NormalDistributionLoss", "api/pytorch_forecasting.metrics.point", "api/pytorch_forecasting.metrics.point.CrossEntropy", "api/pytorch_forecasting.metrics.point.MAE", "api/pytorch_forecasting.metrics.point.MAPE", "api/pytorch_forecasting.metrics.point.MASE", "api/pytorch_forecasting.metrics.point.PoissonLoss", "api/pytorch_forecasting.metrics.point.RMSE", "api/pytorch_forecasting.metrics.point.SMAPE", "api/pytorch_forecasting.metrics.point.TweedieLoss", "api/pytorch_forecasting.metrics.quantile", "api/pytorch_forecasting.metrics.quantile.QuantileLoss", "api/pytorch_forecasting.models", "api/pytorch_forecasting.models.base", "api/pytorch_forecasting.models.base._base_model", "api/pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModel", "api/pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModelWithCovariates", "api/pytorch_forecasting.models.base._base_model.BaseModel", "api/pytorch_forecasting.models.base._base_model.BaseModelWithCovariates", "api/pytorch_forecasting.models.base._base_model.PredictCallback", "api/pytorch_forecasting.models.base._base_model.PredictTuple", "api/pytorch_forecasting.models.base._base_model.Prediction", "api/pytorch_forecasting.models.base._base_model._concatenate_output", "api/pytorch_forecasting.models.base._base_model._torch_cat_na", "api/pytorch_forecasting.models.base._base_model_v2", "api/pytorch_forecasting.models.base._base_model_v2.BaseModel", "api/pytorch_forecasting.models.base._base_object", "api/pytorch_forecasting.models.base._base_object._BasePtForecaster", "api/pytorch_forecasting.models.base._base_object._BasePtForecasterV2", "api/pytorch_forecasting.models.base._base_object._BasePtForecaster_Common", "api/pytorch_forecasting.models.base._tslib_base_model_v2", "api/pytorch_forecasting.models.base._tslib_base_model_v2.TslibBaseModel", "api/pytorch_forecasting.models.base_model", "api/pytorch_forecasting.models.baseline", "api/pytorch_forecasting.models.baseline.Baseline", "api/pytorch_forecasting.models.deepar", "api/pytorch_forecasting.models.deepar._deepar", "api/pytorch_forecasting.models.deepar._deepar.DeepAR", "api/pytorch_forecasting.models.deepar._deepar_pkg", "api/pytorch_forecasting.models.deepar._deepar_pkg.DeepAR_pkg", "api/pytorch_forecasting.models.dlinear", "api/pytorch_forecasting.models.dlinear._dlinear_pkg_v2", "api/pytorch_forecasting.models.dlinear._dlinear_pkg_v2.DLinear_pkg_v2", "api/pytorch_forecasting.models.dlinear._dlinear_v2", "api/pytorch_forecasting.models.dlinear._dlinear_v2.DLinear", "api/pytorch_forecasting.models.mlp", "api/pytorch_forecasting.models.mlp._decodermlp", "api/pytorch_forecasting.models.mlp._decodermlp.DecoderMLP", "api/pytorch_forecasting.models.mlp._decodermlp_pkg", "api/pytorch_forecasting.models.mlp._decodermlp_pkg.DecoderMLP_pkg", "api/pytorch_forecasting.models.mlp.submodules", "api/pytorch_forecasting.models.mlp.submodules.FullyConnectedModule", "api/pytorch_forecasting.models.nbeats", "api/pytorch_forecasting.models.nbeats._nbeats", "api/pytorch_forecasting.models.nbeats._nbeats.NBeats", "api/pytorch_forecasting.models.nbeats._nbeats_pkg", "api/pytorch_forecasting.models.nbeats._nbeats_pkg.NBeats_pkg", "api/pytorch_forecasting.models.nbeats.sub_modules", "api/pytorch_forecasting.models.nbeats.sub_modules.NBEATSBlock", "api/pytorch_forecasting.models.nbeats.sub_modules.NBEATSGenericBlock", "api/pytorch_forecasting.models.nbeats.sub_modules.NBEATSSeasonalBlock", "api/pytorch_forecasting.models.nbeats.sub_modules.NBEATSTrendBlock", "api/pytorch_forecasting.models.nbeats.sub_modules.linear", "api/pytorch_forecasting.models.nbeats.sub_modules.linspace", "api/pytorch_forecasting.models.nhits", "api/pytorch_forecasting.models.nhits._nhits", "api/pytorch_forecasting.models.nhits._nhits.NHiTS", "api/pytorch_forecasting.models.nhits._nhits_pkg", "api/pytorch_forecasting.models.nhits._nhits_pkg.NHiTS_pkg", "api/pytorch_forecasting.models.nhits.sub_modules", "api/pytorch_forecasting.models.nhits.sub_modules.IdentityBasis", "api/pytorch_forecasting.models.nhits.sub_modules.MLP", "api/pytorch_forecasting.models.nhits.sub_modules.NHiTS", "api/pytorch_forecasting.models.nhits.sub_modules.NHiTSBlock", "api/pytorch_forecasting.models.nhits.sub_modules.StaticFeaturesEncoder", "api/pytorch_forecasting.models.nhits.sub_modules.init_weights", "api/pytorch_forecasting.models.nn", "api/pytorch_forecasting.models.nn.embeddings", "api/pytorch_forecasting.models.nn.embeddings.MultiEmbedding", "api/pytorch_forecasting.models.nn.embeddings.TimeDistributedEmbeddingBag", "api/pytorch_forecasting.models.nn.rnn", "api/pytorch_forecasting.models.nn.rnn.GRU", "api/pytorch_forecasting.models.nn.rnn.LSTM", "api/pytorch_forecasting.models.nn.rnn.RNN", "api/pytorch_forecasting.models.nn.rnn.get_rnn", "api/pytorch_forecasting.models.rnn", "api/pytorch_forecasting.models.rnn._rnn", "api/pytorch_forecasting.models.rnn._rnn.RecurrentNetwork", "api/pytorch_forecasting.models.rnn._rnn_pkg", "api/pytorch_forecasting.models.rnn._rnn_pkg.RecurrentNetwork_pkg", "api/pytorch_forecasting.models.temporal_fusion_transformer", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg.TemporalFusionTransformer_pkg", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2.TFT_pkg_v2", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft_v2", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft_v2.TFT", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.AddNorm", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GateAddNorm", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GatedLinearUnit", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GatedResidualNetwork", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.InterpretableMultiHeadAttention", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.PositionalEncoder", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.ResampleNorm", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.ScaledDotProductAttention", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.TimeDistributed", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.TimeDistributedInterpolation", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.VariableSelectionNetwork", "api/pytorch_forecasting.models.temporal_fusion_transformer.tuning", "api/pytorch_forecasting.models.temporal_fusion_transformer.tuning._lazywhere", "api/pytorch_forecasting.models.temporal_fusion_transformer.tuning.optimize_hyperparameters", "api/pytorch_forecasting.models.tide", "api/pytorch_forecasting.models.tide._tide", "api/pytorch_forecasting.models.tide._tide.TiDEModel", "api/pytorch_forecasting.models.tide._tide_dsipts", "api/pytorch_forecasting.models.tide._tide_dsipts._tide_v2", "api/pytorch_forecasting.models.tide._tide_dsipts._tide_v2.TIDE", "api/pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg", "api/pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg.TIDE_pkg_v2", "api/pytorch_forecasting.models.tide._tide_pkg", "api/pytorch_forecasting.models.tide._tide_pkg.TiDEModel_pkg", "api/pytorch_forecasting.models.tide.sub_modules", "api/pytorch_forecasting.models.tide.sub_modules._ResidualBlock", "api/pytorch_forecasting.models.tide.sub_modules._TideModule", "api/pytorch_forecasting.models.timexer", "api/pytorch_forecasting.models.timexer._timexer", "api/pytorch_forecasting.models.timexer._timexer.TimeXer", "api/pytorch_forecasting.models.timexer._timexer_pkg", "api/pytorch_forecasting.models.timexer._timexer_pkg.TimeXer_pkg", "api/pytorch_forecasting.models.timexer._timexer_pkg_v2", "api/pytorch_forecasting.models.timexer._timexer_pkg_v2.TimeXer_pkg_v2", "api/pytorch_forecasting.models.timexer._timexer_v2", "api/pytorch_forecasting.models.timexer._timexer_v2.TimeXer", "api/pytorch_forecasting.models.timexer.sub_modules", "api/pytorch_forecasting.models.timexer.sub_modules.AttentionLayer", "api/pytorch_forecasting.models.timexer.sub_modules.DataEmbedding_inverted", "api/pytorch_forecasting.models.timexer.sub_modules.EnEmbedding", "api/pytorch_forecasting.models.timexer.sub_modules.Encoder", "api/pytorch_forecasting.models.timexer.sub_modules.EncoderLayer", "api/pytorch_forecasting.models.timexer.sub_modules.FlattenHead", "api/pytorch_forecasting.models.timexer.sub_modules.FullAttention", "api/pytorch_forecasting.models.timexer.sub_modules.PositionalEmbedding", "api/pytorch_forecasting.models.timexer.sub_modules.TriangularCausalMask", "api/pytorch_forecasting.models.xlstm", "api/pytorch_forecasting.models.xlstm._xlstm", "api/pytorch_forecasting.models.xlstm._xlstm.xLSTMTime", "api/pytorch_forecasting.models.xlstm._xlstm_pkg", "api/pytorch_forecasting.models.xlstm._xlstm_pkg.xLSTMTime_pkg", "api/pytorch_forecasting.utils", "api/pytorch_forecasting.utils._classproperty", "api/pytorch_forecasting.utils._classproperty.classproperty", "api/pytorch_forecasting.utils._coerce", "api/pytorch_forecasting.utils._coerce._coerce_to_dict", "api/pytorch_forecasting.utils._coerce._coerce_to_list", "api/pytorch_forecasting.utils._dependencies", "api/pytorch_forecasting.utils._dependencies._dependencies", "api/pytorch_forecasting.utils._dependencies._dependencies._check_matplotlib", "api/pytorch_forecasting.utils._dependencies._dependencies._get_installed_packages", "api/pytorch_forecasting.utils._dependencies._dependencies._get_installed_packages_private", "api/pytorch_forecasting.utils._dependencies._safe_import", "api/pytorch_forecasting.utils._dependencies.tests", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_class", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_existing_object", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_missing_module", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_present_module", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_submodule", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_with_different_pkg_name_1", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_with_different_pkg_name_2", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_without_pkg_name", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_multiple_inheritance_from_mock", "api/pytorch_forecasting.utils._maint", "api/pytorch_forecasting.utils._maint._show_versions", "api/pytorch_forecasting.utils._maint._show_versions._get_deps_info", "api/pytorch_forecasting.utils._maint._show_versions._get_sys_info", "api/pytorch_forecasting.utils._maint._show_versions.show_versions", "api/pytorch_forecasting.utils._utils", "api/pytorch_forecasting.utils._utils.InitialParameterRepresenterMixIn", "api/pytorch_forecasting.utils._utils.OutputMixIn", "api/pytorch_forecasting.utils._utils.TupleOutputMixIn", "api/pytorch_forecasting.utils._utils.apply_to_list", "api/pytorch_forecasting.utils._utils.autocorrelation", "api/pytorch_forecasting.utils._utils.concat_sequences", "api/pytorch_forecasting.utils._utils.create_mask", "api/pytorch_forecasting.utils._utils.detach", "api/pytorch_forecasting.utils._utils.get_embedding_size", "api/pytorch_forecasting.utils._utils.groupby_apply", "api/pytorch_forecasting.utils._utils.integer_histogram", "api/pytorch_forecasting.utils._utils.masked_op", "api/pytorch_forecasting.utils._utils.move_to_device", "api/pytorch_forecasting.utils._utils.next_fast_len", "api/pytorch_forecasting.utils._utils.padded_stack", "api/pytorch_forecasting.utils._utils.profile", "api/pytorch_forecasting.utils._utils.repr_class", "api/pytorch_forecasting.utils._utils.to_list", "api/pytorch_forecasting.utils._utils.unpack_sequence", "api/pytorch_forecasting.utils._utils.unsqueeze_like", "data", "faq", "getting-started", "index", "installation", "metrics", "models", "tutorials"], "envversion": {"nbsphinx": 4, "sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["CHANGELOG.md", "api.rst", "api/pytorch_forecasting.data.rst", "api/pytorch_forecasting.data._tslib_data_module.rst", "api/pytorch_forecasting.data._tslib_data_module.TslibDataModule.rst", "api/pytorch_forecasting.data._tslib_data_module._TslibDataset.rst", "api/pytorch_forecasting.data.data_module.rst", "api/pytorch_forecasting.data.data_module.EncoderDecoderTimeSeriesDataModule.rst", "api/pytorch_forecasting.data.encoders.rst", "api/pytorch_forecasting.data.encoders.EncoderNormalizer.rst", "api/pytorch_forecasting.data.encoders.Expm1Transform.rst", "api/pytorch_forecasting.data.encoders.GroupNormalizer.rst", "api/pytorch_forecasting.data.encoders.MinusOneTransform.rst", "api/pytorch_forecasting.data.encoders.MultiNormalizer.rst", "api/pytorch_forecasting.data.encoders.NaNLabelEncoder.rst", "api/pytorch_forecasting.data.encoders.ReLuTransform.rst", "api/pytorch_forecasting.data.encoders.SoftplusTransform.rst", "api/pytorch_forecasting.data.encoders.TorchNormalizer.rst", "api/pytorch_forecasting.data.encoders.TransformMixIn.rst", "api/pytorch_forecasting.data.encoders._clipped_log.rst", "api/pytorch_forecasting.data.encoders._clipped_logit.rst", "api/pytorch_forecasting.data.encoders._identity.rst", "api/pytorch_forecasting.data.encoders._minus_one.rst", "api/pytorch_forecasting.data.encoders._plus_one.rst", "api/pytorch_forecasting.data.encoders._square.rst", "api/pytorch_forecasting.data.encoders.softplus_inv.rst", "api/pytorch_forecasting.data.examples.rst", "api/pytorch_forecasting.data.examples._get_data_by_filename.rst", "api/pytorch_forecasting.data.examples.generate_ar_data.rst", "api/pytorch_forecasting.data.examples.get_stallion_data.rst", "api/pytorch_forecasting.data.examples.load_toydata.rst", "api/pytorch_forecasting.data.samplers.rst", "api/pytorch_forecasting.data.samplers.GroupedSampler.rst", "api/pytorch_forecasting.data.samplers.TimeSynchronizedBatchSampler.rst", "api/pytorch_forecasting.data.tests.rst", "api/pytorch_forecasting.data.timeseries.rst", "api/pytorch_forecasting.data.timeseries._timeseries.rst", "api/pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.rst", "api/pytorch_forecasting.data.timeseries._timeseries._find_end_indices.rst", "api/pytorch_forecasting.data.timeseries._timeseries.check_for_nonfinite.rst", "api/pytorch_forecasting.data.timeseries._timeseries_v2.rst", "api/pytorch_forecasting.data.timeseries._timeseries_v2.TimeSeries.rst", "api/pytorch_forecasting.metrics.rst", "api/pytorch_forecasting.metrics._distributions_pkg.rst", "api/pytorch_forecasting.metrics._mqf2_utils.rst", "api/pytorch_forecasting.metrics._mqf2_utils.DeepConvexNet.rst", "api/pytorch_forecasting.metrics._mqf2_utils.MQF2Distribution.rst", "api/pytorch_forecasting.metrics._mqf2_utils.SequentialNet.rst", "api/pytorch_forecasting.metrics._mqf2_utils.TransformedMQF2Distribution.rst", "api/pytorch_forecasting.metrics._point_pkg.rst", "api/pytorch_forecasting.metrics._quantile_pkg.rst", "api/pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg.rst", "api/pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg.QuantileLoss_pkg.rst", "api/pytorch_forecasting.metrics.base_metrics.rst", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.rst", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.AggregationMetric.rst", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.CompositeMetric.rst", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.DistributionLoss.rst", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.Metric.rst", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.MultiHorizonMetric.rst", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.MultiLoss.rst", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.MultivariateDistributionLoss.rst", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.TorchMetricWrapper.rst", "api/pytorch_forecasting.metrics.base_metrics._base_metrics.convert_torchmetric_to_pytorch_forecasting_metric.rst", "api/pytorch_forecasting.metrics.base_metrics._base_object.rst", "api/pytorch_forecasting.metrics.base_metrics._base_object._BasePtMetric.rst", "api/pytorch_forecasting.metrics.distributions.rst", "api/pytorch_forecasting.metrics.distributions.BetaDistributionLoss.rst", "api/pytorch_forecasting.metrics.distributions.ImplicitQuantileNetwork.rst", "api/pytorch_forecasting.metrics.distributions.ImplicitQuantileNetworkDistributionLoss.rst", "api/pytorch_forecasting.metrics.distributions.LogNormalDistributionLoss.rst", "api/pytorch_forecasting.metrics.distributions.MQF2DistributionLoss.rst", "api/pytorch_forecasting.metrics.distributions.MultivariateNormalDistributionLoss.rst", "api/pytorch_forecasting.metrics.distributions.NegativeBinomialDistributionLoss.rst", "api/pytorch_forecasting.metrics.distributions.NormalDistributionLoss.rst", "api/pytorch_forecasting.metrics.point.rst", "api/pytorch_forecasting.metrics.point.CrossEntropy.rst", "api/pytorch_forecasting.metrics.point.MAE.rst", "api/pytorch_forecasting.metrics.point.MAPE.rst", "api/pytorch_forecasting.metrics.point.MASE.rst", "api/pytorch_forecasting.metrics.point.PoissonLoss.rst", "api/pytorch_forecasting.metrics.point.RMSE.rst", "api/pytorch_forecasting.metrics.point.SMAPE.rst", "api/pytorch_forecasting.metrics.point.TweedieLoss.rst", "api/pytorch_forecasting.metrics.quantile.rst", "api/pytorch_forecasting.metrics.quantile.QuantileLoss.rst", "api/pytorch_forecasting.models.rst", "api/pytorch_forecasting.models.base.rst", "api/pytorch_forecasting.models.base._base_model.rst", "api/pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModel.rst", "api/pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModelWithCovariates.rst", "api/pytorch_forecasting.models.base._base_model.BaseModel.rst", "api/pytorch_forecasting.models.base._base_model.BaseModelWithCovariates.rst", "api/pytorch_forecasting.models.base._base_model.PredictCallback.rst", "api/pytorch_forecasting.models.base._base_model.PredictTuple.rst", "api/pytorch_forecasting.models.base._base_model.Prediction.rst", "api/pytorch_forecasting.models.base._base_model._concatenate_output.rst", "api/pytorch_forecasting.models.base._base_model._torch_cat_na.rst", "api/pytorch_forecasting.models.base._base_model_v2.rst", "api/pytorch_forecasting.models.base._base_model_v2.BaseModel.rst", "api/pytorch_forecasting.models.base._base_object.rst", "api/pytorch_forecasting.models.base._base_object._BasePtForecaster.rst", "api/pytorch_forecasting.models.base._base_object._BasePtForecasterV2.rst", "api/pytorch_forecasting.models.base._base_object._BasePtForecaster_Common.rst", "api/pytorch_forecasting.models.base._tslib_base_model_v2.rst", "api/pytorch_forecasting.models.base._tslib_base_model_v2.TslibBaseModel.rst", "api/pytorch_forecasting.models.base_model.rst", "api/pytorch_forecasting.models.baseline.rst", "api/pytorch_forecasting.models.baseline.Baseline.rst", "api/pytorch_forecasting.models.deepar.rst", "api/pytorch_forecasting.models.deepar._deepar.rst", "api/pytorch_forecasting.models.deepar._deepar.DeepAR.rst", "api/pytorch_forecasting.models.deepar._deepar_pkg.rst", "api/pytorch_forecasting.models.deepar._deepar_pkg.DeepAR_pkg.rst", "api/pytorch_forecasting.models.dlinear.rst", "api/pytorch_forecasting.models.dlinear._dlinear_pkg_v2.rst", "api/pytorch_forecasting.models.dlinear._dlinear_pkg_v2.DLinear_pkg_v2.rst", "api/pytorch_forecasting.models.dlinear._dlinear_v2.rst", "api/pytorch_forecasting.models.dlinear._dlinear_v2.DLinear.rst", "api/pytorch_forecasting.models.mlp.rst", "api/pytorch_forecasting.models.mlp._decodermlp.rst", "api/pytorch_forecasting.models.mlp._decodermlp.DecoderMLP.rst", "api/pytorch_forecasting.models.mlp._decodermlp_pkg.rst", "api/pytorch_forecasting.models.mlp._decodermlp_pkg.DecoderMLP_pkg.rst", "api/pytorch_forecasting.models.mlp.submodules.rst", "api/pytorch_forecasting.models.mlp.submodules.FullyConnectedModule.rst", "api/pytorch_forecasting.models.nbeats.rst", "api/pytorch_forecasting.models.nbeats._nbeats.rst", "api/pytorch_forecasting.models.nbeats._nbeats.NBeats.rst", "api/pytorch_forecasting.models.nbeats._nbeats_pkg.rst", "api/pytorch_forecasting.models.nbeats._nbeats_pkg.NBeats_pkg.rst", "api/pytorch_forecasting.models.nbeats.sub_modules.rst", "api/pytorch_forecasting.models.nbeats.sub_modules.NBEATSBlock.rst", "api/pytorch_forecasting.models.nbeats.sub_modules.NBEATSGenericBlock.rst", "api/pytorch_forecasting.models.nbeats.sub_modules.NBEATSSeasonalBlock.rst", "api/pytorch_forecasting.models.nbeats.sub_modules.NBEATSTrendBlock.rst", "api/pytorch_forecasting.models.nbeats.sub_modules.linear.rst", "api/pytorch_forecasting.models.nbeats.sub_modules.linspace.rst", "api/pytorch_forecasting.models.nhits.rst", "api/pytorch_forecasting.models.nhits._nhits.rst", "api/pytorch_forecasting.models.nhits._nhits.NHiTS.rst", "api/pytorch_forecasting.models.nhits._nhits_pkg.rst", "api/pytorch_forecasting.models.nhits._nhits_pkg.NHiTS_pkg.rst", "api/pytorch_forecasting.models.nhits.sub_modules.rst", "api/pytorch_forecasting.models.nhits.sub_modules.IdentityBasis.rst", "api/pytorch_forecasting.models.nhits.sub_modules.MLP.rst", "api/pytorch_forecasting.models.nhits.sub_modules.NHiTS.rst", "api/pytorch_forecasting.models.nhits.sub_modules.NHiTSBlock.rst", "api/pytorch_forecasting.models.nhits.sub_modules.StaticFeaturesEncoder.rst", "api/pytorch_forecasting.models.nhits.sub_modules.init_weights.rst", "api/pytorch_forecasting.models.nn.rst", "api/pytorch_forecasting.models.nn.embeddings.rst", "api/pytorch_forecasting.models.nn.embeddings.MultiEmbedding.rst", "api/pytorch_forecasting.models.nn.embeddings.TimeDistributedEmbeddingBag.rst", "api/pytorch_forecasting.models.nn.rnn.rst", "api/pytorch_forecasting.models.nn.rnn.GRU.rst", "api/pytorch_forecasting.models.nn.rnn.LSTM.rst", "api/pytorch_forecasting.models.nn.rnn.RNN.rst", "api/pytorch_forecasting.models.nn.rnn.get_rnn.rst", "api/pytorch_forecasting.models.rnn.rst", "api/pytorch_forecasting.models.rnn._rnn.rst", "api/pytorch_forecasting.models.rnn._rnn.RecurrentNetwork.rst", "api/pytorch_forecasting.models.rnn._rnn_pkg.rst", "api/pytorch_forecasting.models.rnn._rnn_pkg.RecurrentNetwork_pkg.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg.TemporalFusionTransformer_pkg.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2.TFT_pkg_v2.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft_v2.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer._tft_v2.TFT.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.AddNorm.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GateAddNorm.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GatedLinearUnit.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GatedResidualNetwork.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.InterpretableMultiHeadAttention.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.PositionalEncoder.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.ResampleNorm.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.ScaledDotProductAttention.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.TimeDistributed.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.TimeDistributedInterpolation.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.VariableSelectionNetwork.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.tuning.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.tuning._lazywhere.rst", "api/pytorch_forecasting.models.temporal_fusion_transformer.tuning.optimize_hyperparameters.rst", "api/pytorch_forecasting.models.tide.rst", "api/pytorch_forecasting.models.tide._tide.rst", "api/pytorch_forecasting.models.tide._tide.TiDEModel.rst", "api/pytorch_forecasting.models.tide._tide_dsipts.rst", "api/pytorch_forecasting.models.tide._tide_dsipts._tide_v2.rst", "api/pytorch_forecasting.models.tide._tide_dsipts._tide_v2.TIDE.rst", "api/pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg.rst", "api/pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg.TIDE_pkg_v2.rst", "api/pytorch_forecasting.models.tide._tide_pkg.rst", "api/pytorch_forecasting.models.tide._tide_pkg.TiDEModel_pkg.rst", "api/pytorch_forecasting.models.tide.sub_modules.rst", "api/pytorch_forecasting.models.tide.sub_modules._ResidualBlock.rst", "api/pytorch_forecasting.models.tide.sub_modules._TideModule.rst", "api/pytorch_forecasting.models.timexer.rst", "api/pytorch_forecasting.models.timexer._timexer.rst", "api/pytorch_forecasting.models.timexer._timexer.TimeXer.rst", "api/pytorch_forecasting.models.timexer._timexer_pkg.rst", "api/pytorch_forecasting.models.timexer._timexer_pkg.TimeXer_pkg.rst", "api/pytorch_forecasting.models.timexer._timexer_pkg_v2.rst", "api/pytorch_forecasting.models.timexer._timexer_pkg_v2.TimeXer_pkg_v2.rst", "api/pytorch_forecasting.models.timexer._timexer_v2.rst", "api/pytorch_forecasting.models.timexer._timexer_v2.TimeXer.rst", "api/pytorch_forecasting.models.timexer.sub_modules.rst", "api/pytorch_forecasting.models.timexer.sub_modules.AttentionLayer.rst", "api/pytorch_forecasting.models.timexer.sub_modules.DataEmbedding_inverted.rst", "api/pytorch_forecasting.models.timexer.sub_modules.EnEmbedding.rst", "api/pytorch_forecasting.models.timexer.sub_modules.Encoder.rst", "api/pytorch_forecasting.models.timexer.sub_modules.EncoderLayer.rst", "api/pytorch_forecasting.models.timexer.sub_modules.FlattenHead.rst", "api/pytorch_forecasting.models.timexer.sub_modules.FullAttention.rst", "api/pytorch_forecasting.models.timexer.sub_modules.PositionalEmbedding.rst", "api/pytorch_forecasting.models.timexer.sub_modules.TriangularCausalMask.rst", "api/pytorch_forecasting.models.xlstm.rst", "api/pytorch_forecasting.models.xlstm._xlstm.rst", "api/pytorch_forecasting.models.xlstm._xlstm.xLSTMTime.rst", "api/pytorch_forecasting.models.xlstm._xlstm_pkg.rst", "api/pytorch_forecasting.models.xlstm._xlstm_pkg.xLSTMTime_pkg.rst", "api/pytorch_forecasting.utils.rst", "api/pytorch_forecasting.utils._classproperty.rst", "api/pytorch_forecasting.utils._classproperty.classproperty.rst", "api/pytorch_forecasting.utils._coerce.rst", "api/pytorch_forecasting.utils._coerce._coerce_to_dict.rst", "api/pytorch_forecasting.utils._coerce._coerce_to_list.rst", "api/pytorch_forecasting.utils._dependencies.rst", "api/pytorch_forecasting.utils._dependencies._dependencies.rst", "api/pytorch_forecasting.utils._dependencies._dependencies._check_matplotlib.rst", "api/pytorch_forecasting.utils._dependencies._dependencies._get_installed_packages.rst", "api/pytorch_forecasting.utils._dependencies._dependencies._get_installed_packages_private.rst", "api/pytorch_forecasting.utils._dependencies._safe_import.rst", "api/pytorch_forecasting.utils._dependencies.tests.rst", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.rst", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_class.rst", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_existing_object.rst", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_missing_module.rst", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_present_module.rst", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_submodule.rst", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_with_different_pkg_name_1.rst", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_with_different_pkg_name_2.rst", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_without_pkg_name.rst", "api/pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_multiple_inheritance_from_mock.rst", "api/pytorch_forecasting.utils._maint.rst", "api/pytorch_forecasting.utils._maint._show_versions.rst", "api/pytorch_forecasting.utils._maint._show_versions._get_deps_info.rst", "api/pytorch_forecasting.utils._maint._show_versions._get_sys_info.rst", "api/pytorch_forecasting.utils._maint._show_versions.show_versions.rst", "api/pytorch_forecasting.utils._utils.rst", "api/pytorch_forecasting.utils._utils.InitialParameterRepresenterMixIn.rst", "api/pytorch_forecasting.utils._utils.OutputMixIn.rst", "api/pytorch_forecasting.utils._utils.TupleOutputMixIn.rst", "api/pytorch_forecasting.utils._utils.apply_to_list.rst", "api/pytorch_forecasting.utils._utils.autocorrelation.rst", "api/pytorch_forecasting.utils._utils.concat_sequences.rst", "api/pytorch_forecasting.utils._utils.create_mask.rst", "api/pytorch_forecasting.utils._utils.detach.rst", "api/pytorch_forecasting.utils._utils.get_embedding_size.rst", "api/pytorch_forecasting.utils._utils.groupby_apply.rst", "api/pytorch_forecasting.utils._utils.integer_histogram.rst", "api/pytorch_forecasting.utils._utils.masked_op.rst", "api/pytorch_forecasting.utils._utils.move_to_device.rst", "api/pytorch_forecasting.utils._utils.next_fast_len.rst", "api/pytorch_forecasting.utils._utils.padded_stack.rst", "api/pytorch_forecasting.utils._utils.profile.rst", "api/pytorch_forecasting.utils._utils.repr_class.rst", "api/pytorch_forecasting.utils._utils.to_list.rst", "api/pytorch_forecasting.utils._utils.unpack_sequence.rst", "api/pytorch_forecasting.utils._utils.unsqueeze_like.rst", "data.rst", "faq.rst", "getting-started.rst", "index.rst", "installation.rst", "metrics.rst", "models.rst", "tutorials.rst"], "indexentries": {"_baseptforecaster (class in pytorch_forecasting.models.base._base_object)": [[101, "pytorch_forecasting.models.base._base_object._BasePtForecaster", false]], "_baseptforecaster_common (class in pytorch_forecasting.models.base._base_object)": [[103, "pytorch_forecasting.models.base._base_object._BasePtForecaster_Common", false]], "_baseptforecasterv2 (class in pytorch_forecasting.models.base._base_object)": [[102, "pytorch_forecasting.models.base._base_object._BasePtForecasterV2", false]], "_baseptmetric (class in pytorch_forecasting.metrics.base_metrics._base_object)": [[65, "pytorch_forecasting.metrics.base_metrics._base_object._BasePtMetric", false]], "_check_matplotlib() (in module pytorch_forecasting.utils._dependencies._dependencies)": [[233, "pytorch_forecasting.utils._dependencies._dependencies._check_matplotlib", false]], "_clipped_log() (in module pytorch_forecasting.data.encoders)": [[19, "pytorch_forecasting.data.encoders._clipped_log", false]], "_clipped_logit() (in module pytorch_forecasting.data.encoders)": [[20, "pytorch_forecasting.data.encoders._clipped_logit", false]], "_coerce_to_dict() (in module pytorch_forecasting.utils._coerce)": [[229, "pytorch_forecasting.utils._coerce._coerce_to_dict", false]], "_coerce_to_list() (in module pytorch_forecasting.utils._coerce)": [[230, "pytorch_forecasting.utils._coerce._coerce_to_list", false]], "_concatenate_output() (in module pytorch_forecasting.models.base._base_model)": [[96, "pytorch_forecasting.models.base._base_model._concatenate_output", false]], "_find_end_indices() (in module pytorch_forecasting.data.timeseries._timeseries)": [[38, "pytorch_forecasting.data.timeseries._timeseries._find_end_indices", false]], "_get_data_by_filename() (in module pytorch_forecasting.data.examples)": [[27, "pytorch_forecasting.data.examples._get_data_by_filename", false]], "_get_deps_info() (in module pytorch_forecasting.utils._maint._show_versions)": [[250, "pytorch_forecasting.utils._maint._show_versions._get_deps_info", false]], "_get_installed_packages() (in module pytorch_forecasting.utils._dependencies._dependencies)": [[234, "pytorch_forecasting.utils._dependencies._dependencies._get_installed_packages", false]], "_get_installed_packages_private() (in module pytorch_forecasting.utils._dependencies._dependencies)": [[235, "pytorch_forecasting.utils._dependencies._dependencies._get_installed_packages_private", false]], "_get_sys_info() (in module pytorch_forecasting.utils._maint._show_versions)": [[251, "pytorch_forecasting.utils._maint._show_versions._get_sys_info", false]], "_identity() (in module pytorch_forecasting.data.encoders)": [[21, "pytorch_forecasting.data.encoders._identity", false]], "_lazywhere() (in module pytorch_forecasting.models.temporal_fusion_transformer.tuning)": [[186, "pytorch_forecasting.models.temporal_fusion_transformer.tuning._lazywhere", false]], "_minus_one() (in module pytorch_forecasting.data.encoders)": [[22, "pytorch_forecasting.data.encoders._minus_one", false]], "_plus_one() (in module pytorch_forecasting.data.encoders)": [[23, "pytorch_forecasting.data.encoders._plus_one", false]], "_residualblock (class in pytorch_forecasting.models.tide.sub_modules)": [[199, "pytorch_forecasting.models.tide.sub_modules._ResidualBlock", false]], "_square() (in module pytorch_forecasting.data.encoders)": [[24, "pytorch_forecasting.data.encoders._square", false]], "_tidemodule (class in pytorch_forecasting.models.tide.sub_modules)": [[200, "pytorch_forecasting.models.tide.sub_modules._TideModule", false]], "_torch_cat_na() (in module pytorch_forecasting.models.base._base_model)": [[97, "pytorch_forecasting.models.base._base_model._torch_cat_na", false]], "_tslibdataset (class in pytorch_forecasting.data._tslib_data_module)": [[5, "pytorch_forecasting.data._tslib_data_module._TslibDataset", false]], "addnorm (class in pytorch_forecasting.models.temporal_fusion_transformer.sub_modules)": [[174, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.AddNorm", false]], "aggregationmetric (class in pytorch_forecasting.metrics.base_metrics._base_metrics)": [[55, "pytorch_forecasting.metrics.base_metrics._base_metrics.AggregationMetric", false]], "allow_zero_length_dataloader_with_multiple_devices (pytorch_forecasting.data._tslib_data_module.tslibdatamodule attribute)": [[4, "pytorch_forecasting.data._tslib_data_module.TslibDataModule.allow_zero_length_dataloader_with_multiple_devices", false]], "allow_zero_length_dataloader_with_multiple_devices (pytorch_forecasting.data.data_module.encoderdecodertimeseriesdatamodule attribute)": [[7, "pytorch_forecasting.data.data_module.EncoderDecoderTimeSeriesDataModule.allow_zero_length_dataloader_with_multiple_devices", false]], "apply_to_list() (in module pytorch_forecasting.utils._utils)": [[257, "pytorch_forecasting.utils._utils.apply_to_list", false]], "attentionlayer (class in pytorch_forecasting.models.timexer.sub_modules)": [[211, "pytorch_forecasting.models.timexer.sub_modules.AttentionLayer", false]], "autocorrelation() (in module pytorch_forecasting.utils._utils)": [[258, "pytorch_forecasting.utils._utils.autocorrelation", false]], "autoregressivebasemodel (class in pytorch_forecasting.models.base._base_model)": [[89, "pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModel", false]], "autoregressivebasemodelwithcovariates (class in pytorch_forecasting.models.base._base_model)": [[90, "pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModelWithCovariates", false]], "baseline (class in pytorch_forecasting.models.baseline)": [[108, "pytorch_forecasting.models.baseline.Baseline", false]], "basemodel (class in pytorch_forecasting.models.base._base_model)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel", false]], "basemodel (class in pytorch_forecasting.models.base._base_model_v2)": [[99, "pytorch_forecasting.models.base._base_model_v2.BaseModel", false]], "basemodelwithcovariates (class in pytorch_forecasting.models.base._base_model)": [[92, "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates", false]], "batch_shape (pytorch_forecasting.metrics._mqf2_utils.mqf2distribution property)": [[46, "pytorch_forecasting.metrics._mqf2_utils.MQF2Distribution.batch_shape", false]], "betadistributionloss (class in pytorch_forecasting.metrics.distributions)": [[67, "pytorch_forecasting.metrics.distributions.BetaDistributionLoss", false]], "calculate_decoder_length() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.calculate_decoder_length", false]], "calculate_prediction_actual_by_variable() (pytorch_forecasting.models.base._base_model.basemodelwithcovariates method)": [[92, "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates.calculate_prediction_actual_by_variable", false]], "cat_categorical_vars() (pytorch_forecasting.models.tide._tide_dsipts._tide_v2.tide method)": [[193, "pytorch_forecasting.models.tide._tide_dsipts._tide_v2.TIDE.cat_categorical_vars", false]], "categorical_groups_mapping (pytorch_forecasting.models.base._base_model.basemodelwithcovariates property)": [[92, "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates.categorical_groups_mapping", false]], "categoricals (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.categoricals", false]], "categoricals (pytorch_forecasting.models.base._base_model.basemodelwithcovariates property)": [[92, "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates.categoricals", false]], "check_for_nonfinite() (in module pytorch_forecasting.data.timeseries._timeseries)": [[39, "pytorch_forecasting.data.timeseries._timeseries.check_for_nonfinite", false]], "classproperty (class in pytorch_forecasting.utils._classproperty)": [[227, "pytorch_forecasting.utils._classproperty.classproperty", false]], "collate_fn() (pytorch_forecasting.data._tslib_data_module.tslibdatamodule static method)": [[4, "pytorch_forecasting.data._tslib_data_module.TslibDataModule.collate_fn", false]], "compositemetric (class in pytorch_forecasting.metrics.base_metrics._base_metrics)": [[56, "pytorch_forecasting.metrics.base_metrics._base_metrics.CompositeMetric", false]], "compute() (pytorch_forecasting.metrics.base_metrics._base_metrics.aggregationmetric method)": [[55, "pytorch_forecasting.metrics.base_metrics._base_metrics.AggregationMetric.compute", false]], "compute() (pytorch_forecasting.metrics.base_metrics._base_metrics.compositemetric method)": [[56, "pytorch_forecasting.metrics.base_metrics._base_metrics.CompositeMetric.compute", false]], "compute() (pytorch_forecasting.metrics.base_metrics._base_metrics.metric method)": [[58, "pytorch_forecasting.metrics.base_metrics._base_metrics.Metric.compute", false]], "compute() (pytorch_forecasting.metrics.base_metrics._base_metrics.multihorizonmetric method)": [[59, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiHorizonMetric.compute", false]], "compute() (pytorch_forecasting.metrics.base_metrics._base_metrics.multiloss method)": [[60, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiLoss.compute", false]], "compute() (pytorch_forecasting.metrics.base_metrics._base_metrics.torchmetricwrapper method)": [[62, "pytorch_forecasting.metrics.base_metrics._base_metrics.TorchMetricWrapper.compute", false]], "concat_sequences() (in module pytorch_forecasting.utils._utils)": [[259, "pytorch_forecasting.utils._utils.concat_sequences", false]], "configure_optimizers() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.configure_optimizers", false]], "configure_optimizers() (pytorch_forecasting.models.base._base_model_v2.basemodel method)": [[99, "pytorch_forecasting.models.base._base_model_v2.BaseModel.configure_optimizers", false]], "construct_batch_groups() (pytorch_forecasting.data.samplers.groupedsampler method)": [[32, "pytorch_forecasting.data.samplers.GroupedSampler.construct_batch_groups", false]], "construct_input_vector() (pytorch_forecasting.models.deepar._deepar.deepar method)": [[111, "pytorch_forecasting.models.deepar._deepar.DeepAR.construct_input_vector", false]], "construct_input_vector() (pytorch_forecasting.models.rnn._rnn.recurrentnetwork method)": [[161, "pytorch_forecasting.models.rnn._rnn.RecurrentNetwork.construct_input_vector", false]], "convert_torchmetric_to_pytorch_forecasting_metric() (in module pytorch_forecasting.metrics.base_metrics._base_metrics)": [[63, "pytorch_forecasting.metrics.base_metrics._base_metrics.convert_torchmetric_to_pytorch_forecasting_metric", false]], "create_log() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.create_log", false]], "create_log() (pytorch_forecasting.models.deepar._deepar.deepar method)": [[111, "pytorch_forecasting.models.deepar._deepar.DeepAR.create_log", false]], "create_log() (pytorch_forecasting.models.temporal_fusion_transformer._tft.temporalfusiontransformer method)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.create_log", false]], "create_mask() (in module pytorch_forecasting.utils._utils)": [[260, "pytorch_forecasting.utils._utils.create_mask", false]], "create_test_instance() (pytorch_forecasting.models.base._base_object._baseptforecaster_common class method)": [[103, "pytorch_forecasting.models.base._base_object._BasePtForecaster_Common.create_test_instance", false]], "create_test_instances_and_names() (pytorch_forecasting.models.base._base_object._baseptforecaster_common class method)": [[103, "pytorch_forecasting.models.base._base_object._BasePtForecaster_Common.create_test_instances_and_names", false]], "crossentropy (class in pytorch_forecasting.metrics.point)": [[76, "pytorch_forecasting.metrics.point.CrossEntropy", false]], "current_stage (pytorch_forecasting.models.base._base_model.basemodel property)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.current_stage", false]], "dataembedding_inverted (class in pytorch_forecasting.models.timexer.sub_modules)": [[212, "pytorch_forecasting.models.timexer.sub_modules.DataEmbedding_inverted", false]], "decode() (pytorch_forecasting.models.deepar._deepar.deepar method)": [[111, "pytorch_forecasting.models.deepar._deepar.DeepAR.decode", false]], "decode() (pytorch_forecasting.models.rnn._rnn.recurrentnetwork method)": [[161, "pytorch_forecasting.models.rnn._rnn.RecurrentNetwork.decode", false]], "decode_autoregressive() (pytorch_forecasting.models.base._base_model.autoregressivebasemodel method)": [[89, "pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModel.decode_autoregressive", false]], "decoded_index (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.decoded_index", false]], "decoder_covariate_size (pytorch_forecasting.models.nhits._nhits.nhits property)": [[140, "pytorch_forecasting.models.nhits._nhits.NHiTS.decoder_covariate_size", false]], "decoder_covariate_size (pytorch_forecasting.models.tide._tide.tidemodel property)": [[190, "pytorch_forecasting.models.tide._tide.TiDEModel.decoder_covariate_size", false]], "decoder_covariate_size (pytorch_forecasting.models.timexer._timexer.timexer property)": [[203, "pytorch_forecasting.models.timexer._timexer.TimeXer.decoder_covariate_size", false]], "decoder_variables (pytorch_forecasting.models.base._base_model.basemodelwithcovariates property)": [[92, "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates.decoder_variables", false]], "decodermlp (class in pytorch_forecasting.models.mlp._decodermlp)": [[121, "pytorch_forecasting.models.mlp._decodermlp.DecoderMLP", false]], "decodermlp_pkg (class in pytorch_forecasting.models.mlp._decodermlp_pkg)": [[123, "pytorch_forecasting.models.mlp._decodermlp_pkg.DecoderMLP_pkg", false]], "deduce_default_output_parameters() (pytorch_forecasting.models.base._base_model.basemodel static method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.deduce_default_output_parameters", false]], "deepar (class in pytorch_forecasting.models.deepar._deepar)": [[111, "pytorch_forecasting.models.deepar._deepar.DeepAR", false]], "deepar_pkg (class in pytorch_forecasting.models.deepar._deepar_pkg)": [[113, "pytorch_forecasting.models.deepar._deepar_pkg.DeepAR_pkg", false]], "deepconvexnet (class in pytorch_forecasting.metrics._mqf2_utils)": [[45, "pytorch_forecasting.metrics._mqf2_utils.DeepConvexNet", false]], "detach() (in module pytorch_forecasting.utils._utils)": [[261, "pytorch_forecasting.utils._utils.detach", false]], "distribution_arguments (pytorch_forecasting.metrics.base_metrics._base_metrics.distributionloss attribute)": [[57, "pytorch_forecasting.metrics.base_metrics._base_metrics.DistributionLoss.distribution_arguments", false]], "distribution_class (pytorch_forecasting.metrics.base_metrics._base_metrics.distributionloss attribute)": [[57, "pytorch_forecasting.metrics.base_metrics._base_metrics.DistributionLoss.distribution_class", false]], "distribution_class (pytorch_forecasting.metrics.distributions.betadistributionloss attribute)": [[67, "pytorch_forecasting.metrics.distributions.BetaDistributionLoss.distribution_class", false]], "distribution_class (pytorch_forecasting.metrics.distributions.lognormaldistributionloss attribute)": [[70, "pytorch_forecasting.metrics.distributions.LogNormalDistributionLoss.distribution_class", false]], "distribution_class (pytorch_forecasting.metrics.distributions.multivariatenormaldistributionloss attribute)": [[72, "pytorch_forecasting.metrics.distributions.MultivariateNormalDistributionLoss.distribution_class", false]], "distribution_class (pytorch_forecasting.metrics.distributions.negativebinomialdistributionloss attribute)": [[73, "pytorch_forecasting.metrics.distributions.NegativeBinomialDistributionLoss.distribution_class", false]], "distribution_class (pytorch_forecasting.metrics.distributions.normaldistributionloss attribute)": [[74, "pytorch_forecasting.metrics.distributions.NormalDistributionLoss.distribution_class", false]], "distributionloss (class in pytorch_forecasting.metrics.base_metrics._base_metrics)": [[57, "pytorch_forecasting.metrics.base_metrics._base_metrics.DistributionLoss", false]], "dlinear (class in pytorch_forecasting.models.dlinear._dlinear_v2)": [[118, "pytorch_forecasting.models.dlinear._dlinear_v2.DLinear", false]], "dlinear_pkg_v2 (class in pytorch_forecasting.models.dlinear._dlinear_pkg_v2)": [[116, "pytorch_forecasting.models.dlinear._dlinear_pkg_v2.DLinear_pkg_v2", false]], "dropout_categoricals (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.dropout_categoricals", false]], "encode() (pytorch_forecasting.models.deepar._deepar.deepar method)": [[111, "pytorch_forecasting.models.deepar._deepar.DeepAR.encode", false]], "encode() (pytorch_forecasting.models.rnn._rnn.recurrentnetwork method)": [[161, "pytorch_forecasting.models.rnn._rnn.RecurrentNetwork.encode", false]], "encoder (class in pytorch_forecasting.models.timexer.sub_modules)": [[214, "pytorch_forecasting.models.timexer.sub_modules.Encoder", false]], "encoder_covariate_size (pytorch_forecasting.models.nhits._nhits.nhits property)": [[140, "pytorch_forecasting.models.nhits._nhits.NHiTS.encoder_covariate_size", false]], "encoder_covariate_size (pytorch_forecasting.models.tide._tide.tidemodel property)": [[190, "pytorch_forecasting.models.tide._tide.TiDEModel.encoder_covariate_size", false]], "encoder_covariate_size (pytorch_forecasting.models.timexer._timexer.timexer property)": [[203, "pytorch_forecasting.models.timexer._timexer.TimeXer.encoder_covariate_size", false]], "encoder_variables (pytorch_forecasting.models.base._base_model.basemodelwithcovariates property)": [[92, "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates.encoder_variables", false]], "encoderdecodertimeseriesdatamodule (class in pytorch_forecasting.data.data_module)": [[7, "pytorch_forecasting.data.data_module.EncoderDecoderTimeSeriesDataModule", false]], "encoderlayer (class in pytorch_forecasting.models.timexer.sub_modules)": [[215, "pytorch_forecasting.models.timexer.sub_modules.EncoderLayer", false]], "encodernormalizer (class in pytorch_forecasting.data.encoders)": [[9, "pytorch_forecasting.data.encoders.EncoderNormalizer", false]], "enembedding (class in pytorch_forecasting.models.timexer.sub_modules)": [[213, "pytorch_forecasting.models.timexer.sub_modules.EnEmbedding", false]], "energy_score() (pytorch_forecasting.metrics._mqf2_utils.mqf2distribution method)": [[46, "pytorch_forecasting.metrics._mqf2_utils.MQF2Distribution.energy_score", false]], "energy_score() (pytorch_forecasting.metrics._mqf2_utils.sequentialnet method)": [[47, "pytorch_forecasting.metrics._mqf2_utils.SequentialNet.energy_score", false]], "es_sample() (pytorch_forecasting.metrics._mqf2_utils.sequentialnet method)": [[47, "pytorch_forecasting.metrics._mqf2_utils.SequentialNet.es_sample", false]], "event_shape (pytorch_forecasting.metrics._mqf2_utils.mqf2distribution property)": [[46, "pytorch_forecasting.metrics._mqf2_utils.MQF2Distribution.event_shape", false]], "expand_static_context() (pytorch_forecasting.models.temporal_fusion_transformer._tft.temporalfusiontransformer method)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.expand_static_context", false]], "expm1transform (class in pytorch_forecasting.data.encoders)": [[10, "pytorch_forecasting.data.encoders.Expm1Transform", false]], "extra_repr() (pytorch_forecasting.metrics.base_metrics._base_metrics.metric method)": [[58, "pytorch_forecasting.metrics.base_metrics._base_metrics.Metric.extra_repr", false]], "extract_features() (pytorch_forecasting.models.base._base_model.basemodelwithcovariates method)": [[92, "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates.extract_features", false]], "filter() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.filter", false]], "fit() (pytorch_forecasting.data.encoders.encodernormalizer method)": [[9, "pytorch_forecasting.data.encoders.EncoderNormalizer.fit", false]], "fit() (pytorch_forecasting.data.encoders.groupnormalizer method)": [[11, "pytorch_forecasting.data.encoders.GroupNormalizer.fit", false]], "fit() (pytorch_forecasting.data.encoders.multinormalizer method)": [[13, "pytorch_forecasting.data.encoders.MultiNormalizer.fit", false]], "fit() (pytorch_forecasting.data.encoders.nanlabelencoder method)": [[14, "pytorch_forecasting.data.encoders.NaNLabelEncoder.fit", false]], "fit() (pytorch_forecasting.data.encoders.torchnormalizer method)": [[17, "pytorch_forecasting.data.encoders.TorchNormalizer.fit", false]], "fit_transform() (pytorch_forecasting.data.encoders.groupnormalizer method)": [[11, "pytorch_forecasting.data.encoders.GroupNormalizer.fit_transform", false]], "fit_transform() (pytorch_forecasting.data.encoders.nanlabelencoder method)": [[14, "pytorch_forecasting.data.encoders.NaNLabelEncoder.fit_transform", false]], "flat_categoricals (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.flat_categoricals", false]], "flattenhead (class in pytorch_forecasting.models.timexer.sub_modules)": [[216, "pytorch_forecasting.models.timexer.sub_modules.FlattenHead", false]], "forward() (pytorch_forecasting.metrics._mqf2_utils.sequentialnet method)": [[47, "pytorch_forecasting.metrics._mqf2_utils.SequentialNet.forward", false]], "forward() (pytorch_forecasting.metrics.base_metrics._base_metrics.aggregationmetric method)": [[55, "pytorch_forecasting.metrics.base_metrics._base_metrics.AggregationMetric.forward", false]], "forward() (pytorch_forecasting.metrics.base_metrics._base_metrics.compositemetric method)": [[56, "pytorch_forecasting.metrics.base_metrics._base_metrics.CompositeMetric.forward", false]], "forward() (pytorch_forecasting.metrics.base_metrics._base_metrics.multiloss method)": [[60, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiLoss.forward", false]], "forward() (pytorch_forecasting.metrics.base_metrics._base_metrics.torchmetricwrapper method)": [[62, "pytorch_forecasting.metrics.base_metrics._base_metrics.TorchMetricWrapper.forward", false]], "forward() (pytorch_forecasting.metrics.distributions.implicitquantilenetwork method)": [[68, "pytorch_forecasting.metrics.distributions.ImplicitQuantileNetwork.forward", false]], "forward() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.forward", false]], "forward() (pytorch_forecasting.models.base._base_model_v2.basemodel method)": [[99, "pytorch_forecasting.models.base._base_model_v2.BaseModel.forward", false]], "forward() (pytorch_forecasting.models.base._tslib_base_model_v2.tslibbasemodel method)": [[105, "pytorch_forecasting.models.base._tslib_base_model_v2.TslibBaseModel.forward", false]], "forward() (pytorch_forecasting.models.baseline.baseline method)": [[108, "pytorch_forecasting.models.baseline.Baseline.forward", false]], "forward() (pytorch_forecasting.models.deepar._deepar.deepar method)": [[111, "pytorch_forecasting.models.deepar._deepar.DeepAR.forward", false]], "forward() (pytorch_forecasting.models.dlinear._dlinear_v2.dlinear method)": [[118, "pytorch_forecasting.models.dlinear._dlinear_v2.DLinear.forward", false]], "forward() (pytorch_forecasting.models.mlp._decodermlp.decodermlp method)": [[121, "pytorch_forecasting.models.mlp._decodermlp.DecoderMLP.forward", false]], "forward() (pytorch_forecasting.models.mlp.submodules.fullyconnectedmodule method)": [[125, "pytorch_forecasting.models.mlp.submodules.FullyConnectedModule.forward", false]], "forward() (pytorch_forecasting.models.nbeats._nbeats.nbeats method)": [[128, "pytorch_forecasting.models.nbeats._nbeats.NBeats.forward", false]], "forward() (pytorch_forecasting.models.nbeats.sub_modules.nbeatsblock method)": [[132, "pytorch_forecasting.models.nbeats.sub_modules.NBEATSBlock.forward", false]], "forward() (pytorch_forecasting.models.nbeats.sub_modules.nbeatsgenericblock method)": [[133, "pytorch_forecasting.models.nbeats.sub_modules.NBEATSGenericBlock.forward", false]], "forward() (pytorch_forecasting.models.nbeats.sub_modules.nbeatsseasonalblock method)": [[134, "pytorch_forecasting.models.nbeats.sub_modules.NBEATSSeasonalBlock.forward", false]], "forward() (pytorch_forecasting.models.nbeats.sub_modules.nbeatstrendblock method)": [[135, "pytorch_forecasting.models.nbeats.sub_modules.NBEATSTrendBlock.forward", false]], "forward() (pytorch_forecasting.models.nhits._nhits.nhits method)": [[140, "pytorch_forecasting.models.nhits._nhits.NHiTS.forward", false]], "forward() (pytorch_forecasting.models.nhits.sub_modules.identitybasis method)": [[144, "pytorch_forecasting.models.nhits.sub_modules.IdentityBasis.forward", false]], "forward() (pytorch_forecasting.models.nhits.sub_modules.mlp method)": [[145, "pytorch_forecasting.models.nhits.sub_modules.MLP.forward", false]], "forward() (pytorch_forecasting.models.nhits.sub_modules.nhits method)": [[146, "pytorch_forecasting.models.nhits.sub_modules.NHiTS.forward", false]], "forward() (pytorch_forecasting.models.nhits.sub_modules.nhitsblock method)": [[147, "pytorch_forecasting.models.nhits.sub_modules.NHiTSBlock.forward", false]], "forward() (pytorch_forecasting.models.nhits.sub_modules.staticfeaturesencoder method)": [[148, "pytorch_forecasting.models.nhits.sub_modules.StaticFeaturesEncoder.forward", false]], "forward() (pytorch_forecasting.models.nn.embeddings.multiembedding method)": [[152, "pytorch_forecasting.models.nn.embeddings.MultiEmbedding.forward", false]], "forward() (pytorch_forecasting.models.nn.embeddings.timedistributedembeddingbag method)": [[153, "pytorch_forecasting.models.nn.embeddings.TimeDistributedEmbeddingBag.forward", false]], "forward() (pytorch_forecasting.models.nn.rnn.rnn method)": [[157, "pytorch_forecasting.models.nn.rnn.RNN.forward", false]], "forward() (pytorch_forecasting.models.rnn._rnn.recurrentnetwork method)": [[161, "pytorch_forecasting.models.rnn._rnn.RecurrentNetwork.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer._tft.temporalfusiontransformer method)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer._tft_v2.tft method)": [[172, "pytorch_forecasting.models.temporal_fusion_transformer._tft_v2.TFT.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.addnorm method)": [[174, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.AddNorm.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.gateaddnorm method)": [[175, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GateAddNorm.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.gatedlinearunit method)": [[176, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GatedLinearUnit.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.gatedresidualnetwork method)": [[177, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GatedResidualNetwork.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.interpretablemultiheadattention method)": [[178, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.InterpretableMultiHeadAttention.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.positionalencoder method)": [[179, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.PositionalEncoder.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.resamplenorm method)": [[180, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.ResampleNorm.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.scaleddotproductattention method)": [[181, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.ScaledDotProductAttention.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.timedistributed method)": [[182, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.TimeDistributed.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.timedistributedinterpolation method)": [[183, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.TimeDistributedInterpolation.forward", false]], "forward() (pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.variableselectionnetwork method)": [[184, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.VariableSelectionNetwork.forward", false]], "forward() (pytorch_forecasting.models.tide._tide.tidemodel method)": [[190, "pytorch_forecasting.models.tide._tide.TiDEModel.forward", false]], "forward() (pytorch_forecasting.models.tide._tide_dsipts._tide_v2.tide method)": [[193, "pytorch_forecasting.models.tide._tide_dsipts._tide_v2.TIDE.forward", false]], "forward() (pytorch_forecasting.models.tide.sub_modules._residualblock method)": [[199, "pytorch_forecasting.models.tide.sub_modules._ResidualBlock.forward", false]], "forward() (pytorch_forecasting.models.tide.sub_modules._tidemodule method)": [[200, "pytorch_forecasting.models.tide.sub_modules._TideModule.forward", false]], "forward() (pytorch_forecasting.models.timexer._timexer.timexer method)": [[203, "pytorch_forecasting.models.timexer._timexer.TimeXer.forward", false]], "forward() (pytorch_forecasting.models.timexer._timexer_v2.timexer method)": [[209, "pytorch_forecasting.models.timexer._timexer_v2.TimeXer.forward", false]], "forward() (pytorch_forecasting.models.timexer.sub_modules.attentionlayer method)": [[211, "pytorch_forecasting.models.timexer.sub_modules.AttentionLayer.forward", false]], "forward() (pytorch_forecasting.models.timexer.sub_modules.dataembedding_inverted method)": [[212, "pytorch_forecasting.models.timexer.sub_modules.DataEmbedding_inverted.forward", false]], "forward() (pytorch_forecasting.models.timexer.sub_modules.encoder method)": [[214, "pytorch_forecasting.models.timexer.sub_modules.Encoder.forward", false]], "forward() (pytorch_forecasting.models.timexer.sub_modules.encoderlayer method)": [[215, "pytorch_forecasting.models.timexer.sub_modules.EncoderLayer.forward", false]], "forward() (pytorch_forecasting.models.timexer.sub_modules.enembedding method)": [[213, "pytorch_forecasting.models.timexer.sub_modules.EnEmbedding.forward", false]], "forward() (pytorch_forecasting.models.timexer.sub_modules.flattenhead method)": [[216, "pytorch_forecasting.models.timexer.sub_modules.FlattenHead.forward", false]], "forward() (pytorch_forecasting.models.timexer.sub_modules.fullattention method)": [[217, "pytorch_forecasting.models.timexer.sub_modules.FullAttention.forward", false]], "forward() (pytorch_forecasting.models.timexer.sub_modules.positionalembedding method)": [[218, "pytorch_forecasting.models.timexer.sub_modules.PositionalEmbedding.forward", false]], "forward() (pytorch_forecasting.models.xlstm._xlstm.xlstmtime method)": [[222, "pytorch_forecasting.models.xlstm._xlstm.xLSTMTime.forward", false]], "from_dataset() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset class method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.from_dataset", false]], "from_dataset() (pytorch_forecasting.models.base._base_model.autoregressivebasemodel class method)": [[89, "pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModel.from_dataset", false]], "from_dataset() (pytorch_forecasting.models.base._base_model.basemodel class method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.from_dataset", false]], "from_dataset() (pytorch_forecasting.models.base._base_model.basemodelwithcovariates class method)": [[92, "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates.from_dataset", false]], "from_dataset() (pytorch_forecasting.models.deepar._deepar.deepar class method)": [[111, "pytorch_forecasting.models.deepar._deepar.DeepAR.from_dataset", false]], "from_dataset() (pytorch_forecasting.models.mlp._decodermlp.decodermlp class method)": [[121, "pytorch_forecasting.models.mlp._decodermlp.DecoderMLP.from_dataset", false]], "from_dataset() (pytorch_forecasting.models.nbeats._nbeats.nbeats class method)": [[128, "pytorch_forecasting.models.nbeats._nbeats.NBeats.from_dataset", false]], "from_dataset() (pytorch_forecasting.models.nhits._nhits.nhits class method)": [[140, "pytorch_forecasting.models.nhits._nhits.NHiTS.from_dataset", false]], "from_dataset() (pytorch_forecasting.models.rnn._rnn.recurrentnetwork class method)": [[161, "pytorch_forecasting.models.rnn._rnn.RecurrentNetwork.from_dataset", false]], "from_dataset() (pytorch_forecasting.models.temporal_fusion_transformer._tft.temporalfusiontransformer class method)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.from_dataset", false]], "from_dataset() (pytorch_forecasting.models.tide._tide.tidemodel class method)": [[190, "pytorch_forecasting.models.tide._tide.TiDEModel.from_dataset", false]], "from_dataset() (pytorch_forecasting.models.timexer._timexer.timexer class method)": [[203, "pytorch_forecasting.models.timexer._timexer.TimeXer.from_dataset", false]], "from_dataset() (pytorch_forecasting.models.xlstm._xlstm.xlstmtime class method)": [[222, "pytorch_forecasting.models.xlstm._xlstm.xLSTMTime.from_dataset", false]], "from_parameters() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset class method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.from_parameters", false]], "fullattention (class in pytorch_forecasting.models.timexer.sub_modules)": [[217, "pytorch_forecasting.models.timexer.sub_modules.FullAttention", false]], "fullyconnectedmodule (class in pytorch_forecasting.models.mlp.submodules)": [[125, "pytorch_forecasting.models.mlp.submodules.FullyConnectedModule", false]], "gateaddnorm (class in pytorch_forecasting.models.temporal_fusion_transformer.sub_modules)": [[175, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GateAddNorm", false]], "gatedlinearunit (class in pytorch_forecasting.models.temporal_fusion_transformer.sub_modules)": [[176, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GatedLinearUnit", false]], "gatedresidualnetwork (class in pytorch_forecasting.models.temporal_fusion_transformer.sub_modules)": [[177, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GatedResidualNetwork", false]], "generate_ar_data() (in module pytorch_forecasting.data.examples)": [[28, "pytorch_forecasting.data.examples.generate_ar_data", false]], "get_attention_mask() (pytorch_forecasting.models.temporal_fusion_transformer._tft.temporalfusiontransformer method)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.get_attention_mask", false]], "get_base_test_params() (pytorch_forecasting.models.deepar._deepar_pkg.deepar_pkg class method)": [[113, "pytorch_forecasting.models.deepar._deepar_pkg.DeepAR_pkg.get_base_test_params", false]], "get_base_test_params() (pytorch_forecasting.models.mlp._decodermlp_pkg.decodermlp_pkg class method)": [[123, "pytorch_forecasting.models.mlp._decodermlp_pkg.DecoderMLP_pkg.get_base_test_params", false]], "get_base_test_params() (pytorch_forecasting.models.nbeats._nbeats_pkg.nbeats_pkg class method)": [[130, "pytorch_forecasting.models.nbeats._nbeats_pkg.NBeats_pkg.get_base_test_params", false]], "get_base_test_params() (pytorch_forecasting.models.nhits._nhits_pkg.nhits_pkg class method)": [[142, "pytorch_forecasting.models.nhits._nhits_pkg.NHiTS_pkg.get_base_test_params", false]], "get_base_test_params() (pytorch_forecasting.models.rnn._rnn_pkg.recurrentnetwork_pkg class method)": [[163, "pytorch_forecasting.models.rnn._rnn_pkg.RecurrentNetwork_pkg.get_base_test_params", false]], "get_base_test_params() (pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg.temporalfusiontransformer_pkg class method)": [[168, "pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg.TemporalFusionTransformer_pkg.get_base_test_params", false]], "get_base_test_params() (pytorch_forecasting.models.tide._tide_pkg.tidemodel_pkg class method)": [[197, "pytorch_forecasting.models.tide._tide_pkg.TiDEModel_pkg.get_base_test_params", false]], "get_base_test_params() (pytorch_forecasting.models.timexer._timexer_pkg.timexer_pkg class method)": [[205, "pytorch_forecasting.models.timexer._timexer_pkg.TimeXer_pkg.get_base_test_params", false]], "get_base_test_params() (pytorch_forecasting.models.xlstm._xlstm_pkg.xlstmtime_pkg class method)": [[224, "pytorch_forecasting.models.xlstm._xlstm_pkg.xLSTMTime_pkg.get_base_test_params", false]], "get_cls() (pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg.quantileloss_pkg class method)": [[52, "pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg.QuantileLoss_pkg.get_cls", false]], "get_cls() (pytorch_forecasting.metrics.base_metrics._base_object._baseptmetric class method)": [[65, "pytorch_forecasting.metrics.base_metrics._base_object._BasePtMetric.get_cls", false]], "get_cls() (pytorch_forecasting.models.base._base_object._baseptforecaster_common class method)": [[103, "pytorch_forecasting.models.base._base_object._BasePtForecaster_Common.get_cls", false]], "get_cls() (pytorch_forecasting.models.deepar._deepar_pkg.deepar_pkg class method)": [[113, "pytorch_forecasting.models.deepar._deepar_pkg.DeepAR_pkg.get_cls", false]], "get_cls() (pytorch_forecasting.models.dlinear._dlinear_pkg_v2.dlinear_pkg_v2 class method)": [[116, "pytorch_forecasting.models.dlinear._dlinear_pkg_v2.DLinear_pkg_v2.get_cls", false]], "get_cls() (pytorch_forecasting.models.mlp._decodermlp_pkg.decodermlp_pkg class method)": [[123, "pytorch_forecasting.models.mlp._decodermlp_pkg.DecoderMLP_pkg.get_cls", false]], "get_cls() (pytorch_forecasting.models.nbeats._nbeats_pkg.nbeats_pkg class method)": [[130, "pytorch_forecasting.models.nbeats._nbeats_pkg.NBeats_pkg.get_cls", false]], "get_cls() (pytorch_forecasting.models.nhits._nhits_pkg.nhits_pkg class method)": [[142, "pytorch_forecasting.models.nhits._nhits_pkg.NHiTS_pkg.get_cls", false]], "get_cls() (pytorch_forecasting.models.rnn._rnn_pkg.recurrentnetwork_pkg class method)": [[163, "pytorch_forecasting.models.rnn._rnn_pkg.RecurrentNetwork_pkg.get_cls", false]], "get_cls() (pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg.temporalfusiontransformer_pkg class method)": [[168, "pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg.TemporalFusionTransformer_pkg.get_cls", false]], "get_cls() (pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2.tft_pkg_v2 class method)": [[170, "pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2.TFT_pkg_v2.get_cls", false]], "get_cls() (pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg.tide_pkg_v2 class method)": [[195, "pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg.TIDE_pkg_v2.get_cls", false]], "get_cls() (pytorch_forecasting.models.tide._tide_pkg.tidemodel_pkg class method)": [[197, "pytorch_forecasting.models.tide._tide_pkg.TiDEModel_pkg.get_cls", false]], "get_cls() (pytorch_forecasting.models.timexer._timexer_pkg.timexer_pkg class method)": [[205, "pytorch_forecasting.models.timexer._timexer_pkg.TimeXer_pkg.get_cls", false]], "get_cls() (pytorch_forecasting.models.timexer._timexer_pkg_v2.timexer_pkg_v2 class method)": [[207, "pytorch_forecasting.models.timexer._timexer_pkg_v2.TimeXer_pkg_v2.get_cls", false]], "get_cls() (pytorch_forecasting.models.xlstm._xlstm_pkg.xlstmtime_pkg class method)": [[224, "pytorch_forecasting.models.xlstm._xlstm_pkg.xLSTMTime_pkg.get_cls", false]], "get_embedding_size() (in module pytorch_forecasting.utils._utils)": [[262, "pytorch_forecasting.utils._utils.get_embedding_size", false]], "get_encoder() (pytorch_forecasting.metrics.base_metrics._base_object._baseptmetric class method)": [[65, "pytorch_forecasting.metrics.base_metrics._base_object._BasePtMetric.get_encoder", false]], "get_groups() (pytorch_forecasting.data.samplers.groupedsampler method)": [[32, "pytorch_forecasting.data.samplers.GroupedSampler.get_groups", false]], "get_groups() (pytorch_forecasting.data.samplers.timesynchronizedbatchsampler method)": [[33, "pytorch_forecasting.data.samplers.TimeSynchronizedBatchSampler.get_groups", false]], "get_metadata() (pytorch_forecasting.data.timeseries._timeseries_v2.timeseries method)": [[41, "pytorch_forecasting.data.timeseries._timeseries_v2.TimeSeries.get_metadata", false]], "get_metric_test_params() (pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg.quantileloss_pkg class method)": [[52, "pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg.QuantileLoss_pkg.get_metric_test_params", false]], "get_metric_test_params() (pytorch_forecasting.metrics.base_metrics._base_object._baseptmetric class method)": [[65, "pytorch_forecasting.metrics.base_metrics._base_object._BasePtMetric.get_metric_test_params", false]], "get_norm() (pytorch_forecasting.data.encoders.groupnormalizer method)": [[11, "pytorch_forecasting.data.encoders.GroupNormalizer.get_norm", false]], "get_parameters() (pytorch_forecasting.data.encoders.groupnormalizer method)": [[11, "pytorch_forecasting.data.encoders.GroupNormalizer.get_parameters", false]], "get_parameters() (pytorch_forecasting.data.encoders.multinormalizer method)": [[13, "pytorch_forecasting.data.encoders.MultiNormalizer.get_parameters", false]], "get_parameters() (pytorch_forecasting.data.encoders.nanlabelencoder method)": [[14, "pytorch_forecasting.data.encoders.NaNLabelEncoder.get_parameters", false]], "get_parameters() (pytorch_forecasting.data.encoders.torchnormalizer method)": [[17, "pytorch_forecasting.data.encoders.TorchNormalizer.get_parameters", false]], "get_parameters() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.get_parameters", false]], "get_rnn() (in module pytorch_forecasting.models.nn.rnn)": [[158, "pytorch_forecasting.models.nn.rnn.get_rnn", false]], "get_stallion_data() (in module pytorch_forecasting.data.examples)": [[29, "pytorch_forecasting.data.examples.get_stallion_data", false]], "get_test_train_params() (pytorch_forecasting.models.dlinear._dlinear_pkg_v2.dlinear_pkg_v2 class method)": [[116, "pytorch_forecasting.models.dlinear._dlinear_pkg_v2.DLinear_pkg_v2.get_test_train_params", false]], "get_test_train_params() (pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2.tft_pkg_v2 class method)": [[170, "pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2.TFT_pkg_v2.get_test_train_params", false]], "get_test_train_params() (pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg.tide_pkg_v2 class method)": [[195, "pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg.TIDE_pkg_v2.get_test_train_params", false]], "get_test_train_params() (pytorch_forecasting.models.timexer._timexer_pkg_v2.timexer_pkg_v2 class method)": [[207, "pytorch_forecasting.models.timexer._timexer_pkg_v2.TimeXer_pkg_v2.get_test_train_params", false]], "get_transform() (pytorch_forecasting.data.encoders.transformmixin class method)": [[18, "pytorch_forecasting.data.encoders.TransformMixIn.get_transform", false]], "get_transformer() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.get_transformer", false]], "groupby_apply() (in module pytorch_forecasting.utils._utils)": [[263, "pytorch_forecasting.utils._utils.groupby_apply", false]], "groupedsampler (class in pytorch_forecasting.data.samplers)": [[32, "pytorch_forecasting.data.samplers.GroupedSampler", false]], "groupnormalizer (class in pytorch_forecasting.data.encoders)": [[11, "pytorch_forecasting.data.encoders.GroupNormalizer", false]], "gru (class in pytorch_forecasting.models.nn.rnn)": [[155, "pytorch_forecasting.models.nn.rnn.GRU", false]], "handle_no_encoding() (pytorch_forecasting.models.nn.rnn.gru method)": [[155, "pytorch_forecasting.models.nn.rnn.GRU.handle_no_encoding", false]], "handle_no_encoding() (pytorch_forecasting.models.nn.rnn.lstm method)": [[156, "pytorch_forecasting.models.nn.rnn.LSTM.handle_no_encoding", false]], "handle_no_encoding() (pytorch_forecasting.models.nn.rnn.rnn method)": [[157, "pytorch_forecasting.models.nn.rnn.RNN.handle_no_encoding", false]], "identitybasis (class in pytorch_forecasting.models.nhits.sub_modules)": [[144, "pytorch_forecasting.models.nhits.sub_modules.IdentityBasis", false]], "iget() (pytorch_forecasting.utils._utils.outputmixin method)": [[255, "pytorch_forecasting.utils._utils.OutputMixIn.iget", false]], "implicitquantilenetwork (class in pytorch_forecasting.metrics.distributions)": [[68, "pytorch_forecasting.metrics.distributions.ImplicitQuantileNetwork", false]], "implicitquantilenetworkdistributionloss (class in pytorch_forecasting.metrics.distributions)": [[69, "pytorch_forecasting.metrics.distributions.ImplicitQuantileNetworkDistributionLoss", false]], "init_hidden_state() (pytorch_forecasting.models.nn.rnn.gru method)": [[155, "pytorch_forecasting.models.nn.rnn.GRU.init_hidden_state", false]], "init_hidden_state() (pytorch_forecasting.models.nn.rnn.lstm method)": [[156, "pytorch_forecasting.models.nn.rnn.LSTM.init_hidden_state", false]], "init_hidden_state() (pytorch_forecasting.models.nn.rnn.rnn method)": [[157, "pytorch_forecasting.models.nn.rnn.RNN.init_hidden_state", false]], "init_weights() (in module pytorch_forecasting.models.nhits.sub_modules)": [[149, "pytorch_forecasting.models.nhits.sub_modules.init_weights", false]], "initialparameterrepresentermixin (class in pytorch_forecasting.utils._utils)": [[254, "pytorch_forecasting.utils._utils.InitialParameterRepresenterMixIn", false]], "integer_histogram() (in module pytorch_forecasting.utils._utils)": [[264, "pytorch_forecasting.utils._utils.integer_histogram", false]], "interpret_output() (pytorch_forecasting.models.temporal_fusion_transformer._tft.temporalfusiontransformer method)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.interpret_output", false]], "interpretablemultiheadattention (class in pytorch_forecasting.models.temporal_fusion_transformer.sub_modules)": [[178, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.InterpretableMultiHeadAttention", false]], "inverse_preprocess() (pytorch_forecasting.data.encoders.transformmixin method)": [[18, "pytorch_forecasting.data.encoders.TransformMixIn.inverse_preprocess", false]], "inverse_transform() (pytorch_forecasting.data.encoders.groupnormalizer method)": [[11, "pytorch_forecasting.data.encoders.GroupNormalizer.inverse_transform", false]], "inverse_transform() (pytorch_forecasting.data.encoders.nanlabelencoder method)": [[14, "pytorch_forecasting.data.encoders.NaNLabelEncoder.inverse_transform", false]], "inverse_transform() (pytorch_forecasting.data.encoders.torchnormalizer method)": [[17, "pytorch_forecasting.data.encoders.TorchNormalizer.inverse_transform", false]], "is_numeric() (pytorch_forecasting.data.encoders.nanlabelencoder static method)": [[14, "pytorch_forecasting.data.encoders.NaNLabelEncoder.is_numeric", false]], "lagged_target_positions (pytorch_forecasting.models.base._base_model.autoregressivebasemodel property)": [[89, "pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModel.lagged_target_positions", false]], "lagged_target_positions (pytorch_forecasting.models.base._base_model.autoregressivebasemodelwithcovariates property)": [[90, "pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModelWithCovariates.lagged_target_positions", false]], "lagged_targets (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.lagged_targets", false]], "lagged_variables (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.lagged_variables", false]], "linear() (in module pytorch_forecasting.models.nbeats.sub_modules)": [[136, "pytorch_forecasting.models.nbeats.sub_modules.linear", false]], "linspace() (in module pytorch_forecasting.models.nbeats.sub_modules)": [[137, "pytorch_forecasting.models.nbeats.sub_modules.linspace", false]], "load() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset class method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.load", false]], "load_toydata() (in module pytorch_forecasting.data.examples)": [[30, "pytorch_forecasting.data.examples.load_toydata", false]], "log() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.log", false]], "log_abs_det_jacobian() (pytorch_forecasting.data.encoders.minusonetransform method)": [[12, "pytorch_forecasting.data.encoders.MinusOneTransform.log_abs_det_jacobian", false]], "log_abs_det_jacobian() (pytorch_forecasting.data.encoders.relutransform method)": [[15, "pytorch_forecasting.data.encoders.ReLuTransform.log_abs_det_jacobian", false]], "log_abs_det_jacobian() (pytorch_forecasting.data.encoders.softplustransform method)": [[16, "pytorch_forecasting.data.encoders.SoftplusTransform.log_abs_det_jacobian", false]], "log_embeddings() (pytorch_forecasting.models.temporal_fusion_transformer._tft.temporalfusiontransformer method)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.log_embeddings", false]], "log_gradient_flow() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.log_gradient_flow", false]], "log_interpretation() (pytorch_forecasting.models.nbeats._nbeats.nbeats method)": [[128, "pytorch_forecasting.models.nbeats._nbeats.NBeats.log_interpretation", false]], "log_interpretation() (pytorch_forecasting.models.nhits._nhits.nhits method)": [[140, "pytorch_forecasting.models.nhits._nhits.NHiTS.log_interpretation", false]], "log_interpretation() (pytorch_forecasting.models.temporal_fusion_transformer._tft.temporalfusiontransformer method)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.log_interpretation", false]], "log_interval (pytorch_forecasting.models.base._base_model.basemodel property)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.log_interval", false]], "log_metrics() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.log_metrics", false]], "log_metrics() (pytorch_forecasting.models.base._base_model_v2.basemodel method)": [[99, "pytorch_forecasting.models.base._base_model_v2.BaseModel.log_metrics", false]], "log_prediction() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.log_prediction", false]], "log_prob() (pytorch_forecasting.metrics._mqf2_utils.mqf2distribution method)": [[46, "pytorch_forecasting.metrics._mqf2_utils.MQF2Distribution.log_prob", false]], "log_prob() (pytorch_forecasting.metrics._mqf2_utils.transformedmqf2distribution method)": [[48, "pytorch_forecasting.metrics._mqf2_utils.TransformedMQF2Distribution.log_prob", false]], "lognormaldistributionloss (class in pytorch_forecasting.metrics.distributions)": [[70, "pytorch_forecasting.metrics.distributions.LogNormalDistributionLoss", false]], "loss() (pytorch_forecasting.metrics.base_metrics._base_metrics.distributionloss method)": [[57, "pytorch_forecasting.metrics.base_metrics._base_metrics.DistributionLoss.loss", false]], "loss() (pytorch_forecasting.metrics.base_metrics._base_metrics.multihorizonmetric method)": [[59, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiHorizonMetric.loss", false]], "loss() (pytorch_forecasting.metrics.base_metrics._base_metrics.multivariatedistributionloss method)": [[61, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultivariateDistributionLoss.loss", false]], "loss() (pytorch_forecasting.metrics.distributions.betadistributionloss method)": [[67, "pytorch_forecasting.metrics.distributions.BetaDistributionLoss.loss", false]], "loss() (pytorch_forecasting.metrics.distributions.implicitquantilenetworkdistributionloss method)": [[69, "pytorch_forecasting.metrics.distributions.ImplicitQuantileNetworkDistributionLoss.loss", false]], "loss() (pytorch_forecasting.metrics.distributions.mqf2distributionloss method)": [[71, "pytorch_forecasting.metrics.distributions.MQF2DistributionLoss.loss", false]], "loss() (pytorch_forecasting.metrics.point.crossentropy method)": [[76, "pytorch_forecasting.metrics.point.CrossEntropy.loss", false]], "loss() (pytorch_forecasting.metrics.point.mae method)": [[77, "pytorch_forecasting.metrics.point.MAE.loss", false]], "loss() (pytorch_forecasting.metrics.point.mape method)": [[78, "pytorch_forecasting.metrics.point.MAPE.loss", false]], "loss() (pytorch_forecasting.metrics.point.mase method)": [[79, "pytorch_forecasting.metrics.point.MASE.loss", false]], "loss() (pytorch_forecasting.metrics.point.poissonloss method)": [[80, "pytorch_forecasting.metrics.point.PoissonLoss.loss", false]], "loss() (pytorch_forecasting.metrics.point.rmse method)": [[81, "pytorch_forecasting.metrics.point.RMSE.loss", false]], "loss() (pytorch_forecasting.metrics.point.smape method)": [[82, "pytorch_forecasting.metrics.point.SMAPE.loss", false]], "loss() (pytorch_forecasting.metrics.point.tweedieloss method)": [[83, "pytorch_forecasting.metrics.point.TweedieLoss.loss", false]], "loss() (pytorch_forecasting.metrics.quantile.quantileloss method)": [[85, "pytorch_forecasting.metrics.quantile.QuantileLoss.loss", false]], "lstm (class in pytorch_forecasting.models.nn.rnn)": [[156, "pytorch_forecasting.models.nn.rnn.LSTM", false]], "mae (class in pytorch_forecasting.metrics.point)": [[77, "pytorch_forecasting.metrics.point.MAE", false]], "map_x_to_distribution() (pytorch_forecasting.metrics.base_metrics._base_metrics.distributionloss method)": [[57, "pytorch_forecasting.metrics.base_metrics._base_metrics.DistributionLoss.map_x_to_distribution", false]], "map_x_to_distribution() (pytorch_forecasting.metrics.distributions.betadistributionloss method)": [[67, "pytorch_forecasting.metrics.distributions.BetaDistributionLoss.map_x_to_distribution", false]], "map_x_to_distribution() (pytorch_forecasting.metrics.distributions.lognormaldistributionloss method)": [[70, "pytorch_forecasting.metrics.distributions.LogNormalDistributionLoss.map_x_to_distribution", false]], "map_x_to_distribution() (pytorch_forecasting.metrics.distributions.mqf2distributionloss method)": [[71, "pytorch_forecasting.metrics.distributions.MQF2DistributionLoss.map_x_to_distribution", false]], "map_x_to_distribution() (pytorch_forecasting.metrics.distributions.multivariatenormaldistributionloss method)": [[72, "pytorch_forecasting.metrics.distributions.MultivariateNormalDistributionLoss.map_x_to_distribution", false]], "map_x_to_distribution() (pytorch_forecasting.metrics.distributions.negativebinomialdistributionloss method)": [[73, "pytorch_forecasting.metrics.distributions.NegativeBinomialDistributionLoss.map_x_to_distribution", false]], "map_x_to_distribution() (pytorch_forecasting.metrics.distributions.normaldistributionloss method)": [[74, "pytorch_forecasting.metrics.distributions.NormalDistributionLoss.map_x_to_distribution", false]], "mape (class in pytorch_forecasting.metrics.point)": [[78, "pytorch_forecasting.metrics.point.MAPE", false]], "mase (class in pytorch_forecasting.metrics.point)": [[79, "pytorch_forecasting.metrics.point.MASE", false]], "mask_losses() (pytorch_forecasting.metrics.base_metrics._base_metrics.multihorizonmetric method)": [[59, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiHorizonMetric.mask_losses", false]], "masked_op() (in module pytorch_forecasting.utils._utils)": [[265, "pytorch_forecasting.utils._utils.masked_op", false]], "max_lag (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.max_lag", false]], "metadata (pytorch_forecasting.data._tslib_data_module.tslibdatamodule property)": [[4, "pytorch_forecasting.data._tslib_data_module.TslibDataModule.metadata", false]], "metadata (pytorch_forecasting.data.data_module.encoderdecodertimeseriesdatamodule property)": [[7, "pytorch_forecasting.data.data_module.EncoderDecoderTimeSeriesDataModule.metadata", false]], "metric (class in pytorch_forecasting.metrics.base_metrics._base_metrics)": [[58, "pytorch_forecasting.metrics.base_metrics._base_metrics.Metric", false]], "min_lag (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.min_lag", false]], "minusonetransform (class in pytorch_forecasting.data.encoders)": [[12, "pytorch_forecasting.data.encoders.MinusOneTransform", false]], "mlp (class in pytorch_forecasting.models.nhits.sub_modules)": [[145, "pytorch_forecasting.models.nhits.sub_modules.MLP", false]], "module": [[2, "module-pytorch_forecasting.data", false], [3, "module-pytorch_forecasting.data._tslib_data_module", false], [6, "module-pytorch_forecasting.data.data_module", false], [8, "module-pytorch_forecasting.data.encoders", false], [26, "module-pytorch_forecasting.data.examples", false], [31, "module-pytorch_forecasting.data.samplers", false], [34, "module-pytorch_forecasting.data.tests", false], [35, "module-pytorch_forecasting.data.timeseries", false], [36, "module-pytorch_forecasting.data.timeseries._timeseries", false], [40, "module-pytorch_forecasting.data.timeseries._timeseries_v2", false], [42, "module-pytorch_forecasting.metrics", false], [43, "module-pytorch_forecasting.metrics._distributions_pkg", false], [44, "module-pytorch_forecasting.metrics._mqf2_utils", false], [49, "module-pytorch_forecasting.metrics._point_pkg", false], [50, "module-pytorch_forecasting.metrics._quantile_pkg", false], [51, "module-pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg", false], [53, "module-pytorch_forecasting.metrics.base_metrics", false], [54, "module-pytorch_forecasting.metrics.base_metrics._base_metrics", false], [64, "module-pytorch_forecasting.metrics.base_metrics._base_object", false], [66, "module-pytorch_forecasting.metrics.distributions", false], [75, "module-pytorch_forecasting.metrics.point", false], [84, "module-pytorch_forecasting.metrics.quantile", false], [86, "module-pytorch_forecasting.models", false], [87, "module-pytorch_forecasting.models.base", false], [88, "module-pytorch_forecasting.models.base._base_model", false], [98, "module-pytorch_forecasting.models.base._base_model_v2", false], [100, "module-pytorch_forecasting.models.base._base_object", false], [104, "module-pytorch_forecasting.models.base._tslib_base_model_v2", false], [106, "module-pytorch_forecasting.models.base_model", false], [107, "module-pytorch_forecasting.models.baseline", false], [109, "module-pytorch_forecasting.models.deepar", false], [110, "module-pytorch_forecasting.models.deepar._deepar", false], [112, "module-pytorch_forecasting.models.deepar._deepar_pkg", false], [114, "module-pytorch_forecasting.models.dlinear", false], [115, "module-pytorch_forecasting.models.dlinear._dlinear_pkg_v2", false], [117, "module-pytorch_forecasting.models.dlinear._dlinear_v2", false], [119, "module-pytorch_forecasting.models.mlp", false], [120, "module-pytorch_forecasting.models.mlp._decodermlp", false], [122, "module-pytorch_forecasting.models.mlp._decodermlp_pkg", false], [124, "module-pytorch_forecasting.models.mlp.submodules", false], [126, "module-pytorch_forecasting.models.nbeats", false], [127, "module-pytorch_forecasting.models.nbeats._nbeats", false], [129, "module-pytorch_forecasting.models.nbeats._nbeats_pkg", false], [131, "module-pytorch_forecasting.models.nbeats.sub_modules", false], [138, "module-pytorch_forecasting.models.nhits", false], [139, "module-pytorch_forecasting.models.nhits._nhits", false], [141, "module-pytorch_forecasting.models.nhits._nhits_pkg", false], [143, "module-pytorch_forecasting.models.nhits.sub_modules", false], [150, "module-pytorch_forecasting.models.nn", false], [151, "module-pytorch_forecasting.models.nn.embeddings", false], [154, "module-pytorch_forecasting.models.nn.rnn", false], [159, "module-pytorch_forecasting.models.rnn", false], [160, "module-pytorch_forecasting.models.rnn._rnn", false], [162, "module-pytorch_forecasting.models.rnn._rnn_pkg", false], [164, "module-pytorch_forecasting.models.temporal_fusion_transformer", false], [165, "module-pytorch_forecasting.models.temporal_fusion_transformer._tft", false], [167, "module-pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg", false], [169, "module-pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2", false], [171, "module-pytorch_forecasting.models.temporal_fusion_transformer._tft_v2", false], [173, "module-pytorch_forecasting.models.temporal_fusion_transformer.sub_modules", false], [185, "module-pytorch_forecasting.models.temporal_fusion_transformer.tuning", false], [188, "module-pytorch_forecasting.models.tide", false], [189, "module-pytorch_forecasting.models.tide._tide", false], [191, "module-pytorch_forecasting.models.tide._tide_dsipts", false], [192, "module-pytorch_forecasting.models.tide._tide_dsipts._tide_v2", false], [194, "module-pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg", false], [196, "module-pytorch_forecasting.models.tide._tide_pkg", false], [198, "module-pytorch_forecasting.models.tide.sub_modules", false], [201, "module-pytorch_forecasting.models.timexer", false], [202, "module-pytorch_forecasting.models.timexer._timexer", false], [204, "module-pytorch_forecasting.models.timexer._timexer_pkg", false], [206, "module-pytorch_forecasting.models.timexer._timexer_pkg_v2", false], [208, "module-pytorch_forecasting.models.timexer._timexer_v2", false], [210, "module-pytorch_forecasting.models.timexer.sub_modules", false], [220, "module-pytorch_forecasting.models.xlstm", false], [221, "module-pytorch_forecasting.models.xlstm._xlstm", false], [223, "module-pytorch_forecasting.models.xlstm._xlstm_pkg", false], [225, "module-pytorch_forecasting.utils", false], [226, "module-pytorch_forecasting.utils._classproperty", false], [228, "module-pytorch_forecasting.utils._coerce", false], [231, "module-pytorch_forecasting.utils._dependencies", false], [232, "module-pytorch_forecasting.utils._dependencies._dependencies", false], [236, "module-pytorch_forecasting.utils._dependencies._safe_import", false], [237, "module-pytorch_forecasting.utils._dependencies.tests", false], [238, "module-pytorch_forecasting.utils._dependencies.tests.test_safe_import", false], [248, "module-pytorch_forecasting.utils._maint", false], [249, "module-pytorch_forecasting.utils._maint._show_versions", false], [253, "module-pytorch_forecasting.utils._utils", false]], "move_to_device() (in module pytorch_forecasting.utils._utils)": [[266, "pytorch_forecasting.utils._utils.move_to_device", false]], "mqf2distribution (class in pytorch_forecasting.metrics._mqf2_utils)": [[46, "pytorch_forecasting.metrics._mqf2_utils.MQF2Distribution", false]], "mqf2distributionloss (class in pytorch_forecasting.metrics.distributions)": [[71, "pytorch_forecasting.metrics.distributions.MQF2DistributionLoss", false]], "multi_target (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.multi_target", false]], "multiembedding (class in pytorch_forecasting.models.nn.embeddings)": [[152, "pytorch_forecasting.models.nn.embeddings.MultiEmbedding", false]], "multihorizonmetric (class in pytorch_forecasting.metrics.base_metrics._base_metrics)": [[59, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiHorizonMetric", false]], "multiloss (class in pytorch_forecasting.metrics.base_metrics._base_metrics)": [[60, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiLoss", false]], "multinormalizer (class in pytorch_forecasting.data.encoders)": [[13, "pytorch_forecasting.data.encoders.MultiNormalizer", false]], "multivariatedistributionloss (class in pytorch_forecasting.metrics.base_metrics._base_metrics)": [[61, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultivariateDistributionLoss", false]], "multivariatenormaldistributionloss (class in pytorch_forecasting.metrics.distributions)": [[72, "pytorch_forecasting.metrics.distributions.MultivariateNormalDistributionLoss", false]], "n_stacks (pytorch_forecasting.models.nhits._nhits.nhits property)": [[140, "pytorch_forecasting.models.nhits._nhits.NHiTS.n_stacks", false]], "n_targets (pytorch_forecasting.models.base._base_model.basemodel property)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.n_targets", false]], "name() (pytorch_forecasting.metrics.base_metrics._base_object._baseptmetric class method)": [[65, "pytorch_forecasting.metrics.base_metrics._base_object._BasePtMetric.name", false]], "name() (pytorch_forecasting.models.base._base_object._baseptforecaster_common class method)": [[103, "pytorch_forecasting.models.base._base_object._BasePtForecaster_Common.name", false]], "names (pytorch_forecasting.data.encoders.groupnormalizer property)": [[11, "pytorch_forecasting.data.encoders.GroupNormalizer.names", false]], "nanlabelencoder (class in pytorch_forecasting.data.encoders)": [[14, "pytorch_forecasting.data.encoders.NaNLabelEncoder", false]], "nbeats (class in pytorch_forecasting.models.nbeats._nbeats)": [[128, "pytorch_forecasting.models.nbeats._nbeats.NBeats", false]], "nbeats_pkg (class in pytorch_forecasting.models.nbeats._nbeats_pkg)": [[130, "pytorch_forecasting.models.nbeats._nbeats_pkg.NBeats_pkg", false]], "nbeatsblock (class in pytorch_forecasting.models.nbeats.sub_modules)": [[132, "pytorch_forecasting.models.nbeats.sub_modules.NBEATSBlock", false]], "nbeatsgenericblock (class in pytorch_forecasting.models.nbeats.sub_modules)": [[133, "pytorch_forecasting.models.nbeats.sub_modules.NBEATSGenericBlock", false]], "nbeatsseasonalblock (class in pytorch_forecasting.models.nbeats.sub_modules)": [[134, "pytorch_forecasting.models.nbeats.sub_modules.NBEATSSeasonalBlock", false]], "nbeatstrendblock (class in pytorch_forecasting.models.nbeats.sub_modules)": [[135, "pytorch_forecasting.models.nbeats.sub_modules.NBEATSTrendBlock", false]], "negativebinomialdistributionloss (class in pytorch_forecasting.metrics.distributions)": [[73, "pytorch_forecasting.metrics.distributions.NegativeBinomialDistributionLoss", false]], "next_fast_len() (in module pytorch_forecasting.utils._utils)": [[267, "pytorch_forecasting.utils._utils.next_fast_len", false]], "nhits (class in pytorch_forecasting.models.nhits._nhits)": [[140, "pytorch_forecasting.models.nhits._nhits.NHiTS", false]], "nhits (class in pytorch_forecasting.models.nhits.sub_modules)": [[146, "pytorch_forecasting.models.nhits.sub_modules.NHiTS", false]], "nhits_pkg (class in pytorch_forecasting.models.nhits._nhits_pkg)": [[142, "pytorch_forecasting.models.nhits._nhits_pkg.NHiTS_pkg", false]], "nhitsblock (class in pytorch_forecasting.models.nhits.sub_modules)": [[147, "pytorch_forecasting.models.nhits.sub_modules.NHiTSBlock", false]], "normaldistributionloss (class in pytorch_forecasting.metrics.distributions)": [[74, "pytorch_forecasting.metrics.distributions.NormalDistributionLoss", false]], "on_after_backward() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.on_after_backward", false]], "on_epoch_end() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.on_epoch_end", false]], "on_epoch_end() (pytorch_forecasting.models.temporal_fusion_transformer._tft.temporalfusiontransformer method)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.on_epoch_end", false]], "on_fit_end() (pytorch_forecasting.models.temporal_fusion_transformer._tft.temporalfusiontransformer method)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.on_fit_end", false]], "on_load_checkpoint() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.on_load_checkpoint", false]], "on_predict_batch_end() (pytorch_forecasting.models.base._base_model.predictcallback method)": [[93, "pytorch_forecasting.models.base._base_model.PredictCallback.on_predict_batch_end", false]], "on_predict_epoch_end() (pytorch_forecasting.models.base._base_model.predictcallback method)": [[93, "pytorch_forecasting.models.base._base_model.PredictCallback.on_predict_epoch_end", false]], "on_save_checkpoint() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.on_save_checkpoint", false]], "on_test_epoch_end() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.on_test_epoch_end", false]], "on_train_epoch_end() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.on_train_epoch_end", false]], "on_validation_epoch_end() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.on_validation_epoch_end", false]], "optimize_hyperparameters() (in module pytorch_forecasting.models.temporal_fusion_transformer.tuning)": [[187, "pytorch_forecasting.models.temporal_fusion_transformer.tuning.optimize_hyperparameters", false]], "output_to_prediction() (pytorch_forecasting.models.base._base_model.autoregressivebasemodel method)": [[89, "pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModel.output_to_prediction", false]], "outputmixin (class in pytorch_forecasting.utils._utils)": [[255, "pytorch_forecasting.utils._utils.OutputMixIn", false]], "padded_stack() (in module pytorch_forecasting.utils._utils)": [[268, "pytorch_forecasting.utils._utils.padded_stack", false]], "persistent() (pytorch_forecasting.metrics.base_metrics._base_metrics.aggregationmetric method)": [[55, "pytorch_forecasting.metrics.base_metrics._base_metrics.AggregationMetric.persistent", false]], "persistent() (pytorch_forecasting.metrics.base_metrics._base_metrics.compositemetric method)": [[56, "pytorch_forecasting.metrics.base_metrics._base_metrics.CompositeMetric.persistent", false]], "persistent() (pytorch_forecasting.metrics.base_metrics._base_metrics.multiloss method)": [[60, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiLoss.persistent", false]], "persistent() (pytorch_forecasting.metrics.base_metrics._base_metrics.torchmetricwrapper method)": [[62, "pytorch_forecasting.metrics.base_metrics._base_metrics.TorchMetricWrapper.persistent", false]], "pkg (pytorch_forecasting.models.base._base_model.basemodel property)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.pkg", false]], "pkg (pytorch_forecasting.models.base._base_model_v2.basemodel property)": [[99, "pytorch_forecasting.models.base._base_model_v2.BaseModel.pkg", false]], "plot_interpretation() (pytorch_forecasting.models.nbeats._nbeats.nbeats method)": [[128, "pytorch_forecasting.models.nbeats._nbeats.NBeats.plot_interpretation", false]], "plot_interpretation() (pytorch_forecasting.models.nhits._nhits.nhits method)": [[140, "pytorch_forecasting.models.nhits._nhits.NHiTS.plot_interpretation", false]], "plot_interpretation() (pytorch_forecasting.models.temporal_fusion_transformer._tft.temporalfusiontransformer method)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.plot_interpretation", false]], "plot_prediction() (pytorch_forecasting.models.base._base_model.autoregressivebasemodel method)": [[89, "pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModel.plot_prediction", false]], "plot_prediction() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.plot_prediction", false]], "plot_prediction() (pytorch_forecasting.models.temporal_fusion_transformer._tft.temporalfusiontransformer method)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer.plot_prediction", false]], "plot_prediction_actual_by_variable() (pytorch_forecasting.models.base._base_model.basemodelwithcovariates method)": [[92, "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates.plot_prediction_actual_by_variable", false]], "plot_randomization() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.plot_randomization", false]], "poissonloss (class in pytorch_forecasting.metrics.point)": [[80, "pytorch_forecasting.metrics.point.PoissonLoss", false]], "positionalembedding (class in pytorch_forecasting.models.timexer.sub_modules)": [[218, "pytorch_forecasting.models.timexer.sub_modules.PositionalEmbedding", false]], "positionalencoder (class in pytorch_forecasting.models.temporal_fusion_transformer.sub_modules)": [[179, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.PositionalEncoder", false]], "predict() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.predict", false]], "predict() (pytorch_forecasting.models.deepar._deepar.deepar method)": [[111, "pytorch_forecasting.models.deepar._deepar.DeepAR.predict", false]], "predict_dataloader() (pytorch_forecasting.data._tslib_data_module.tslibdatamodule method)": [[4, "pytorch_forecasting.data._tslib_data_module.TslibDataModule.predict_dataloader", false]], "predict_dataloader() (pytorch_forecasting.data.data_module.encoderdecodertimeseriesdatamodule method)": [[7, "pytorch_forecasting.data.data_module.EncoderDecoderTimeSeriesDataModule.predict_dataloader", false]], "predict_dependency() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.predict_dependency", false]], "predict_step() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.predict_step", false]], "predict_step() (pytorch_forecasting.models.base._base_model_v2.basemodel method)": [[99, "pytorch_forecasting.models.base._base_model_v2.BaseModel.predict_step", false]], "predict_step() (pytorch_forecasting.models.base._tslib_base_model_v2.tslibbasemodel method)": [[105, "pytorch_forecasting.models.base._tslib_base_model_v2.TslibBaseModel.predict_step", false]], "predictcallback (class in pytorch_forecasting.models.base._base_model)": [[93, "pytorch_forecasting.models.base._base_model.PredictCallback", false]], "prediction (class in pytorch_forecasting.models.base._base_model)": [[95, "pytorch_forecasting.models.base._base_model.Prediction", false]], "predicttuple (in module pytorch_forecasting.models.base._base_model)": [[94, "pytorch_forecasting.models.base._base_model.PredictTuple", false]], "prepare_data_per_node (pytorch_forecasting.data._tslib_data_module.tslibdatamodule attribute)": [[4, "pytorch_forecasting.data._tslib_data_module.TslibDataModule.prepare_data_per_node", false]], "prepare_data_per_node (pytorch_forecasting.data.data_module.encoderdecodertimeseriesdatamodule attribute)": [[7, "pytorch_forecasting.data.data_module.EncoderDecoderTimeSeriesDataModule.prepare_data_per_node", false]], "prepare_test_inputs() (pytorch_forecasting.metrics.base_metrics._base_object._baseptmetric class method)": [[65, "pytorch_forecasting.metrics.base_metrics._base_object._BasePtMetric.prepare_test_inputs", false]], "preprocess() (pytorch_forecasting.data.encoders.transformmixin method)": [[18, "pytorch_forecasting.data.encoders.TransformMixIn.preprocess", false]], "profile() (in module pytorch_forecasting.utils._utils)": [[269, "pytorch_forecasting.utils._utils.profile", false]], "pytorch_forecasting.data": [[2, "module-pytorch_forecasting.data", false]], "pytorch_forecasting.data._tslib_data_module": [[3, "module-pytorch_forecasting.data._tslib_data_module", false]], "pytorch_forecasting.data.data_module": [[6, "module-pytorch_forecasting.data.data_module", false]], "pytorch_forecasting.data.encoders": [[8, "module-pytorch_forecasting.data.encoders", false]], "pytorch_forecasting.data.examples": [[26, "module-pytorch_forecasting.data.examples", false]], "pytorch_forecasting.data.samplers": [[31, "module-pytorch_forecasting.data.samplers", false]], "pytorch_forecasting.data.tests": [[34, "module-pytorch_forecasting.data.tests", false]], "pytorch_forecasting.data.timeseries": [[35, "module-pytorch_forecasting.data.timeseries", false]], "pytorch_forecasting.data.timeseries._timeseries": [[36, "module-pytorch_forecasting.data.timeseries._timeseries", false]], "pytorch_forecasting.data.timeseries._timeseries_v2": [[40, "module-pytorch_forecasting.data.timeseries._timeseries_v2", false]], "pytorch_forecasting.metrics": [[42, "module-pytorch_forecasting.metrics", false]], "pytorch_forecasting.metrics._distributions_pkg": [[43, "module-pytorch_forecasting.metrics._distributions_pkg", false]], "pytorch_forecasting.metrics._mqf2_utils": [[44, "module-pytorch_forecasting.metrics._mqf2_utils", false]], "pytorch_forecasting.metrics._point_pkg": [[49, "module-pytorch_forecasting.metrics._point_pkg", false]], "pytorch_forecasting.metrics._quantile_pkg": [[50, "module-pytorch_forecasting.metrics._quantile_pkg", false]], "pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg": [[51, "module-pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg", false]], "pytorch_forecasting.metrics.base_metrics": [[53, "module-pytorch_forecasting.metrics.base_metrics", false]], "pytorch_forecasting.metrics.base_metrics._base_metrics": [[54, "module-pytorch_forecasting.metrics.base_metrics._base_metrics", false]], "pytorch_forecasting.metrics.base_metrics._base_object": [[64, "module-pytorch_forecasting.metrics.base_metrics._base_object", false]], "pytorch_forecasting.metrics.distributions": [[66, "module-pytorch_forecasting.metrics.distributions", false]], "pytorch_forecasting.metrics.point": [[75, "module-pytorch_forecasting.metrics.point", false]], "pytorch_forecasting.metrics.quantile": [[84, "module-pytorch_forecasting.metrics.quantile", false]], "pytorch_forecasting.models": [[86, "module-pytorch_forecasting.models", false]], "pytorch_forecasting.models.base": [[87, "module-pytorch_forecasting.models.base", false]], "pytorch_forecasting.models.base._base_model": [[88, "module-pytorch_forecasting.models.base._base_model", false]], "pytorch_forecasting.models.base._base_model_v2": [[98, "module-pytorch_forecasting.models.base._base_model_v2", false]], "pytorch_forecasting.models.base._base_object": [[100, "module-pytorch_forecasting.models.base._base_object", false]], "pytorch_forecasting.models.base._tslib_base_model_v2": [[104, "module-pytorch_forecasting.models.base._tslib_base_model_v2", false]], "pytorch_forecasting.models.base_model": [[106, "module-pytorch_forecasting.models.base_model", false]], "pytorch_forecasting.models.baseline": [[107, "module-pytorch_forecasting.models.baseline", false]], "pytorch_forecasting.models.deepar": [[109, "module-pytorch_forecasting.models.deepar", false]], "pytorch_forecasting.models.deepar._deepar": [[110, "module-pytorch_forecasting.models.deepar._deepar", false]], "pytorch_forecasting.models.deepar._deepar_pkg": [[112, "module-pytorch_forecasting.models.deepar._deepar_pkg", false]], "pytorch_forecasting.models.dlinear": [[114, "module-pytorch_forecasting.models.dlinear", false]], "pytorch_forecasting.models.dlinear._dlinear_pkg_v2": [[115, "module-pytorch_forecasting.models.dlinear._dlinear_pkg_v2", false]], "pytorch_forecasting.models.dlinear._dlinear_v2": [[117, "module-pytorch_forecasting.models.dlinear._dlinear_v2", false]], "pytorch_forecasting.models.mlp": [[119, "module-pytorch_forecasting.models.mlp", false]], "pytorch_forecasting.models.mlp._decodermlp": [[120, "module-pytorch_forecasting.models.mlp._decodermlp", false]], "pytorch_forecasting.models.mlp._decodermlp_pkg": [[122, "module-pytorch_forecasting.models.mlp._decodermlp_pkg", false]], "pytorch_forecasting.models.mlp.submodules": [[124, "module-pytorch_forecasting.models.mlp.submodules", false]], "pytorch_forecasting.models.nbeats": [[126, "module-pytorch_forecasting.models.nbeats", false]], "pytorch_forecasting.models.nbeats._nbeats": [[127, "module-pytorch_forecasting.models.nbeats._nbeats", false]], "pytorch_forecasting.models.nbeats._nbeats_pkg": [[129, "module-pytorch_forecasting.models.nbeats._nbeats_pkg", false]], "pytorch_forecasting.models.nbeats.sub_modules": [[131, "module-pytorch_forecasting.models.nbeats.sub_modules", false]], "pytorch_forecasting.models.nhits": [[138, "module-pytorch_forecasting.models.nhits", false]], "pytorch_forecasting.models.nhits._nhits": [[139, "module-pytorch_forecasting.models.nhits._nhits", false]], "pytorch_forecasting.models.nhits._nhits_pkg": [[141, "module-pytorch_forecasting.models.nhits._nhits_pkg", false]], "pytorch_forecasting.models.nhits.sub_modules": [[143, "module-pytorch_forecasting.models.nhits.sub_modules", false]], "pytorch_forecasting.models.nn": [[150, "module-pytorch_forecasting.models.nn", false]], "pytorch_forecasting.models.nn.embeddings": [[151, "module-pytorch_forecasting.models.nn.embeddings", false]], "pytorch_forecasting.models.nn.rnn": [[154, "module-pytorch_forecasting.models.nn.rnn", false]], "pytorch_forecasting.models.rnn": [[159, "module-pytorch_forecasting.models.rnn", false]], "pytorch_forecasting.models.rnn._rnn": [[160, "module-pytorch_forecasting.models.rnn._rnn", false]], "pytorch_forecasting.models.rnn._rnn_pkg": [[162, "module-pytorch_forecasting.models.rnn._rnn_pkg", false]], "pytorch_forecasting.models.temporal_fusion_transformer": [[164, "module-pytorch_forecasting.models.temporal_fusion_transformer", false]], "pytorch_forecasting.models.temporal_fusion_transformer._tft": [[165, "module-pytorch_forecasting.models.temporal_fusion_transformer._tft", false]], "pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg": [[167, "module-pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg", false]], "pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2": [[169, "module-pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2", false]], "pytorch_forecasting.models.temporal_fusion_transformer._tft_v2": [[171, "module-pytorch_forecasting.models.temporal_fusion_transformer._tft_v2", false]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules": [[173, "module-pytorch_forecasting.models.temporal_fusion_transformer.sub_modules", false]], "pytorch_forecasting.models.temporal_fusion_transformer.tuning": [[185, "module-pytorch_forecasting.models.temporal_fusion_transformer.tuning", false]], "pytorch_forecasting.models.tide": [[188, "module-pytorch_forecasting.models.tide", false]], "pytorch_forecasting.models.tide._tide": [[189, "module-pytorch_forecasting.models.tide._tide", false]], "pytorch_forecasting.models.tide._tide_dsipts": [[191, "module-pytorch_forecasting.models.tide._tide_dsipts", false]], "pytorch_forecasting.models.tide._tide_dsipts._tide_v2": [[192, "module-pytorch_forecasting.models.tide._tide_dsipts._tide_v2", false]], "pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg": [[194, "module-pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg", false]], "pytorch_forecasting.models.tide._tide_pkg": [[196, "module-pytorch_forecasting.models.tide._tide_pkg", false]], "pytorch_forecasting.models.tide.sub_modules": [[198, "module-pytorch_forecasting.models.tide.sub_modules", false]], "pytorch_forecasting.models.timexer": [[201, "module-pytorch_forecasting.models.timexer", false]], "pytorch_forecasting.models.timexer._timexer": [[202, "module-pytorch_forecasting.models.timexer._timexer", false]], "pytorch_forecasting.models.timexer._timexer_pkg": [[204, "module-pytorch_forecasting.models.timexer._timexer_pkg", false]], "pytorch_forecasting.models.timexer._timexer_pkg_v2": [[206, "module-pytorch_forecasting.models.timexer._timexer_pkg_v2", false]], "pytorch_forecasting.models.timexer._timexer_v2": [[208, "module-pytorch_forecasting.models.timexer._timexer_v2", false]], "pytorch_forecasting.models.timexer.sub_modules": [[210, "module-pytorch_forecasting.models.timexer.sub_modules", false]], "pytorch_forecasting.models.xlstm": [[220, "module-pytorch_forecasting.models.xlstm", false]], "pytorch_forecasting.models.xlstm._xlstm": [[221, "module-pytorch_forecasting.models.xlstm._xlstm", false]], "pytorch_forecasting.models.xlstm._xlstm_pkg": [[223, "module-pytorch_forecasting.models.xlstm._xlstm_pkg", false]], "pytorch_forecasting.utils": [[225, "module-pytorch_forecasting.utils", false]], "pytorch_forecasting.utils._classproperty": [[226, "module-pytorch_forecasting.utils._classproperty", false]], "pytorch_forecasting.utils._coerce": [[228, "module-pytorch_forecasting.utils._coerce", false]], "pytorch_forecasting.utils._dependencies": [[231, "module-pytorch_forecasting.utils._dependencies", false]], "pytorch_forecasting.utils._dependencies._dependencies": [[232, "module-pytorch_forecasting.utils._dependencies._dependencies", false]], "pytorch_forecasting.utils._dependencies._safe_import": [[236, "module-pytorch_forecasting.utils._dependencies._safe_import", false]], "pytorch_forecasting.utils._dependencies.tests": [[237, "module-pytorch_forecasting.utils._dependencies.tests", false]], "pytorch_forecasting.utils._dependencies.tests.test_safe_import": [[238, "module-pytorch_forecasting.utils._dependencies.tests.test_safe_import", false]], "pytorch_forecasting.utils._maint": [[248, "module-pytorch_forecasting.utils._maint", false]], "pytorch_forecasting.utils._maint._show_versions": [[249, "module-pytorch_forecasting.utils._maint._show_versions", false]], "pytorch_forecasting.utils._utils": [[253, "module-pytorch_forecasting.utils._utils", false]], "quantile() (pytorch_forecasting.metrics._mqf2_utils.mqf2distribution method)": [[46, "pytorch_forecasting.metrics._mqf2_utils.MQF2Distribution.quantile", false]], "quantileloss (class in pytorch_forecasting.metrics.quantile)": [[85, "pytorch_forecasting.metrics.quantile.QuantileLoss", false]], "quantileloss_pkg (class in pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg)": [[52, "pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg.QuantileLoss_pkg", false]], "reals (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.reals", false]], "reals (pytorch_forecasting.models.base._base_model.basemodelwithcovariates property)": [[92, "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates.reals", false]], "recurrentnetwork (class in pytorch_forecasting.models.rnn._rnn)": [[161, "pytorch_forecasting.models.rnn._rnn.RecurrentNetwork", false]], "recurrentnetwork_pkg (class in pytorch_forecasting.models.rnn._rnn_pkg)": [[163, "pytorch_forecasting.models.rnn._rnn_pkg.RecurrentNetwork_pkg", false]], "reduce_loss() (pytorch_forecasting.metrics.base_metrics._base_metrics.multihorizonmetric method)": [[59, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiHorizonMetric.reduce_loss", false]], "relutransform (class in pytorch_forecasting.data.encoders)": [[15, "pytorch_forecasting.data.encoders.ReLuTransform", false]], "remove_var() (pytorch_forecasting.models.tide._tide_dsipts._tide_v2.tide method)": [[193, "pytorch_forecasting.models.tide._tide_dsipts._tide_v2.TIDE.remove_var", false]], "repeat_interleave() (pytorch_forecasting.models.nn.rnn.gru method)": [[155, "pytorch_forecasting.models.nn.rnn.GRU.repeat_interleave", false]], "repeat_interleave() (pytorch_forecasting.models.nn.rnn.lstm method)": [[156, "pytorch_forecasting.models.nn.rnn.LSTM.repeat_interleave", false]], "repeat_interleave() (pytorch_forecasting.models.nn.rnn.rnn method)": [[157, "pytorch_forecasting.models.nn.rnn.RNN.repeat_interleave", false]], "repr_class() (in module pytorch_forecasting.utils._utils)": [[270, "pytorch_forecasting.utils._utils.repr_class", false]], "resamplenorm (class in pytorch_forecasting.models.temporal_fusion_transformer.sub_modules)": [[180, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.ResampleNorm", false]], "rescale_parameters() (pytorch_forecasting.metrics.base_metrics._base_metrics.metric method)": [[58, "pytorch_forecasting.metrics.base_metrics._base_metrics.Metric.rescale_parameters", false]], "rescale_parameters() (pytorch_forecasting.metrics.distributions.betadistributionloss method)": [[67, "pytorch_forecasting.metrics.distributions.BetaDistributionLoss.rescale_parameters", false]], "rescale_parameters() (pytorch_forecasting.metrics.distributions.implicitquantilenetworkdistributionloss method)": [[69, "pytorch_forecasting.metrics.distributions.ImplicitQuantileNetworkDistributionLoss.rescale_parameters", false]], "rescale_parameters() (pytorch_forecasting.metrics.distributions.lognormaldistributionloss method)": [[70, "pytorch_forecasting.metrics.distributions.LogNormalDistributionLoss.rescale_parameters", false]], "rescale_parameters() (pytorch_forecasting.metrics.distributions.mqf2distributionloss method)": [[71, "pytorch_forecasting.metrics.distributions.MQF2DistributionLoss.rescale_parameters", false]], "rescale_parameters() (pytorch_forecasting.metrics.distributions.multivariatenormaldistributionloss method)": [[72, "pytorch_forecasting.metrics.distributions.MultivariateNormalDistributionLoss.rescale_parameters", false]], "rescale_parameters() (pytorch_forecasting.metrics.distributions.negativebinomialdistributionloss method)": [[73, "pytorch_forecasting.metrics.distributions.NegativeBinomialDistributionLoss.rescale_parameters", false]], "rescale_parameters() (pytorch_forecasting.metrics.distributions.normaldistributionloss method)": [[74, "pytorch_forecasting.metrics.distributions.NormalDistributionLoss.rescale_parameters", false]], "reset() (pytorch_forecasting.metrics.base_metrics._base_metrics.aggregationmetric method)": [[55, "pytorch_forecasting.metrics.base_metrics._base_metrics.AggregationMetric.reset", false]], "reset() (pytorch_forecasting.metrics.base_metrics._base_metrics.compositemetric method)": [[56, "pytorch_forecasting.metrics.base_metrics._base_metrics.CompositeMetric.reset", false]], "reset() (pytorch_forecasting.metrics.base_metrics._base_metrics.multiloss method)": [[60, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiLoss.reset", false]], "reset() (pytorch_forecasting.metrics.base_metrics._base_metrics.torchmetricwrapper method)": [[62, "pytorch_forecasting.metrics.base_metrics._base_metrics.TorchMetricWrapper.reset", false]], "reset_overwrite_values() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.reset_overwrite_values", false]], "rmse (class in pytorch_forecasting.metrics.point)": [[81, "pytorch_forecasting.metrics.point.RMSE", false]], "rnn (class in pytorch_forecasting.models.nn.rnn)": [[157, "pytorch_forecasting.models.nn.rnn.RNN", false]], "rsample() (pytorch_forecasting.metrics._mqf2_utils.mqf2distribution method)": [[46, "pytorch_forecasting.metrics._mqf2_utils.MQF2Distribution.rsample", false]], "sample() (pytorch_forecasting.metrics.base_metrics._base_metrics.distributionloss method)": [[57, "pytorch_forecasting.metrics.base_metrics._base_metrics.DistributionLoss.sample", false]], "sample() (pytorch_forecasting.metrics.base_metrics._base_metrics.multivariatedistributionloss method)": [[61, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultivariateDistributionLoss.sample", false]], "sample() (pytorch_forecasting.metrics.distributions.implicitquantilenetworkdistributionloss method)": [[69, "pytorch_forecasting.metrics.distributions.ImplicitQuantileNetworkDistributionLoss.sample", false]], "save() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.save", false]], "scaleddotproductattention (class in pytorch_forecasting.models.temporal_fusion_transformer.sub_modules)": [[181, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.ScaledDotProductAttention", false]], "sequentialnet (class in pytorch_forecasting.metrics._mqf2_utils)": [[47, "pytorch_forecasting.metrics._mqf2_utils.SequentialNet", false]], "set_fit_request() (pytorch_forecasting.data.encoders.nanlabelencoder method)": [[14, "pytorch_forecasting.data.encoders.NaNLabelEncoder.set_fit_request", false]], "set_overwrite_values() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.set_overwrite_values", false]], "set_transform_request() (pytorch_forecasting.data.encoders.encodernormalizer method)": [[9, "pytorch_forecasting.data.encoders.EncoderNormalizer.set_transform_request", false]], "set_transform_request() (pytorch_forecasting.data.encoders.groupnormalizer method)": [[11, "pytorch_forecasting.data.encoders.GroupNormalizer.set_transform_request", false]], "set_transform_request() (pytorch_forecasting.data.encoders.multinormalizer method)": [[13, "pytorch_forecasting.data.encoders.MultiNormalizer.set_transform_request", false]], "set_transform_request() (pytorch_forecasting.data.encoders.nanlabelencoder method)": [[14, "pytorch_forecasting.data.encoders.NaNLabelEncoder.set_transform_request", false]], "set_transform_request() (pytorch_forecasting.data.encoders.torchnormalizer method)": [[17, "pytorch_forecasting.data.encoders.TorchNormalizer.set_transform_request", false]], "setup() (pytorch_forecasting.data._tslib_data_module.tslibdatamodule method)": [[4, "pytorch_forecasting.data._tslib_data_module.TslibDataModule.setup", false]], "setup() (pytorch_forecasting.data.data_module.encoderdecodertimeseriesdatamodule method)": [[7, "pytorch_forecasting.data.data_module.EncoderDecoderTimeSeriesDataModule.setup", false]], "show_versions() (in module pytorch_forecasting.utils._maint._show_versions)": [[252, "pytorch_forecasting.utils._maint._show_versions.show_versions", false]], "size() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.size", false]], "smape (class in pytorch_forecasting.metrics.point)": [[82, "pytorch_forecasting.metrics.point.SMAPE", false]], "softplus_inv() (in module pytorch_forecasting.data.encoders)": [[25, "pytorch_forecasting.data.encoders.softplus_inv", false]], "softplustransform (class in pytorch_forecasting.data.encoders)": [[16, "pytorch_forecasting.data.encoders.SoftplusTransform", false]], "stack_sliding_view() (pytorch_forecasting.metrics._mqf2_utils.mqf2distribution method)": [[46, "pytorch_forecasting.metrics._mqf2_utils.MQF2Distribution.stack_sliding_view", false]], "static_size (pytorch_forecasting.models.nhits._nhits.nhits property)": [[140, "pytorch_forecasting.models.nhits._nhits.NHiTS.static_size", false]], "static_size (pytorch_forecasting.models.tide._tide.tidemodel property)": [[190, "pytorch_forecasting.models.tide._tide.TiDEModel.static_size", false]], "static_size (pytorch_forecasting.models.timexer._timexer.timexer property)": [[203, "pytorch_forecasting.models.timexer._timexer.TimeXer.static_size", false]], "static_variables (pytorch_forecasting.models.base._base_model.basemodelwithcovariates property)": [[92, "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates.static_variables", false]], "staticfeaturesencoder (class in pytorch_forecasting.models.nhits.sub_modules)": [[148, "pytorch_forecasting.models.nhits.sub_modules.StaticFeaturesEncoder", false]], "step() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.step", false]], "step() (pytorch_forecasting.models.nbeats._nbeats.nbeats method)": [[128, "pytorch_forecasting.models.nbeats._nbeats.NBeats.step", false]], "step() (pytorch_forecasting.models.nhits._nhits.nhits method)": [[140, "pytorch_forecasting.models.nhits._nhits.NHiTS.step", false]], "target_names (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.target_names", false]], "target_names (pytorch_forecasting.models.base._base_model.basemodel property)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.target_names", false]], "target_normalizers (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.target_normalizers", false]], "target_positions (pytorch_forecasting.models.base._base_model.autoregressivebasemodel property)": [[89, "pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModel.target_positions", false]], "target_positions (pytorch_forecasting.models.base._base_model.basemodelwithcovariates property)": [[92, "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates.target_positions", false]], "temporalfusiontransformer (class in pytorch_forecasting.models.temporal_fusion_transformer._tft)": [[166, "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer", false]], "temporalfusiontransformer_pkg (class in pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg)": [[168, "pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg.TemporalFusionTransformer_pkg", false]], "test_dataloader() (pytorch_forecasting.data._tslib_data_module.tslibdatamodule method)": [[4, "pytorch_forecasting.data._tslib_data_module.TslibDataModule.test_dataloader", false]], "test_dataloader() (pytorch_forecasting.data.data_module.encoderdecodertimeseriesdatamodule method)": [[7, "pytorch_forecasting.data.data_module.EncoderDecoderTimeSeriesDataModule.test_dataloader", false]], "test_import_class() (in module pytorch_forecasting.utils._dependencies.tests.test_safe_import)": [[239, "pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_class", false]], "test_import_existing_object() (in module pytorch_forecasting.utils._dependencies.tests.test_safe_import)": [[240, "pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_existing_object", false]], "test_import_missing_module() (in module pytorch_forecasting.utils._dependencies.tests.test_safe_import)": [[241, "pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_missing_module", false]], "test_import_present_module() (in module pytorch_forecasting.utils._dependencies.tests.test_safe_import)": [[242, "pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_present_module", false]], "test_import_submodule() (in module pytorch_forecasting.utils._dependencies.tests.test_safe_import)": [[243, "pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_submodule", false]], "test_import_with_different_pkg_name_1() (in module pytorch_forecasting.utils._dependencies.tests.test_safe_import)": [[244, "pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_with_different_pkg_name_1", false]], "test_import_with_different_pkg_name_2() (in module pytorch_forecasting.utils._dependencies.tests.test_safe_import)": [[245, "pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_with_different_pkg_name_2", false]], "test_import_without_pkg_name() (in module pytorch_forecasting.utils._dependencies.tests.test_safe_import)": [[246, "pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_import_without_pkg_name", false]], "test_multiple_inheritance_from_mock() (in module pytorch_forecasting.utils._dependencies.tests.test_safe_import)": [[247, "pytorch_forecasting.utils._dependencies.tests.test_safe_import.test_multiple_inheritance_from_mock", false]], "test_step() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.test_step", false]], "test_step() (pytorch_forecasting.models.base._base_model_v2.basemodel method)": [[99, "pytorch_forecasting.models.base._base_model_v2.BaseModel.test_step", false]], "tft (class in pytorch_forecasting.models.temporal_fusion_transformer._tft_v2)": [[172, "pytorch_forecasting.models.temporal_fusion_transformer._tft_v2.TFT", false]], "tft_pkg_v2 (class in pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2)": [[170, "pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2.TFT_pkg_v2", false]], "tide (class in pytorch_forecasting.models.tide._tide_dsipts._tide_v2)": [[193, "pytorch_forecasting.models.tide._tide_dsipts._tide_v2.TIDE", false]], "tide_pkg_v2 (class in pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg)": [[195, "pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg.TIDE_pkg_v2", false]], "tidemodel (class in pytorch_forecasting.models.tide._tide)": [[190, "pytorch_forecasting.models.tide._tide.TiDEModel", false]], "tidemodel_pkg (class in pytorch_forecasting.models.tide._tide_pkg)": [[197, "pytorch_forecasting.models.tide._tide_pkg.TiDEModel_pkg", false]], "timedistributed (class in pytorch_forecasting.models.temporal_fusion_transformer.sub_modules)": [[182, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.TimeDistributed", false]], "timedistributedembeddingbag (class in pytorch_forecasting.models.nn.embeddings)": [[153, "pytorch_forecasting.models.nn.embeddings.TimeDistributedEmbeddingBag", false]], "timedistributedinterpolation (class in pytorch_forecasting.models.temporal_fusion_transformer.sub_modules)": [[183, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.TimeDistributedInterpolation", false]], "timeseries (class in pytorch_forecasting.data.timeseries._timeseries_v2)": [[41, "pytorch_forecasting.data.timeseries._timeseries_v2.TimeSeries", false]], "timeseriesdataset (class in pytorch_forecasting.data.timeseries._timeseries)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet", false]], "timesynchronizedbatchsampler (class in pytorch_forecasting.data.samplers)": [[33, "pytorch_forecasting.data.samplers.TimeSynchronizedBatchSampler", false]], "timexer (class in pytorch_forecasting.models.timexer._timexer)": [[203, "pytorch_forecasting.models.timexer._timexer.TimeXer", false]], "timexer (class in pytorch_forecasting.models.timexer._timexer_v2)": [[209, "pytorch_forecasting.models.timexer._timexer_v2.TimeXer", false]], "timexer_pkg (class in pytorch_forecasting.models.timexer._timexer_pkg)": [[205, "pytorch_forecasting.models.timexer._timexer_pkg.TimeXer_pkg", false]], "timexer_pkg_v2 (class in pytorch_forecasting.models.timexer._timexer_pkg_v2)": [[207, "pytorch_forecasting.models.timexer._timexer_pkg_v2.TimeXer_pkg_v2", false]], "to() (pytorch_forecasting.metrics.distributions.mqf2distributionloss method)": [[71, "pytorch_forecasting.metrics.distributions.MQF2DistributionLoss.to", false]], "to_dataloader() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.to_dataloader", false]], "to_list() (in module pytorch_forecasting.utils._utils)": [[271, "pytorch_forecasting.utils._utils.to_list", false]], "to_network_output() (pytorch_forecasting.utils._utils.tupleoutputmixin method)": [[256, "pytorch_forecasting.utils._utils.TupleOutputMixIn.to_network_output", false]], "to_prediction() (pytorch_forecasting.metrics.base_metrics._base_metrics.compositemetric method)": [[56, "pytorch_forecasting.metrics.base_metrics._base_metrics.CompositeMetric.to_prediction", false]], "to_prediction() (pytorch_forecasting.metrics.base_metrics._base_metrics.distributionloss method)": [[57, "pytorch_forecasting.metrics.base_metrics._base_metrics.DistributionLoss.to_prediction", false]], "to_prediction() (pytorch_forecasting.metrics.base_metrics._base_metrics.metric method)": [[58, "pytorch_forecasting.metrics.base_metrics._base_metrics.Metric.to_prediction", false]], "to_prediction() (pytorch_forecasting.metrics.base_metrics._base_metrics.multiloss method)": [[60, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiLoss.to_prediction", false]], "to_prediction() (pytorch_forecasting.metrics.distributions.implicitquantilenetworkdistributionloss method)": [[69, "pytorch_forecasting.metrics.distributions.ImplicitQuantileNetworkDistributionLoss.to_prediction", false]], "to_prediction() (pytorch_forecasting.metrics.distributions.negativebinomialdistributionloss method)": [[73, "pytorch_forecasting.metrics.distributions.NegativeBinomialDistributionLoss.to_prediction", false]], "to_prediction() (pytorch_forecasting.metrics.point.crossentropy method)": [[76, "pytorch_forecasting.metrics.point.CrossEntropy.to_prediction", false]], "to_prediction() (pytorch_forecasting.metrics.point.poissonloss method)": [[80, "pytorch_forecasting.metrics.point.PoissonLoss.to_prediction", false]], "to_prediction() (pytorch_forecasting.metrics.point.tweedieloss method)": [[83, "pytorch_forecasting.metrics.point.TweedieLoss.to_prediction", false]], "to_prediction() (pytorch_forecasting.metrics.quantile.quantileloss method)": [[85, "pytorch_forecasting.metrics.quantile.QuantileLoss.to_prediction", false]], "to_prediction() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.to_prediction", false]], "to_prediction() (pytorch_forecasting.models.baseline.baseline method)": [[108, "pytorch_forecasting.models.baseline.Baseline.to_prediction", false]], "to_quantiles() (pytorch_forecasting.metrics.base_metrics._base_metrics.compositemetric method)": [[56, "pytorch_forecasting.metrics.base_metrics._base_metrics.CompositeMetric.to_quantiles", false]], "to_quantiles() (pytorch_forecasting.metrics.base_metrics._base_metrics.distributionloss method)": [[57, "pytorch_forecasting.metrics.base_metrics._base_metrics.DistributionLoss.to_quantiles", false]], "to_quantiles() (pytorch_forecasting.metrics.base_metrics._base_metrics.metric method)": [[58, "pytorch_forecasting.metrics.base_metrics._base_metrics.Metric.to_quantiles", false]], "to_quantiles() (pytorch_forecasting.metrics.base_metrics._base_metrics.multiloss method)": [[60, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiLoss.to_quantiles", false]], "to_quantiles() (pytorch_forecasting.metrics.distributions.implicitquantilenetworkdistributionloss method)": [[69, "pytorch_forecasting.metrics.distributions.ImplicitQuantileNetworkDistributionLoss.to_quantiles", false]], "to_quantiles() (pytorch_forecasting.metrics.distributions.mqf2distributionloss method)": [[71, "pytorch_forecasting.metrics.distributions.MQF2DistributionLoss.to_quantiles", false]], "to_quantiles() (pytorch_forecasting.metrics.point.crossentropy method)": [[76, "pytorch_forecasting.metrics.point.CrossEntropy.to_quantiles", false]], "to_quantiles() (pytorch_forecasting.metrics.point.poissonloss method)": [[80, "pytorch_forecasting.metrics.point.PoissonLoss.to_quantiles", false]], "to_quantiles() (pytorch_forecasting.metrics.quantile.quantileloss method)": [[85, "pytorch_forecasting.metrics.quantile.QuantileLoss.to_quantiles", false]], "to_quantiles() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.to_quantiles", false]], "to_quantiles() (pytorch_forecasting.models.baseline.baseline method)": [[108, "pytorch_forecasting.models.baseline.Baseline.to_quantiles", false]], "torchmetricwrapper (class in pytorch_forecasting.metrics.base_metrics._base_metrics)": [[62, "pytorch_forecasting.metrics.base_metrics._base_metrics.TorchMetricWrapper", false]], "torchnormalizer (class in pytorch_forecasting.data.encoders)": [[17, "pytorch_forecasting.data.encoders.TorchNormalizer", false]], "train_dataloader() (pytorch_forecasting.data._tslib_data_module.tslibdatamodule method)": [[4, "pytorch_forecasting.data._tslib_data_module.TslibDataModule.train_dataloader", false]], "train_dataloader() (pytorch_forecasting.data.data_module.encoderdecodertimeseriesdatamodule method)": [[7, "pytorch_forecasting.data.data_module.EncoderDecoderTimeSeriesDataModule.train_dataloader", false]], "training_step() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.training_step", false]], "training_step() (pytorch_forecasting.models.base._base_model_v2.basemodel method)": [[99, "pytorch_forecasting.models.base._base_model_v2.BaseModel.training_step", false]], "transform() (pytorch_forecasting.data.encoders.groupnormalizer method)": [[11, "pytorch_forecasting.data.encoders.GroupNormalizer.transform", false]], "transform() (pytorch_forecasting.data.encoders.multinormalizer method)": [[13, "pytorch_forecasting.data.encoders.MultiNormalizer.transform", false]], "transform() (pytorch_forecasting.data.encoders.nanlabelencoder method)": [[14, "pytorch_forecasting.data.encoders.NaNLabelEncoder.transform", false]], "transform() (pytorch_forecasting.data.encoders.torchnormalizer method)": [[17, "pytorch_forecasting.data.encoders.TorchNormalizer.transform", false]], "transform_output() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.transform_output", false]], "transform_output() (pytorch_forecasting.models.base._tslib_base_model_v2.tslibbasemodel method)": [[105, "pytorch_forecasting.models.base._tslib_base_model_v2.TslibBaseModel.transform_output", false]], "transform_values() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.transform_values", false]], "transformedmqf2distribution (class in pytorch_forecasting.metrics._mqf2_utils)": [[48, "pytorch_forecasting.metrics._mqf2_utils.TransformedMQF2Distribution", false]], "transformmixin (class in pytorch_forecasting.data.encoders)": [[18, "pytorch_forecasting.data.encoders.TransformMixIn", false]], "triangularcausalmask (class in pytorch_forecasting.models.timexer.sub_modules)": [[219, "pytorch_forecasting.models.timexer.sub_modules.TriangularCausalMask", false]], "tslibbasemodel (class in pytorch_forecasting.models.base._tslib_base_model_v2)": [[105, "pytorch_forecasting.models.base._tslib_base_model_v2.TslibBaseModel", false]], "tslibdatamodule (class in pytorch_forecasting.data._tslib_data_module)": [[4, "pytorch_forecasting.data._tslib_data_module.TslibDataModule", false]], "tupleoutputmixin (class in pytorch_forecasting.utils._utils)": [[256, "pytorch_forecasting.utils._utils.TupleOutputMixIn", false]], "tweedieloss (class in pytorch_forecasting.metrics.point)": [[83, "pytorch_forecasting.metrics.point.TweedieLoss", false]], "unpack_sequence() (in module pytorch_forecasting.utils._utils)": [[272, "pytorch_forecasting.utils._utils.unpack_sequence", false]], "unsqueeze_like() (in module pytorch_forecasting.utils._utils)": [[273, "pytorch_forecasting.utils._utils.unsqueeze_like", false]], "update() (pytorch_forecasting.metrics.base_metrics._base_metrics.aggregationmetric method)": [[55, "pytorch_forecasting.metrics.base_metrics._base_metrics.AggregationMetric.update", false]], "update() (pytorch_forecasting.metrics.base_metrics._base_metrics.compositemetric method)": [[56, "pytorch_forecasting.metrics.base_metrics._base_metrics.CompositeMetric.update", false]], "update() (pytorch_forecasting.metrics.base_metrics._base_metrics.metric method)": [[58, "pytorch_forecasting.metrics.base_metrics._base_metrics.Metric.update", false]], "update() (pytorch_forecasting.metrics.base_metrics._base_metrics.multihorizonmetric method)": [[59, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiHorizonMetric.update", false]], "update() (pytorch_forecasting.metrics.base_metrics._base_metrics.multiloss method)": [[60, "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiLoss.update", false]], "update() (pytorch_forecasting.metrics.base_metrics._base_metrics.torchmetricwrapper method)": [[62, "pytorch_forecasting.metrics.base_metrics._base_metrics.TorchMetricWrapper.update", false]], "update() (pytorch_forecasting.metrics.point.mase method)": [[79, "pytorch_forecasting.metrics.point.MASE.update", false]], "val_dataloader() (pytorch_forecasting.data._tslib_data_module.tslibdatamodule method)": [[4, "pytorch_forecasting.data._tslib_data_module.TslibDataModule.val_dataloader", false]], "val_dataloader() (pytorch_forecasting.data.data_module.encoderdecodertimeseriesdatamodule method)": [[7, "pytorch_forecasting.data.data_module.EncoderDecoderTimeSeriesDataModule.val_dataloader", false]], "validation_step() (pytorch_forecasting.models.base._base_model.basemodel method)": [[91, "pytorch_forecasting.models.base._base_model.BaseModel.validation_step", false]], "validation_step() (pytorch_forecasting.models.base._base_model_v2.basemodel method)": [[99, "pytorch_forecasting.models.base._base_model_v2.BaseModel.validation_step", false]], "variable_to_group_mapping (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset property)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.variable_to_group_mapping", false]], "variableselectionnetwork (class in pytorch_forecasting.models.temporal_fusion_transformer.sub_modules)": [[184, "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.VariableSelectionNetwork", false]], "write_on_batch_end() (pytorch_forecasting.models.base._base_model.predictcallback method)": [[93, "pytorch_forecasting.models.base._base_model.PredictCallback.write_on_batch_end", false]], "write_on_epoch_end() (pytorch_forecasting.models.base._base_model.predictcallback method)": [[93, "pytorch_forecasting.models.base._base_model.PredictCallback.write_on_epoch_end", false]], "x_to_index() (pytorch_forecasting.data.timeseries._timeseries.timeseriesdataset method)": [[37, "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet.x_to_index", false]], "xlstmtime (class in pytorch_forecasting.models.xlstm._xlstm)": [[222, "pytorch_forecasting.models.xlstm._xlstm.xLSTMTime", false]], "xlstmtime_pkg (class in pytorch_forecasting.models.xlstm._xlstm_pkg)": [[224, "pytorch_forecasting.models.xlstm._xlstm_pkg.xLSTMTime_pkg", false]]}, "objects": {"pytorch_forecasting": [[2, 0, 0, "-", "data"], [42, 0, 0, "-", "metrics"], [86, 0, 0, "-", "models"], [225, 0, 0, "-", "utils"]], "pytorch_forecasting.data": [[3, 0, 0, "-", "_tslib_data_module"], [6, 0, 0, "-", "data_module"], [8, 0, 0, "-", "encoders"], [26, 0, 0, "-", "examples"], [31, 0, 0, "-", "samplers"], [34, 0, 0, "-", "tests"], [35, 0, 0, "-", "timeseries"]], "pytorch_forecasting.data._tslib_data_module": [[4, 1, 1, "", "TslibDataModule"], [5, 1, 1, "", "_TslibDataset"]], "pytorch_forecasting.data._tslib_data_module.TslibDataModule": [[4, 2, 1, "", "allow_zero_length_dataloader_with_multiple_devices"], [4, 3, 1, "", "collate_fn"], [4, 4, 1, "", "metadata"], [4, 3, 1, "", "predict_dataloader"], [4, 2, 1, "", "prepare_data_per_node"], [4, 3, 1, "", "setup"], [4, 3, 1, "", "test_dataloader"], [4, 3, 1, "", "train_dataloader"], [4, 3, 1, "", "val_dataloader"]], "pytorch_forecasting.data.data_module": [[7, 1, 1, "", "EncoderDecoderTimeSeriesDataModule"]], "pytorch_forecasting.data.data_module.EncoderDecoderTimeSeriesDataModule": [[7, 2, 1, "", "allow_zero_length_dataloader_with_multiple_devices"], [7, 4, 1, "", "metadata"], [7, 3, 1, "", "predict_dataloader"], [7, 2, 1, "", "prepare_data_per_node"], [7, 3, 1, "", "setup"], [7, 3, 1, "", "test_dataloader"], [7, 3, 1, "", "train_dataloader"], [7, 3, 1, "", "val_dataloader"]], "pytorch_forecasting.data.encoders": [[9, 1, 1, "", "EncoderNormalizer"], [10, 1, 1, "", "Expm1Transform"], [11, 1, 1, "", "GroupNormalizer"], [12, 1, 1, "", "MinusOneTransform"], [13, 1, 1, "", "MultiNormalizer"], [14, 1, 1, "", "NaNLabelEncoder"], [15, 1, 1, "", "ReLuTransform"], [16, 1, 1, "", "SoftplusTransform"], [17, 1, 1, "", "TorchNormalizer"], [18, 1, 1, "", "TransformMixIn"], [19, 5, 1, "", "_clipped_log"], [20, 5, 1, "", "_clipped_logit"], [21, 5, 1, "", "_identity"], [22, 5, 1, "", "_minus_one"], [23, 5, 1, "", "_plus_one"], [24, 5, 1, "", "_square"], [25, 5, 1, "", "softplus_inv"]], "pytorch_forecasting.data.encoders.EncoderNormalizer": [[9, 3, 1, "", "fit"], [9, 3, 1, "", "set_transform_request"]], "pytorch_forecasting.data.encoders.GroupNormalizer": [[11, 3, 1, "", "fit"], [11, 3, 1, "", "fit_transform"], [11, 3, 1, "", "get_norm"], [11, 3, 1, "", "get_parameters"], [11, 3, 1, "", "inverse_transform"], [11, 4, 1, "", "names"], [11, 3, 1, "", "set_transform_request"], [11, 3, 1, "", "transform"]], "pytorch_forecasting.data.encoders.MinusOneTransform": [[12, 3, 1, "", "log_abs_det_jacobian"]], "pytorch_forecasting.data.encoders.MultiNormalizer": [[13, 3, 1, "", "fit"], [13, 3, 1, "", "get_parameters"], [13, 3, 1, "", "set_transform_request"], [13, 3, 1, "", "transform"]], "pytorch_forecasting.data.encoders.NaNLabelEncoder": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "fit_transform"], [14, 3, 1, "", "get_parameters"], [14, 3, 1, "", "inverse_transform"], [14, 3, 1, "", "is_numeric"], [14, 3, 1, "", "set_fit_request"], [14, 3, 1, "", "set_transform_request"], [14, 3, 1, "", "transform"]], "pytorch_forecasting.data.encoders.ReLuTransform": [[15, 3, 1, "", "log_abs_det_jacobian"]], "pytorch_forecasting.data.encoders.SoftplusTransform": [[16, 3, 1, "", "log_abs_det_jacobian"]], "pytorch_forecasting.data.encoders.TorchNormalizer": [[17, 3, 1, "", "fit"], [17, 3, 1, "", "get_parameters"], [17, 3, 1, "", "inverse_transform"], [17, 3, 1, "", "set_transform_request"], [17, 3, 1, "", "transform"]], "pytorch_forecasting.data.encoders.TransformMixIn": [[18, 3, 1, "", "get_transform"], [18, 3, 1, "", "inverse_preprocess"], [18, 3, 1, "", "preprocess"]], "pytorch_forecasting.data.examples": [[27, 5, 1, "", "_get_data_by_filename"], [28, 5, 1, "", "generate_ar_data"], [29, 5, 1, "", "get_stallion_data"], [30, 5, 1, "", "load_toydata"]], "pytorch_forecasting.data.samplers": [[32, 1, 1, "", "GroupedSampler"], [33, 1, 1, "", "TimeSynchronizedBatchSampler"]], "pytorch_forecasting.data.samplers.GroupedSampler": [[32, 3, 1, "", "construct_batch_groups"], [32, 3, 1, "", "get_groups"]], "pytorch_forecasting.data.samplers.TimeSynchronizedBatchSampler": [[33, 3, 1, "", "get_groups"]], "pytorch_forecasting.data.timeseries": [[36, 0, 0, "-", "_timeseries"], [40, 0, 0, "-", "_timeseries_v2"]], "pytorch_forecasting.data.timeseries._timeseries": [[37, 1, 1, "", "TimeSeriesDataSet"], [38, 5, 1, "", "_find_end_indices"], [39, 5, 1, "", "check_for_nonfinite"]], "pytorch_forecasting.data.timeseries._timeseries.TimeSeriesDataSet": [[37, 3, 1, "", "calculate_decoder_length"], [37, 4, 1, "", "categoricals"], [37, 4, 1, "", "decoded_index"], [37, 4, 1, "", "dropout_categoricals"], [37, 3, 1, "", "filter"], [37, 4, 1, "", "flat_categoricals"], [37, 3, 1, "", "from_dataset"], [37, 3, 1, "", "from_parameters"], [37, 3, 1, "", "get_parameters"], [37, 3, 1, "", "get_transformer"], [37, 4, 1, "", "lagged_targets"], [37, 4, 1, "", "lagged_variables"], [37, 3, 1, "", "load"], [37, 4, 1, "", "max_lag"], [37, 4, 1, "", "min_lag"], [37, 4, 1, "", "multi_target"], [37, 3, 1, "", "plot_randomization"], [37, 4, 1, "", "reals"], [37, 3, 1, "", "reset_overwrite_values"], [37, 3, 1, "", "save"], [37, 3, 1, "", "set_overwrite_values"], [37, 4, 1, "", "target_names"], [37, 4, 1, "", "target_normalizers"], [37, 3, 1, "", "to_dataloader"], [37, 3, 1, "", "transform_values"], [37, 4, 1, "", "variable_to_group_mapping"], [37, 3, 1, "", "x_to_index"]], "pytorch_forecasting.data.timeseries._timeseries_v2": [[41, 1, 1, "", "TimeSeries"]], "pytorch_forecasting.data.timeseries._timeseries_v2.TimeSeries": [[41, 3, 1, "", "get_metadata"]], "pytorch_forecasting.metrics": [[43, 0, 0, "-", "_distributions_pkg"], [44, 0, 0, "-", "_mqf2_utils"], [49, 0, 0, "-", "_point_pkg"], [50, 0, 0, "-", "_quantile_pkg"], [53, 0, 0, "-", "base_metrics"], [66, 0, 0, "-", "distributions"], [75, 0, 0, "-", "point"], [84, 0, 0, "-", "quantile"]], "pytorch_forecasting.metrics._mqf2_utils": [[45, 1, 1, "", "DeepConvexNet"], [46, 1, 1, "", "MQF2Distribution"], [47, 1, 1, "", "SequentialNet"], [48, 1, 1, "", "TransformedMQF2Distribution"]], "pytorch_forecasting.metrics._mqf2_utils.MQF2Distribution": [[46, 4, 1, "", "batch_shape"], [46, 3, 1, "", "energy_score"], [46, 4, 1, "", "event_shape"], [46, 3, 1, "", "log_prob"], [46, 3, 1, "", "quantile"], [46, 3, 1, "", "rsample"], [46, 3, 1, "", "stack_sliding_view"]], "pytorch_forecasting.metrics._mqf2_utils.SequentialNet": [[47, 3, 1, "", "energy_score"], [47, 3, 1, "", "es_sample"], [47, 3, 1, "", "forward"]], "pytorch_forecasting.metrics._mqf2_utils.TransformedMQF2Distribution": [[48, 3, 1, "", "log_prob"]], "pytorch_forecasting.metrics._quantile_pkg": [[51, 0, 0, "-", "_quantile_loss_pkg"]], "pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg": [[52, 1, 1, "", "QuantileLoss_pkg"]], "pytorch_forecasting.metrics._quantile_pkg._quantile_loss_pkg.QuantileLoss_pkg": [[52, 3, 1, "", "get_cls"], [52, 3, 1, "", "get_metric_test_params"]], "pytorch_forecasting.metrics.base_metrics": [[54, 0, 0, "-", "_base_metrics"], [64, 0, 0, "-", "_base_object"]], "pytorch_forecasting.metrics.base_metrics._base_metrics": [[55, 1, 1, "", "AggregationMetric"], [56, 1, 1, "", "CompositeMetric"], [57, 1, 1, "", "DistributionLoss"], [58, 1, 1, "", "Metric"], [59, 1, 1, "", "MultiHorizonMetric"], [60, 1, 1, "", "MultiLoss"], [61, 1, 1, "", "MultivariateDistributionLoss"], [62, 1, 1, "", "TorchMetricWrapper"], [63, 5, 1, "", "convert_torchmetric_to_pytorch_forecasting_metric"]], "pytorch_forecasting.metrics.base_metrics._base_metrics.AggregationMetric": [[55, 3, 1, "", "compute"], [55, 3, 1, "", "forward"], [55, 3, 1, "", "persistent"], [55, 3, 1, "", "reset"], [55, 3, 1, "", "update"]], "pytorch_forecasting.metrics.base_metrics._base_metrics.CompositeMetric": [[56, 3, 1, "", "compute"], [56, 3, 1, "", "forward"], [56, 3, 1, "", "persistent"], [56, 3, 1, "", "reset"], [56, 3, 1, "", "to_prediction"], [56, 3, 1, "", "to_quantiles"], [56, 3, 1, "", "update"]], "pytorch_forecasting.metrics.base_metrics._base_metrics.DistributionLoss": [[57, 2, 1, "", "distribution_arguments"], [57, 2, 1, "", "distribution_class"], [57, 3, 1, "", "loss"], [57, 3, 1, "", "map_x_to_distribution"], [57, 3, 1, "", "sample"], [57, 3, 1, "", "to_prediction"], [57, 3, 1, "", "to_quantiles"]], "pytorch_forecasting.metrics.base_metrics._base_metrics.Metric": [[58, 3, 1, "", "compute"], [58, 3, 1, "", "extra_repr"], [58, 3, 1, "", "rescale_parameters"], [58, 3, 1, "", "to_prediction"], [58, 3, 1, "", "to_quantiles"], [58, 3, 1, "", "update"]], "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiHorizonMetric": [[59, 3, 1, "", "compute"], [59, 3, 1, "", "loss"], [59, 3, 1, "", "mask_losses"], [59, 3, 1, "", "reduce_loss"], [59, 3, 1, "", "update"]], "pytorch_forecasting.metrics.base_metrics._base_metrics.MultiLoss": [[60, 3, 1, "", "compute"], [60, 3, 1, "", "forward"], [60, 3, 1, "", "persistent"], [60, 3, 1, "", "reset"], [60, 3, 1, "", "to_prediction"], [60, 3, 1, "", "to_quantiles"], [60, 3, 1, "", "update"]], "pytorch_forecasting.metrics.base_metrics._base_metrics.MultivariateDistributionLoss": [[61, 3, 1, "", "loss"], [61, 3, 1, "", "sample"]], "pytorch_forecasting.metrics.base_metrics._base_metrics.TorchMetricWrapper": [[62, 3, 1, "", "compute"], [62, 3, 1, "", "forward"], [62, 3, 1, "", "persistent"], [62, 3, 1, "", "reset"], [62, 3, 1, "", "update"]], "pytorch_forecasting.metrics.base_metrics._base_object": [[65, 1, 1, "", "_BasePtMetric"]], "pytorch_forecasting.metrics.base_metrics._base_object._BasePtMetric": [[65, 3, 1, "", "get_cls"], [65, 3, 1, "", "get_encoder"], [65, 3, 1, "", "get_metric_test_params"], [65, 3, 1, "", "name"], [65, 3, 1, "", "prepare_test_inputs"]], "pytorch_forecasting.metrics.distributions": [[67, 1, 1, "", "BetaDistributionLoss"], [68, 1, 1, "", "ImplicitQuantileNetwork"], [69, 1, 1, "", "ImplicitQuantileNetworkDistributionLoss"], [70, 1, 1, "", "LogNormalDistributionLoss"], [71, 1, 1, "", "MQF2DistributionLoss"], [72, 1, 1, "", "MultivariateNormalDistributionLoss"], [73, 1, 1, "", "NegativeBinomialDistributionLoss"], [74, 1, 1, "", "NormalDistributionLoss"]], "pytorch_forecasting.metrics.distributions.BetaDistributionLoss": [[67, 2, 1, "", "distribution_class"], [67, 3, 1, "", "loss"], [67, 3, 1, "", "map_x_to_distribution"], [67, 3, 1, "", "rescale_parameters"]], "pytorch_forecasting.metrics.distributions.ImplicitQuantileNetwork": [[68, 3, 1, "", "forward"]], "pytorch_forecasting.metrics.distributions.ImplicitQuantileNetworkDistributionLoss": [[69, 3, 1, "", "loss"], [69, 3, 1, "", "rescale_parameters"], [69, 3, 1, "", "sample"], [69, 3, 1, "", "to_prediction"], [69, 3, 1, "", "to_quantiles"]], "pytorch_forecasting.metrics.distributions.LogNormalDistributionLoss": [[70, 2, 1, "", "distribution_class"], [70, 3, 1, "", "map_x_to_distribution"], [70, 3, 1, "", "rescale_parameters"]], "pytorch_forecasting.metrics.distributions.MQF2DistributionLoss": [[71, 3, 1, "", "loss"], [71, 3, 1, "", "map_x_to_distribution"], [71, 3, 1, "", "rescale_parameters"], [71, 3, 1, "", "to"], [71, 3, 1, "", "to_quantiles"]], "pytorch_forecasting.metrics.distributions.MultivariateNormalDistributionLoss": [[72, 2, 1, "", "distribution_class"], [72, 3, 1, "", "map_x_to_distribution"], [72, 3, 1, "", "rescale_parameters"]], "pytorch_forecasting.metrics.distributions.NegativeBinomialDistributionLoss": [[73, 2, 1, "", "distribution_class"], [73, 3, 1, "", "map_x_to_distribution"], [73, 3, 1, "", "rescale_parameters"], [73, 3, 1, "", "to_prediction"]], "pytorch_forecasting.metrics.distributions.NormalDistributionLoss": [[74, 2, 1, "", "distribution_class"], [74, 3, 1, "", "map_x_to_distribution"], [74, 3, 1, "", "rescale_parameters"]], "pytorch_forecasting.metrics.point": [[76, 1, 1, "", "CrossEntropy"], [77, 1, 1, "", "MAE"], [78, 1, 1, "", "MAPE"], [79, 1, 1, "", "MASE"], [80, 1, 1, "", "PoissonLoss"], [81, 1, 1, "", "RMSE"], [82, 1, 1, "", "SMAPE"], [83, 1, 1, "", "TweedieLoss"]], "pytorch_forecasting.metrics.point.CrossEntropy": [[76, 3, 1, "", "loss"], [76, 3, 1, "", "to_prediction"], [76, 3, 1, "", "to_quantiles"]], "pytorch_forecasting.metrics.point.MAE": [[77, 3, 1, "", "loss"]], "pytorch_forecasting.metrics.point.MAPE": [[78, 3, 1, "", "loss"]], "pytorch_forecasting.metrics.point.MASE": [[79, 3, 1, "", "loss"], [79, 3, 1, "", "update"]], "pytorch_forecasting.metrics.point.PoissonLoss": [[80, 3, 1, "", "loss"], [80, 3, 1, "", "to_prediction"], [80, 3, 1, "", "to_quantiles"]], "pytorch_forecasting.metrics.point.RMSE": [[81, 3, 1, "", "loss"]], "pytorch_forecasting.metrics.point.SMAPE": [[82, 3, 1, "", "loss"]], "pytorch_forecasting.metrics.point.TweedieLoss": [[83, 3, 1, "", "loss"], [83, 3, 1, "", "to_prediction"]], "pytorch_forecasting.metrics.quantile": [[85, 1, 1, "", "QuantileLoss"]], "pytorch_forecasting.metrics.quantile.QuantileLoss": [[85, 3, 1, "", "loss"], [85, 3, 1, "", "to_prediction"], [85, 3, 1, "", "to_quantiles"]], "pytorch_forecasting.models": [[87, 0, 0, "-", "base"], [106, 0, 0, "-", "base_model"], [107, 0, 0, "-", "baseline"], [109, 0, 0, "-", "deepar"], [114, 0, 0, "-", "dlinear"], [119, 0, 0, "-", "mlp"], [126, 0, 0, "-", "nbeats"], [138, 0, 0, "-", "nhits"], [150, 0, 0, "-", "nn"], [159, 0, 0, "-", "rnn"], [164, 0, 0, "-", "temporal_fusion_transformer"], [188, 0, 0, "-", "tide"], [201, 0, 0, "-", "timexer"], [220, 0, 0, "-", "xlstm"]], "pytorch_forecasting.models.base": [[88, 0, 0, "-", "_base_model"], [98, 0, 0, "-", "_base_model_v2"], [100, 0, 0, "-", "_base_object"], [104, 0, 0, "-", "_tslib_base_model_v2"]], "pytorch_forecasting.models.base._base_model": [[89, 1, 1, "", "AutoRegressiveBaseModel"], [90, 1, 1, "", "AutoRegressiveBaseModelWithCovariates"], [91, 1, 1, "", "BaseModel"], [92, 1, 1, "", "BaseModelWithCovariates"], [93, 1, 1, "", "PredictCallback"], [94, 2, 1, "", "PredictTuple"], [95, 1, 1, "", "Prediction"], [96, 5, 1, "", "_concatenate_output"], [97, 5, 1, "", "_torch_cat_na"]], "pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModel": [[89, 3, 1, "", "decode_autoregressive"], [89, 3, 1, "", "from_dataset"], [89, 4, 1, "", "lagged_target_positions"], [89, 3, 1, "", "output_to_prediction"], [89, 3, 1, "", "plot_prediction"], [89, 4, 1, "", "target_positions"]], "pytorch_forecasting.models.base._base_model.AutoRegressiveBaseModelWithCovariates": [[90, 4, 1, "", "lagged_target_positions"]], "pytorch_forecasting.models.base._base_model.BaseModel": [[91, 3, 1, "", "configure_optimizers"], [91, 3, 1, "", "create_log"], [91, 4, 1, "", "current_stage"], [91, 3, 1, "", "deduce_default_output_parameters"], [91, 3, 1, "", "forward"], [91, 3, 1, "", "from_dataset"], [91, 3, 1, "", "log"], [91, 3, 1, "", "log_gradient_flow"], [91, 4, 1, "", "log_interval"], [91, 3, 1, "", "log_metrics"], [91, 3, 1, "", "log_prediction"], [91, 4, 1, "", "n_targets"], [91, 3, 1, "", "on_after_backward"], [91, 3, 1, "", "on_epoch_end"], [91, 3, 1, "", "on_load_checkpoint"], [91, 3, 1, "", "on_save_checkpoint"], [91, 3, 1, "", "on_test_epoch_end"], [91, 3, 1, "", "on_train_epoch_end"], [91, 3, 1, "", "on_validation_epoch_end"], [91, 4, 1, "", "pkg"], [91, 3, 1, "", "plot_prediction"], [91, 3, 1, "", "predict"], [91, 3, 1, "", "predict_dependency"], [91, 3, 1, "", "predict_step"], [91, 3, 1, "", "size"], [91, 3, 1, "", "step"], [91, 4, 1, "", "target_names"], [91, 3, 1, "", "test_step"], [91, 3, 1, "", "to_prediction"], [91, 3, 1, "", "to_quantiles"], [91, 3, 1, "", "training_step"], [91, 3, 1, "", "transform_output"], [91, 3, 1, "", "validation_step"]], "pytorch_forecasting.models.base._base_model.BaseModelWithCovariates": [[92, 3, 1, "", "calculate_prediction_actual_by_variable"], [92, 4, 1, "", "categorical_groups_mapping"], [92, 4, 1, "", "categoricals"], [92, 4, 1, "", "decoder_variables"], [92, 4, 1, "", "encoder_variables"], [92, 3, 1, "", "extract_features"], [92, 3, 1, "", "from_dataset"], [92, 3, 1, "", "plot_prediction_actual_by_variable"], [92, 4, 1, "", "reals"], [92, 4, 1, "", "static_variables"], [92, 4, 1, "", "target_positions"]], "pytorch_forecasting.models.base._base_model.PredictCallback": [[93, 3, 1, "", "on_predict_batch_end"], [93, 3, 1, "", "on_predict_epoch_end"], [93, 3, 1, "", "write_on_batch_end"], [93, 3, 1, "", "write_on_epoch_end"]], "pytorch_forecasting.models.base._base_model_v2": [[99, 1, 1, "", "BaseModel"]], "pytorch_forecasting.models.base._base_model_v2.BaseModel": [[99, 3, 1, "", "configure_optimizers"], [99, 3, 1, "", "forward"], [99, 3, 1, "", "log_metrics"], [99, 4, 1, "", "pkg"], [99, 3, 1, "", "predict_step"], [99, 3, 1, "", "test_step"], [99, 3, 1, "", "training_step"], [99, 3, 1, "", "validation_step"]], "pytorch_forecasting.models.base._base_object": [[101, 1, 1, "", "_BasePtForecaster"], [102, 1, 1, "", "_BasePtForecasterV2"], [103, 1, 1, "", "_BasePtForecaster_Common"]], "pytorch_forecasting.models.base._base_object._BasePtForecaster_Common": [[103, 3, 1, "", "create_test_instance"], [103, 3, 1, "", "create_test_instances_and_names"], [103, 3, 1, "", "get_cls"], [103, 3, 1, "", "name"]], "pytorch_forecasting.models.base._tslib_base_model_v2": [[105, 1, 1, "", "TslibBaseModel"]], "pytorch_forecasting.models.base._tslib_base_model_v2.TslibBaseModel": [[105, 3, 1, "", "forward"], [105, 3, 1, "", "predict_step"], [105, 3, 1, "", "transform_output"]], "pytorch_forecasting.models.baseline": [[108, 1, 1, "", "Baseline"]], "pytorch_forecasting.models.baseline.Baseline": [[108, 3, 1, "", "forward"], [108, 3, 1, "", "to_prediction"], [108, 3, 1, "", "to_quantiles"]], "pytorch_forecasting.models.deepar": [[110, 0, 0, "-", "_deepar"], [112, 0, 0, "-", "_deepar_pkg"]], "pytorch_forecasting.models.deepar._deepar": [[111, 1, 1, "", "DeepAR"]], "pytorch_forecasting.models.deepar._deepar.DeepAR": [[111, 3, 1, "", "construct_input_vector"], [111, 3, 1, "", "create_log"], [111, 3, 1, "", "decode"], [111, 3, 1, "", "encode"], [111, 3, 1, "", "forward"], [111, 3, 1, "", "from_dataset"], [111, 3, 1, "", "predict"]], "pytorch_forecasting.models.deepar._deepar_pkg": [[113, 1, 1, "", "DeepAR_pkg"]], "pytorch_forecasting.models.deepar._deepar_pkg.DeepAR_pkg": [[113, 3, 1, "", "get_base_test_params"], [113, 3, 1, "", "get_cls"]], "pytorch_forecasting.models.dlinear": [[115, 0, 0, "-", "_dlinear_pkg_v2"], [117, 0, 0, "-", "_dlinear_v2"]], "pytorch_forecasting.models.dlinear._dlinear_pkg_v2": [[116, 1, 1, "", "DLinear_pkg_v2"]], "pytorch_forecasting.models.dlinear._dlinear_pkg_v2.DLinear_pkg_v2": [[116, 3, 1, "", "get_cls"], [116, 3, 1, "", "get_test_train_params"]], "pytorch_forecasting.models.dlinear._dlinear_v2": [[118, 1, 1, "", "DLinear"]], "pytorch_forecasting.models.dlinear._dlinear_v2.DLinear": [[118, 3, 1, "", "forward"]], "pytorch_forecasting.models.mlp": [[120, 0, 0, "-", "_decodermlp"], [122, 0, 0, "-", "_decodermlp_pkg"], [124, 0, 0, "-", "submodules"]], "pytorch_forecasting.models.mlp._decodermlp": [[121, 1, 1, "", "DecoderMLP"]], "pytorch_forecasting.models.mlp._decodermlp.DecoderMLP": [[121, 3, 1, "", "forward"], [121, 3, 1, "", "from_dataset"]], "pytorch_forecasting.models.mlp._decodermlp_pkg": [[123, 1, 1, "", "DecoderMLP_pkg"]], "pytorch_forecasting.models.mlp._decodermlp_pkg.DecoderMLP_pkg": [[123, 3, 1, "", "get_base_test_params"], [123, 3, 1, "", "get_cls"]], "pytorch_forecasting.models.mlp.submodules": [[125, 1, 1, "", "FullyConnectedModule"]], "pytorch_forecasting.models.mlp.submodules.FullyConnectedModule": [[125, 3, 1, "", "forward"]], "pytorch_forecasting.models.nbeats": [[127, 0, 0, "-", "_nbeats"], [129, 0, 0, "-", "_nbeats_pkg"], [131, 0, 0, "-", "sub_modules"]], "pytorch_forecasting.models.nbeats._nbeats": [[128, 1, 1, "", "NBeats"]], "pytorch_forecasting.models.nbeats._nbeats.NBeats": [[128, 3, 1, "", "forward"], [128, 3, 1, "", "from_dataset"], [128, 3, 1, "", "log_interpretation"], [128, 3, 1, "", "plot_interpretation"], [128, 3, 1, "", "step"]], "pytorch_forecasting.models.nbeats._nbeats_pkg": [[130, 1, 1, "", "NBeats_pkg"]], "pytorch_forecasting.models.nbeats._nbeats_pkg.NBeats_pkg": [[130, 3, 1, "", "get_base_test_params"], [130, 3, 1, "", "get_cls"]], "pytorch_forecasting.models.nbeats.sub_modules": [[132, 1, 1, "", "NBEATSBlock"], [133, 1, 1, "", "NBEATSGenericBlock"], [134, 1, 1, "", "NBEATSSeasonalBlock"], [135, 1, 1, "", "NBEATSTrendBlock"], [136, 5, 1, "", "linear"], [137, 5, 1, "", "linspace"]], "pytorch_forecasting.models.nbeats.sub_modules.NBEATSBlock": [[132, 3, 1, "", "forward"]], "pytorch_forecasting.models.nbeats.sub_modules.NBEATSGenericBlock": [[133, 3, 1, "", "forward"]], "pytorch_forecasting.models.nbeats.sub_modules.NBEATSSeasonalBlock": [[134, 3, 1, "", "forward"]], "pytorch_forecasting.models.nbeats.sub_modules.NBEATSTrendBlock": [[135, 3, 1, "", "forward"]], "pytorch_forecasting.models.nhits": [[139, 0, 0, "-", "_nhits"], [141, 0, 0, "-", "_nhits_pkg"], [143, 0, 0, "-", "sub_modules"]], "pytorch_forecasting.models.nhits._nhits": [[140, 1, 1, "", "NHiTS"]], "pytorch_forecasting.models.nhits._nhits.NHiTS": [[140, 4, 1, "", "decoder_covariate_size"], [140, 4, 1, "", "encoder_covariate_size"], [140, 3, 1, "", "forward"], [140, 3, 1, "", "from_dataset"], [140, 3, 1, "", "log_interpretation"], [140, 4, 1, "", "n_stacks"], [140, 3, 1, "", "plot_interpretation"], [140, 4, 1, "", "static_size"], [140, 3, 1, "", "step"]], "pytorch_forecasting.models.nhits._nhits_pkg": [[142, 1, 1, "", "NHiTS_pkg"]], "pytorch_forecasting.models.nhits._nhits_pkg.NHiTS_pkg": [[142, 3, 1, "", "get_base_test_params"], [142, 3, 1, "", "get_cls"]], "pytorch_forecasting.models.nhits.sub_modules": [[144, 1, 1, "", "IdentityBasis"], [145, 1, 1, "", "MLP"], [146, 1, 1, "", "NHiTS"], [147, 1, 1, "", "NHiTSBlock"], [148, 1, 1, "", "StaticFeaturesEncoder"], [149, 5, 1, "", "init_weights"]], "pytorch_forecasting.models.nhits.sub_modules.IdentityBasis": [[144, 3, 1, "", "forward"]], "pytorch_forecasting.models.nhits.sub_modules.MLP": [[145, 3, 1, "", "forward"]], "pytorch_forecasting.models.nhits.sub_modules.NHiTS": [[146, 3, 1, "", "forward"]], "pytorch_forecasting.models.nhits.sub_modules.NHiTSBlock": [[147, 3, 1, "", "forward"]], "pytorch_forecasting.models.nhits.sub_modules.StaticFeaturesEncoder": [[148, 3, 1, "", "forward"]], "pytorch_forecasting.models.nn": [[151, 0, 0, "-", "embeddings"], [154, 0, 0, "-", "rnn"]], "pytorch_forecasting.models.nn.embeddings": [[152, 1, 1, "", "MultiEmbedding"], [153, 1, 1, "", "TimeDistributedEmbeddingBag"]], "pytorch_forecasting.models.nn.embeddings.MultiEmbedding": [[152, 3, 1, "", "forward"]], "pytorch_forecasting.models.nn.embeddings.TimeDistributedEmbeddingBag": [[153, 3, 1, "", "forward"]], "pytorch_forecasting.models.nn.rnn": [[155, 1, 1, "", "GRU"], [156, 1, 1, "", "LSTM"], [157, 1, 1, "", "RNN"], [158, 5, 1, "", "get_rnn"]], "pytorch_forecasting.models.nn.rnn.GRU": [[155, 3, 1, "", "handle_no_encoding"], [155, 3, 1, "", "init_hidden_state"], [155, 3, 1, "", "repeat_interleave"]], "pytorch_forecasting.models.nn.rnn.LSTM": [[156, 3, 1, "", "handle_no_encoding"], [156, 3, 1, "", "init_hidden_state"], [156, 3, 1, "", "repeat_interleave"]], "pytorch_forecasting.models.nn.rnn.RNN": [[157, 3, 1, "", "forward"], [157, 3, 1, "", "handle_no_encoding"], [157, 3, 1, "", "init_hidden_state"], [157, 3, 1, "", "repeat_interleave"]], "pytorch_forecasting.models.rnn": [[160, 0, 0, "-", "_rnn"], [162, 0, 0, "-", "_rnn_pkg"]], "pytorch_forecasting.models.rnn._rnn": [[161, 1, 1, "", "RecurrentNetwork"]], "pytorch_forecasting.models.rnn._rnn.RecurrentNetwork": [[161, 3, 1, "", "construct_input_vector"], [161, 3, 1, "", "decode"], [161, 3, 1, "", "encode"], [161, 3, 1, "", "forward"], [161, 3, 1, "", "from_dataset"]], "pytorch_forecasting.models.rnn._rnn_pkg": [[163, 1, 1, "", "RecurrentNetwork_pkg"]], "pytorch_forecasting.models.rnn._rnn_pkg.RecurrentNetwork_pkg": [[163, 3, 1, "", "get_base_test_params"], [163, 3, 1, "", "get_cls"]], "pytorch_forecasting.models.temporal_fusion_transformer": [[165, 0, 0, "-", "_tft"], [167, 0, 0, "-", "_tft_pkg"], [169, 0, 0, "-", "_tft_pkg_v2"], [171, 0, 0, "-", "_tft_v2"], [173, 0, 0, "-", "sub_modules"], [185, 0, 0, "-", "tuning"]], "pytorch_forecasting.models.temporal_fusion_transformer._tft": [[166, 1, 1, "", "TemporalFusionTransformer"]], "pytorch_forecasting.models.temporal_fusion_transformer._tft.TemporalFusionTransformer": [[166, 3, 1, "", "create_log"], [166, 3, 1, "", "expand_static_context"], [166, 3, 1, "", "forward"], [166, 3, 1, "", "from_dataset"], [166, 3, 1, "", "get_attention_mask"], [166, 3, 1, "", "interpret_output"], [166, 3, 1, "", "log_embeddings"], [166, 3, 1, "", "log_interpretation"], [166, 3, 1, "", "on_epoch_end"], [166, 3, 1, "", "on_fit_end"], [166, 3, 1, "", "plot_interpretation"], [166, 3, 1, "", "plot_prediction"]], "pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg": [[168, 1, 1, "", "TemporalFusionTransformer_pkg"]], "pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg.TemporalFusionTransformer_pkg": [[168, 3, 1, "", "get_base_test_params"], [168, 3, 1, "", "get_cls"]], "pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2": [[170, 1, 1, "", "TFT_pkg_v2"]], "pytorch_forecasting.models.temporal_fusion_transformer._tft_pkg_v2.TFT_pkg_v2": [[170, 3, 1, "", "get_cls"], [170, 3, 1, "", "get_test_train_params"]], "pytorch_forecasting.models.temporal_fusion_transformer._tft_v2": [[172, 1, 1, "", "TFT"]], "pytorch_forecasting.models.temporal_fusion_transformer._tft_v2.TFT": [[172, 3, 1, "", "forward"]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules": [[174, 1, 1, "", "AddNorm"], [175, 1, 1, "", "GateAddNorm"], [176, 1, 1, "", "GatedLinearUnit"], [177, 1, 1, "", "GatedResidualNetwork"], [178, 1, 1, "", "InterpretableMultiHeadAttention"], [179, 1, 1, "", "PositionalEncoder"], [180, 1, 1, "", "ResampleNorm"], [181, 1, 1, "", "ScaledDotProductAttention"], [182, 1, 1, "", "TimeDistributed"], [183, 1, 1, "", "TimeDistributedInterpolation"], [184, 1, 1, "", "VariableSelectionNetwork"]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.AddNorm": [[174, 3, 1, "", "forward"]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GateAddNorm": [[175, 3, 1, "", "forward"]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GatedLinearUnit": [[176, 3, 1, "", "forward"]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.GatedResidualNetwork": [[177, 3, 1, "", "forward"]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.InterpretableMultiHeadAttention": [[178, 3, 1, "", "forward"]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.PositionalEncoder": [[179, 3, 1, "", "forward"]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.ResampleNorm": [[180, 3, 1, "", "forward"]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.ScaledDotProductAttention": [[181, 3, 1, "", "forward"]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.TimeDistributed": [[182, 3, 1, "", "forward"]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.TimeDistributedInterpolation": [[183, 3, 1, "", "forward"]], "pytorch_forecasting.models.temporal_fusion_transformer.sub_modules.VariableSelectionNetwork": [[184, 3, 1, "", "forward"]], "pytorch_forecasting.models.temporal_fusion_transformer.tuning": [[186, 5, 1, "", "_lazywhere"], [187, 5, 1, "", "optimize_hyperparameters"]], "pytorch_forecasting.models.tide": [[189, 0, 0, "-", "_tide"], [191, 0, 0, "-", "_tide_dsipts"], [196, 0, 0, "-", "_tide_pkg"], [198, 0, 0, "-", "sub_modules"]], "pytorch_forecasting.models.tide._tide": [[190, 1, 1, "", "TiDEModel"]], "pytorch_forecasting.models.tide._tide.TiDEModel": [[190, 4, 1, "", "decoder_covariate_size"], [190, 4, 1, "", "encoder_covariate_size"], [190, 3, 1, "", "forward"], [190, 3, 1, "", "from_dataset"], [190, 4, 1, "", "static_size"]], "pytorch_forecasting.models.tide._tide_dsipts": [[192, 0, 0, "-", "_tide_v2"], [194, 0, 0, "-", "_tide_v2_pkg"]], "pytorch_forecasting.models.tide._tide_dsipts._tide_v2": [[193, 1, 1, "", "TIDE"]], "pytorch_forecasting.models.tide._tide_dsipts._tide_v2.TIDE": [[193, 3, 1, "", "cat_categorical_vars"], [193, 3, 1, "", "forward"], [193, 3, 1, "", "remove_var"]], "pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg": [[195, 1, 1, "", "TIDE_pkg_v2"]], "pytorch_forecasting.models.tide._tide_dsipts._tide_v2_pkg.TIDE_pkg_v2": [[195, 3, 1, "", "get_cls"], [195, 3, 1, "", "get_test_train_params"]], "pytorch_forecasting.models.tide._tide_pkg": [[197, 1, 1, "", "TiDEModel_pkg"]], "pytorch_forecasting.models.tide._tide_pkg.TiDEModel_pkg": [[197, 3, 1, "", "get_base_test_params"], [197, 3, 1, "", "get_cls"]], "pytorch_forecasting.models.tide.sub_modules": [[199, 1, 1, "", "_ResidualBlock"], [200, 1, 1, "", "_TideModule"]], "pytorch_forecasting.models.tide.sub_modules._ResidualBlock": [[199, 3, 1, "", "forward"]], "pytorch_forecasting.models.tide.sub_modules._TideModule": [[200, 3, 1, "", "forward"]], "pytorch_forecasting.models.timexer": [[202, 0, 0, "-", "_timexer"], [204, 0, 0, "-", "_timexer_pkg"], [206, 0, 0, "-", "_timexer_pkg_v2"], [208, 0, 0, "-", "_timexer_v2"], [210, 0, 0, "-", "sub_modules"]], "pytorch_forecasting.models.timexer._timexer": [[203, 1, 1, "", "TimeXer"]], "pytorch_forecasting.models.timexer._timexer.TimeXer": [[203, 4, 1, "", "decoder_covariate_size"], [203, 4, 1, "", "encoder_covariate_size"], [203, 3, 1, "", "forward"], [203, 3, 1, "", "from_dataset"], [203, 4, 1, "", "static_size"]], "pytorch_forecasting.models.timexer._timexer_pkg": [[205, 1, 1, "", "TimeXer_pkg"]], "pytorch_forecasting.models.timexer._timexer_pkg.TimeXer_pkg": [[205, 3, 1, "", "get_base_test_params"], [205, 3, 1, "", "get_cls"]], "pytorch_forecasting.models.timexer._timexer_pkg_v2": [[207, 1, 1, "", "TimeXer_pkg_v2"]], "pytorch_forecasting.models.timexer._timexer_pkg_v2.TimeXer_pkg_v2": [[207, 3, 1, "", "get_cls"], [207, 3, 1, "", "get_test_train_params"]], "pytorch_forecasting.models.timexer._timexer_v2": [[209, 1, 1, "", "TimeXer"]], "pytorch_forecasting.models.timexer._timexer_v2.TimeXer": [[209, 3, 1, "", "forward"]], "pytorch_forecasting.models.timexer.sub_modules": [[211, 1, 1, "", "AttentionLayer"], [212, 1, 1, "", "DataEmbedding_inverted"], [213, 1, 1, "", "EnEmbedding"], [214, 1, 1, "", "Encoder"], [215, 1, 1, "", "EncoderLayer"], [216, 1, 1, "", "FlattenHead"], [217, 1, 1, "", "FullAttention"], [218, 1, 1, "", "PositionalEmbedding"], [219, 1, 1, "", "TriangularCausalMask"]], "pytorch_forecasting.models.timexer.sub_modules.AttentionLayer": [[211, 3, 1, "", "forward"]], "pytorch_forecasting.models.timexer.sub_modules.DataEmbedding_inverted": [[212, 3, 1, "", "forward"]], "pytorch_forecasting.models.timexer.sub_modules.EnEmbedding": [[213, 3, 1, "", "forward"]], "pytorch_forecasting.models.timexer.sub_modules.Encoder": [[214, 3, 1, "", "forward"]], "pytorch_forecasting.models.timexer.sub_modules.EncoderLayer": [[215, 3, 1, "", "forward"]], "pytorch_forecasting.models.timexer.sub_modules.FlattenHead": [[216, 3, 1, "", "forward"]], "pytorch_forecasting.models.timexer.sub_modules.FullAttention": [[217, 3, 1, "", "forward"]], "pytorch_forecasting.models.timexer.sub_modules.PositionalEmbedding": [[218, 3, 1, "", "forward"]], "pytorch_forecasting.models.xlstm": [[221, 0, 0, "-", "_xlstm"], [223, 0, 0, "-", "_xlstm_pkg"]], "pytorch_forecasting.models.xlstm._xlstm": [[222, 1, 1, "", "xLSTMTime"]], "pytorch_forecasting.models.xlstm._xlstm.xLSTMTime": [[222, 3, 1, "", "forward"], [222, 3, 1, "", "from_dataset"]], "pytorch_forecasting.models.xlstm._xlstm_pkg": [[224, 1, 1, "", "xLSTMTime_pkg"]], "pytorch_forecasting.models.xlstm._xlstm_pkg.xLSTMTime_pkg": [[224, 3, 1, "", "get_base_test_params"], [224, 3, 1, "", "get_cls"]], "pytorch_forecasting.utils": [[226, 0, 0, "-", "_classproperty"], [228, 0, 0, "-", "_coerce"], [231, 0, 0, "-", "_dependencies"], [248, 0, 0, "-", "_maint"], [253, 0, 0, "-", "_utils"]], "pytorch_forecasting.utils._classproperty": [[227, 1, 1, "", "classproperty"]], "pytorch_forecasting.utils._coerce": [[229, 5, 1, "", "_coerce_to_dict"], [230, 5, 1, "", "_coerce_to_list"]], "pytorch_forecasting.utils._dependencies": [[232, 0, 0, "-", "_dependencies"], [236, 0, 0, "-", "_safe_import"], [237, 0, 0, "-", "tests"]], "pytorch_forecasting.utils._dependencies._dependencies": [[233, 5, 1, "", "_check_matplotlib"], [234, 5, 1, "", "_get_installed_packages"], [235, 5, 1, "", "_get_installed_packages_private"]], "pytorch_forecasting.utils._dependencies.tests": [[238, 0, 0, "-", "test_safe_import"]], "pytorch_forecasting.utils._dependencies.tests.test_safe_import": [[239, 5, 1, "", "test_import_class"], [240, 5, 1, "", "test_import_existing_object"], [241, 5, 1, "", "test_import_missing_module"], [242, 5, 1, "", "test_import_present_module"], [243, 5, 1, "", "test_import_submodule"], [244, 5, 1, "", "test_import_with_different_pkg_name_1"], [245, 5, 1, "", "test_import_with_different_pkg_name_2"], [246, 5, 1, "", "test_import_without_pkg_name"], [247, 5, 1, "", "test_multiple_inheritance_from_mock"]], "pytorch_forecasting.utils._maint": [[249, 0, 0, "-", "_show_versions"]], "pytorch_forecasting.utils._maint._show_versions": [[250, 5, 1, "", "_get_deps_info"], [251, 5, 1, "", "_get_sys_info"], [252, 5, 1, "", "show_versions"]], "pytorch_forecasting.utils._utils": [[254, 1, 1, "", "InitialParameterRepresenterMixIn"], [255, 1, 1, "", "OutputMixIn"], [256, 1, 1, "", "TupleOutputMixIn"], [257, 5, 1, "", "apply_to_list"], [258, 5, 1, "", "autocorrelation"], [259, 5, 1, "", "concat_sequences"], [260, 5, 1, "", "create_mask"], [261, 5, 1, "", "detach"], [262, 5, 1, "", "get_embedding_size"], [263, 5, 1, "", "groupby_apply"], [264, 5, 1, "", "integer_histogram"], [265, 5, 1, "", "masked_op"], [266, 5, 1, "", "move_to_device"], [267, 5, 1, "", "next_fast_len"], [268, 5, 1, "", "padded_stack"], [269, 5, 1, "", "profile"], [270, 5, 1, "", "repr_class"], [271, 5, 1, "", "to_list"], [272, 5, 1, "", "unpack_sequence"], [273, 5, 1, "", "unsqueeze_like"]], "pytorch_forecasting.utils._utils.OutputMixIn": [[255, 3, 1, "", "iget"]], "pytorch_forecasting.utils._utils.TupleOutputMixIn": [[256, 3, 1, "", "to_network_output"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function"}, "terms": {"": [0, 4, 7, 37, 39, 41, 46, 47, 48, 56, 60, 89, 90, 91, 92, 111, 121, 128, 140, 152, 161, 166, 190, 200, 203, 255, 273, 274], "0": [4, 7, 9, 10, 11, 12, 14, 15, 16, 17, 28, 37, 41, 45, 46, 47, 56, 57, 60, 61, 67, 69, 70, 71, 72, 73, 74, 78, 82, 83, 85, 89, 90, 91, 92, 93, 97, 99, 105, 108, 111, 121, 128, 132, 133, 134, 135, 140, 152, 153, 154, 155, 156, 157, 161, 166, 172, 177, 178, 181, 184, 187, 190, 193, 203, 209, 212, 213, 215, 216, 217, 222, 258, 263, 265, 268, 269, 274, 276, 278], "0001": 269, "001": [45, 72, 89, 90, 91, 92, 108, 128, 140, 166, 203], "01": [128, 140, 187], "02": [57, 61, 67, 69, 70, 71, 72, 73, 74], "03": 276, "05": [37, 89, 90, 91, 92, 108, 187, 274], "08424": 193, "1": [4, 7, 9, 11, 12, 13, 14, 16, 17, 28, 37, 39, 41, 46, 47, 56, 57, 60, 61, 67, 69, 70, 71, 72, 73, 74, 79, 83, 85, 89, 90, 91, 92, 97, 108, 111, 118, 121, 128, 132, 133, 134, 135, 140, 153, 155, 156, 157, 161, 166, 172, 177, 184, 187, 190, 203, 209, 212, 213, 215, 217, 222, 234, 274, 275, 276, 277, 278], "10": [28, 45, 72, 89, 90, 91, 92, 108, 111, 121, 128, 132, 133, 134, 135, 140, 152, 161, 166, 278], "100": [46, 57, 69, 111, 187, 262, 270, 275, 276], "1000": [37, 89, 90, 91, 92, 108, 128, 140, 166, 276], "1000000000": [166, 178, 181], "1024": [140, 203], "10240": 222, "11": 278, "112": 0, "1126": 0, "1142": 0, "115": 0, "117": 0, "118": 0, "12": 278, "1234": 278, "125": 0, "127": 0, "128": [140, 190, 276], "1280": 0, "13504": 118, "137": 0, "1399": 0, "143": 0, "145": 0, "148": 0, "15": [4, 7], "1516": 0, "1518": 0, "153": 0, "156": 0, "1579": 0, "1580": 0, "16": [69, 166, 187, 190, 203, 276], "160": [0, 179], "1624": 0, "1648": 0, "1651": 0, "166": 0, "1660": 0, "1661": 0, "1667": 0, "167": 0, "1673": 0, "1674": 0, "1676": 0, "1677": 0, "168": 0, "1688": 0, "169": 0, "1691": 0, "1692": 0, "1693": 0, "1694": 0, "1696": 0, "1697": 0, "1699": 0, "1701": 0, "1702": 0, "1704": 0, "1705": 0, "1710": 0, "1712": 0, "1715": 0, "1719": 0, "172": 0, "1720": 0, "1724": 0, "1725": 0, "1734": 0, "1736": 0, "1737": 0, "1738": 0, "1739": 0, "1740": 0, "1742": 0, "1743": 0, "1744": 0, "1746": 0, "1748": 0, "1749": 0, "1750": 0, "1762": 0, "1763": 0, "1773": 0, "1774": 0, "1775": 0, "1776": 0, "1777": 0, "1780": 0, "1787": 0, "1797": 0, "1798": 0, "1799": 0, "1800": 0, "1803": 0, "1804": 0, "1811": 0, "1812": 0, "1813": 0, "1818": 0, "1819": 0, "1827": 0, "1832": 0, "1834": 0, "184": 0, "1843": 0, "185": 0, "1851": 0, "1852": 0, "1853": 0, "1856": 0, "1859": 0, "1861": 0, "1864": 0, "1866": 0, "1867": 0, "1872": 0, "1877": 0, "1878": 0, "188": 0, "1891": 0, "19072": 209, "199": 0, "1d": 153, "1e": [0, 72, 89, 90, 91, 92, 108, 166, 187, 276, 279], "1e3": 276, "1e9": [166, 178, 181], "1f": 276, "1m": 0, "2": [37, 39, 46, 47, 71, 81, 82, 83, 89, 90, 91, 92, 108, 111, 118, 121, 128, 140, 152, 161, 166, 172, 187, 190, 203, 209, 234, 267, 274, 276, 278], "20": [16, 71, 152, 187], "200": 275, "2048": [128, 209], "20k": 29, "213": 28, "220": 0, "2205": 118, "221": 0, "223": 0, "226": 0, "2304": 193, "233": 0, "235": 0, "236": 0, "237": 0, "24": 209, "2402": 209, "2407": 222, "245": 0, "249": 0, "25": [9, 11, 17, 57, 61, 67, 69, 70, 71, 72, 73, 74, 118, 140, 222], "250": 0, "252": 0, "256": [128, 203], "260": 0, "263": 0, "265": 187, "268": 0, "280": 0, "28800": 187, "2d": 153, "3": [9, 11, 13, 14, 17, 28, 37, 72, 89, 90, 91, 92, 108, 121, 128, 152, 166, 187, 234, 267, 274, 276, 278], "30": [7, 37, 274, 276], "300": [0, 121], "303": 0, "311": 0, "314": 0, "32": [4, 7, 69, 128, 140, 190, 276], "328": 0, "329": 0, "338": 0, "350": 29, "36": 276, "3600": 187, "379": 0, "380": 0, "4": [37, 56, 71, 128, 132, 133, 134, 135, 166, 172, 187, 190, 203, 209, 215, 274, 276, 279], "400": 28, "402": 0, "404": 0, "405": 0, "429": 0, "434": 0, "440": [234, 250], "479": 0, "491": 0, "497": 0, "5": [9, 11, 17, 37, 57, 61, 67, 69, 70, 71, 72, 73, 74, 83, 85, 89, 90, 91, 92, 108, 132, 133, 134, 135, 166, 187, 203, 209, 217, 267, 274, 278], "50": [46, 47, 71], "500": 275, "5000": 218, "512": [128, 140, 166, 209], "518": 0, "550": 0, "585": 0, "588": 0, "6": [91, 276], "602": 0, "603": 0, "619": 0, "639": 0, "64": [32, 33, 37, 69, 91, 111, 172, 187], "672": 0, "681": 0, "688": 0, "7": [4, 7, 166, 276, 277], "732": 0, "75": [9, 11, 17, 57, 61, 67, 69, 70, 71, 72, 73, 74], "758": 0, "759": 0, "776": 0, "782": 0, "798": 0, "8": [91, 140, 166, 187, 209, 278], "829": 0, "88": 0, "890": 0, "9": [57, 61, 67, 69, 70, 71, 72, 73, 74, 278], "90": 0, "902": 0, "908": 0, "912": 0, "923": 0, "924": 0, "926": 0, "949": 0, "95": [92, 263], "98": [57, 61, 67, 69, 70, 71, 72, 73, 74], "99": 91, "995": 0, "A": [4, 5, 7, 37, 45, 46, 69, 91, 128, 140, 153, 200, 226, 267, 274, 277], "And": 89, "At": [91, 278], "By": [37, 91, 111, 274], "For": [0, 7, 11, 37, 45, 46, 274, 278, 279], "If": [0, 4, 7, 9, 11, 13, 17, 28, 37, 39, 41, 45, 46, 62, 63, 71, 89, 90, 91, 92, 103, 108, 111, 128, 140, 152, 153, 157, 161, 166, 187, 190, 209, 222, 260, 271, 274, 275, 276, 277, 278], "In": [37, 73, 91, 250, 274, 278, 279], "It": [2, 7, 83, 193, 209, 222, 274, 275, 278], "No": [9, 11, 17, 37], "On": [37, 274], "One": [37, 91, 92, 128, 140, 265, 279], "Such": 279, "The": [0, 4, 5, 7, 9, 11, 13, 14, 16, 17, 37, 41, 52, 62, 65, 80, 83, 91, 103, 111, 118, 128, 140, 165, 187, 190, 200, 209, 274, 275, 276, 277, 278, 281], "Then": 46, "There": [7, 37, 91, 274], "These": [37, 105, 118, 267], "To": [0, 58, 91, 275, 276, 277, 278], "Will": [14, 37, 56, 60, 187], "With": [203, 209], "_": [0, 89], "_2": [46, 47], "__init__": [0, 89, 91, 92, 111, 121, 128, 140, 161, 166, 190, 203], "__name__": 103, "__version__": 250, "_base_metr": [55, 56, 57, 58, 59, 60, 61, 62, 63], "_base_model": [89, 90, 91, 92, 93, 94, 95, 96, 97], "_base_model_v2": 99, "_base_object": [65, 101, 102, 103], "_baseobject": [65, 103], "_baseptforecast": [113, 123, 130, 142, 163, 168, 197, 205, 224], "_baseptforecaster_common": [101, 102], "_baseptforecasterv2": [116, 170, 195, 207], "_baseptmetr": 52, "_classproperti": 227, "_coerc": [229, 230], "_data_scenario": 0, "_decodermlp": 121, "_decodermlp_pkg": 123, "_deepar": 111, "_deepar_pkg": 113, "_depend": [233, 234, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247], "_dlinear_pkg_v2": 116, "_dlinear_v2": 118, "_get_deps_info": 252, "_get_installed_packag": 235, "_get_sys_info": 252, "_maint": [250, 251, 252], "_mqf2_util": [45, 46, 47, 48], "_nbeat": 128, "_nbeats_pkg": 130, "_nhit": 140, "_nhits_pkg": 142, "_prepare_metadata": 4, "_quantile_loss_pkg": 52, "_quantile_pkg": 52, "_rnn": 161, "_rnn_pkg": 163, "_safe_import": 0, "_show_vers": [250, 251, 252], "_tft": 166, "_tft_pkg": 168, "_tft_pkg_v2": 170, "_tft_v2": 172, "_tide": 190, "_tide_dsipt": [193, 195], "_tide_pkg": 197, "_tide_v2": 193, "_tide_v2_pkg": 195, "_timeseri": [37, 38, 39], "_timeseries_v2": 41, "_timex": 203, "_timexer_pkg": 205, "_timexer_pkg_v2": 207, "_timexer_v2": 209, "_tslib_base_model_v2": 105, "_tslib_data_modul": [4, 5], "_util": [254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273], "_xlstm": 222, "_xlstm_pkg": 224, "ab": [48, 52, 77, 78, 79, 82, 193, 209], "abc": 157, "abil": [203, 209], "abl": [36, 37, 274, 278], "about": [0, 7, 37, 41, 91, 153, 193, 209, 274, 277, 278], "abov": [7, 39, 47, 278], "absolut": [0, 45, 77, 78, 79, 82, 85, 108], "abstract": [2, 32, 55, 58, 59, 62, 157, 277, 278], "acc": 91, "acceler": [91, 276], "accept": [58, 276], "access": [4, 91, 255, 256], "accid": 235, "accident": 0, "accomod": 118, "account": [9, 278], "accross": 279, "accumul": 62, "accuraci": [91, 140, 276], "achiev": [91, 203, 209], "across": [0, 33, 118, 200, 203, 209], "action": 0, "activ": [121, 128, 140, 145, 146, 147, 193, 203, 209, 215, 278], "activation_class": [121, 125], "actnorm": 47, "actual": [0, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 69, 71, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 91, 92, 111, 128, 140, 161, 166, 277, 279], "ad": [7, 9, 11, 13, 14, 17, 28, 45, 56, 91, 140, 166, 209, 222, 278], "adam": [0, 89, 90, 91, 92, 99, 105, 108, 118, 166, 172, 193, 209], "adamw": [89, 90, 91, 92, 108, 166], "adapt": [249, 279], "add": [0, 4, 5, 7, 9, 11, 14, 17, 37, 62, 89, 90, 91, 92, 97, 108, 111, 161, 166, 274, 278, 279], "add_encoder_length": [7, 37, 274], "add_figur": 0, "add_imag": 91, "add_loss_to_titl": [89, 91, 166], "add_nan": [0, 14, 37, 274], "add_relative_time_idx": [4, 5, 7, 37, 274], "add_target_scal": [4, 7, 37, 274], "addit": [0, 14, 37, 65, 71, 89, 90, 91, 92, 99, 108, 111, 121, 128, 140, 161, 166, 187, 190, 193, 203, 222, 279], "adequet": 278, "adher": 278, "adjust": 190, "advanc": [0, 7], "affect": 0, "affinetransform": 48, "after": [0, 80, 83, 89, 90, 91, 92, 108, 128, 140, 166, 187, 190, 193, 278], "afterward": [47, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218], "again": [37, 62, 274], "against": 140, "agenc": 29, "aggreat": 55, "aggreg": [0, 62, 153, 263, 279], "aggregationmetr": 279, "agobbifbk": 0, "ahmed21": 0, "aim": [190, 277], "airookie17": 0, "algorithm": [37, 45, 110, 275], "alia": [9, 11, 13, 14, 17, 67, 70, 72, 73, 74, 94], "align": [0, 33, 37], "alik": 277, "all": [4, 7, 14, 37, 41, 47, 56, 57, 60, 61, 68, 89, 91, 92, 93, 103, 111, 118, 121, 125, 128, 132, 133, 134, 135, 144, 145, 146, 147, 148, 153, 161, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 193, 199, 203, 209, 211, 212, 213, 214, 215, 216, 217, 218, 267, 274, 275, 278], "all_extra": [0, 278], "all_target": 79, "allow": [0, 4, 7, 9, 11, 13, 14, 17, 37, 41, 66, 92, 97, 111, 121, 128, 140, 157, 161, 166, 178, 181, 190, 203, 256, 274, 275, 276, 277, 278], "allow_miss": 0, "allow_missing_timestep": [0, 7, 37, 274, 275], "allow_zero_length_dataloader_with_multiple_devic": [4, 7], "allowed_encoder_known_variable_nam": [92, 111, 121, 161, 166, 203], "almost": 274, "alogrithm": 275, "along": [97, 111, 121, 161, 268, 274, 277, 278], "alpha": 46, "alreadi": [62, 89, 271, 277, 278], "also": [7, 11, 13, 14, 17, 37, 41, 62, 89, 90, 91, 92, 108, 128, 140, 166, 190, 203, 222, 274, 276, 277, 278, 279, 281], "altern": [89, 90, 91, 92, 108, 166, 276, 278], "although": [47, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218, 275], "alwai": [14, 32, 90, 92, 203, 274, 278], "amazon": 0, "amend": 0, "among": [13, 166], "amongst": 275, "amp": 91, "an": [0, 7, 9, 11, 13, 14, 17, 32, 37, 41, 65, 89, 90, 91, 92, 99, 103, 105, 111, 113, 118, 123, 130, 140, 142, 147, 152, 161, 163, 166, 168, 170, 172, 190, 195, 203, 207, 209, 211, 233, 240, 257, 260, 274, 275, 279], "anaconda": 278, "analysi": 128, "andr": 0, "andstat": 190, "angl": 270, "ani": [0, 4, 9, 11, 17, 32, 33, 37, 41, 62, 65, 83, 89, 90, 91, 92, 93, 99, 108, 111, 118, 166, 187, 203, 209, 257, 270, 271, 274], "anoth": [245, 273, 275], "answer": 275, "anymor": 0, "anyth": 91, "apart": 91, "api": [203, 274, 277, 278, 279], "appear": [37, 274], "append": 91, "appli": [0, 9, 11, 13, 17, 18, 55, 56, 57, 58, 59, 60, 61, 62, 67, 69, 71, 80, 83, 118, 166, 190, 193, 200, 203, 217, 222, 257, 263, 265, 276, 279], "applic": 278, "appreci": 0, "approach": 91, "appropri": [37, 155, 156, 157, 274], "approv": 0, "approxim": [45, 46, 47, 72], "ar": [0, 7, 9, 11, 13, 14, 17, 32, 33, 37, 38, 41, 46, 47, 58, 59, 62, 79, 89, 90, 91, 92, 97, 103, 108, 111, 113, 121, 123, 128, 130, 140, 142, 152, 153, 157, 161, 163, 166, 168, 170, 184, 187, 190, 195, 200, 203, 207, 209, 234, 250, 252, 259, 267, 272, 274, 275, 276, 278, 279], "arang": 89, "arbitrari": [0, 7], "architectur": [4, 91, 190, 200, 203, 209, 222, 277], "arg": [13, 17, 62, 91, 153, 155, 156], "argmax": 91, "arguabl": 128, "argument": [0, 9, 11, 17, 37, 55, 56, 60, 62, 65, 89, 90, 91, 92, 108, 111, 121, 128, 140, 147, 161, 166, 187, 190, 193, 203, 222, 274, 275], "around": [37, 274], "arrai": [14, 38, 91, 186], "art": [203, 209, 277], "articl": [71, 111, 128, 140, 277], "arxiv": [118, 193, 209, 222], "aspect": 91, "assert": 0, "assertionerror": 39, "assess": 14, "assign": 7, "associ": [46, 47], "assum": [41, 78, 79, 82, 89, 90, 92, 250], "atol": 45, "attempt": 278, "attent": [0, 105, 118, 166, 178, 181, 190, 203, 209, 211, 215, 217, 219], "attention_dropout": 217, "attention_head_s": [166, 172, 187, 276], "attention_head_size_rang": 187, "attention_prediction_horizon": 166, "attention_weight": [105, 118], "attn_mask": [211, 217], "attribut": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 32, 33, 37, 46, 48, 56, 57, 60, 67, 70, 71, 72, 73, 74, 91, 93, 95, 152, 209, 219, 227, 250, 270, 274], "attributeerror": 0, "aubet": 46, "augment": [37, 274], "author": 0, "auto": [0, 4, 7, 37, 89, 91, 274, 276], "autocorrel": 0, "autoform": 4, "autom": [0, 37, 274], "automat": [0, 7, 37, 56, 140, 152, 274], "autonotebook": 0, "autoregress": [0, 89, 90, 109, 110, 111, 193], "autoregressivebasemodel": [90, 222], "autoregressivebasemodelwithcovari": [111, 161], "auxiliari": [46, 47], "avail": [0, 9, 11, 17, 37, 91, 121, 200, 274, 279], "averag": [77, 91, 92, 108, 118, 140, 166, 265, 279], "avirsaha": 0, "avoid": [0, 235, 275, 279], "awai": 89, "awar": 278, "ax": [89, 91, 92, 128, 140, 166], "axi": [128, 166], "b": [153, 219], "back": 91, "backcast": [0, 128, 140], "backcast_length": [132, 133, 134, 135, 137], "backcast_loss_ratio": [128, 140], "backcast_s": 144, "backcast_theta": 144, "backend": 0, "background": 277, "backport": 186, "backpropag": [55, 56, 57, 58, 59, 60, 61, 62, 67, 69, 71, 76, 77, 78, 79, 80, 81, 82, 83, 85, 91], "backward": 278, "badg": 0, "bag": [90, 92, 152, 153, 190, 203], "bar": [91, 111], "base": [0, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 32, 33, 37, 41, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 113, 116, 118, 119, 120, 121, 123, 125, 128, 130, 132, 133, 134, 135, 140, 142, 144, 145, 146, 147, 148, 152, 153, 155, 156, 157, 161, 163, 166, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 193, 195, 197, 199, 200, 203, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 224, 227, 254, 255, 256, 277, 278], "base_distribut": 48, "base_metr": [55, 56, 57, 58, 59, 60, 61, 62, 63, 65], "baseestim": [14, 17, 37, 58, 67, 69, 70, 71, 72, 73, 74, 274], "baselin": [0, 110], "basemodel": [0, 89, 90, 92, 105, 108, 128, 140, 166, 172, 193, 203, 275], "basemodelwithcovari": [90, 121, 140, 166, 190, 203], "basepredictionwrit": [91, 93], "baseprun": 187, "bash": 276, "basi": [128, 147], "basic": [0, 17, 58, 186, 275, 277], "batch": [0, 4, 7, 32, 33, 37, 46, 61, 62, 89, 90, 91, 92, 93, 96, 99, 105, 108, 111, 140, 152, 166, 193, 222, 274, 279], "batch_and_epoch": [91, 93, 111], "batch_first": [153, 155, 156, 157, 182, 183], "batch_idx": [91, 93, 99, 105, 111, 128, 140, 166], "batch_indic": 93, "batch_norm": [140, 146, 147], "batch_sampl": 37, "batch_shap": 46, "batch_siz": [4, 7, 32, 33, 37, 46, 57, 61, 69, 91, 105, 108, 111, 118, 172, 200, 276], "beat": [126, 127, 128, 131], "beaten": 0, "becaus": [14, 32, 33, 166, 275, 279], "been": [0, 80, 83, 89, 91, 108, 157, 277, 279], "befor": [0, 9, 11, 17, 37, 80, 83, 91, 222, 270, 274, 278], "beginn": 277, "beginng": 140, "behav": 250, "behaviour": 275, "being": [0, 193, 209, 222], "below": [9, 11, 17, 41, 278], "benchmark": [128, 203, 209], "bendavidsteel": 0, "benheid": 0, "benidi": 46, "best": [76, 91], "beta": [0, 37, 40, 46, 47, 67, 71, 274], "betadistributionloss": 0, "better": 190, "between": [9, 11, 17, 71, 91, 128, 140, 203, 209, 275, 278], "bia": [0, 136, 155, 156, 157, 166, 178, 181, 279], "bidirect": [155, 156, 157], "big": 275, "bin": [92, 263], "binomi": [0, 37, 73, 274], "black": 0, "blob": 0, "block": [128, 140, 147, 190, 193, 199, 200, 276], "bohdan": 0, "boiler": 209, "bool": [4, 5, 7, 9, 11, 13, 14, 17, 28, 32, 33, 37, 45, 46, 48, 55, 56, 60, 62, 71, 89, 90, 91, 92, 93, 96, 108, 111, 118, 121, 125, 128, 137, 140, 146, 147, 153, 155, 156, 157, 161, 166, 174, 175, 177, 180, 181, 182, 183, 184, 187, 190, 199, 200, 203, 217, 233, 260, 263, 274], "boolean": [260, 265], "booltensor": [155, 156, 157, 260], "borda": 0, "both": [37, 45, 47, 58, 62, 68, 118, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 153, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 211, 212, 213, 214, 215, 216, 217, 218, 277], "bound": 0, "box": [276, 277], "bracket": [37, 91, 270], "branch": 278, "branch_nam": 278, "break": [270, 278], "bridg": [203, 209], "bring": 0, "bug": [276, 278], "bugfix": 278, "build": [0, 276, 278, 280], "built": [37, 222, 274, 275, 277, 278], "bump": 0, "button": 278, "bypass": 190, "c": [41, 276, 277, 278], "c416": 0, "c419": 0, "c_in": 212, "cach": [27, 91], "cache_s": [10, 12, 15, 16], "cahidarda": 0, "calcualt": [55, 58, 59, 62, 89, 91], "calcul": [0, 9, 11, 37, 55, 56, 57, 59, 60, 61, 67, 69, 71, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 91, 92, 108, 111, 128, 140, 184, 258, 265, 279], "calculate_decoder_length": 37, "calculate_prediction_actual_by_vari": 92, "call": [0, 4, 7, 11, 37, 47, 56, 62, 68, 89, 91, 93, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218, 269, 278], "callabl": [4, 9, 11, 17, 18, 37, 89, 90, 91, 92, 108, 166, 257, 269], "callback": [0, 91, 93, 276], "came": 0, "can": [0, 4, 7, 9, 11, 14, 17, 29, 32, 33, 37, 41, 45, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 69, 71, 89, 90, 91, 92, 99, 105, 108, 111, 118, 140, 154, 155, 156, 157, 161, 166, 172, 185, 190, 193, 203, 209, 274, 275, 276, 278, 279, 281], "canon": [203, 209], "capabilitieswith": 256, "capabl": [18, 166, 255, 277], "capac": 222, "captur": [93, 140, 203, 209], "care": [47, 68, 91, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218], "carri": [14, 140], "case": [37, 65, 73, 91, 153, 213, 250, 274, 277, 278], "cat": 41, "cat1": 152, "cat2": 152, "cat3": 152, "cat_categorical_var": 193, "cat_emb_fut": 193, "cat_emb_past": 193, "categor": [7, 8, 14, 37, 41, 90, 92, 111, 118, 121, 140, 152, 161, 166, 172, 190, 193, 203, 209, 274, 275, 278], "categori": [0, 37, 41, 152, 274], "categorical_encod": [0, 7, 37, 274], "categorical_group": [90, 92, 111, 121, 140, 152, 161, 166, 190, 203], "categorical_groups_map": 92, "causal": [0, 166, 219], "causal_attent": 166, "cd": 278, "cell": [0, 111, 159, 160, 161], "cell_typ": [111, 158, 161], "center": [0, 9, 11, 13, 17, 37, 58, 67, 69, 70, 71, 72, 73, 74, 137, 274], "central": 274, "cfg": 0, "chanc": [32, 33, 91], "chang": [9, 11, 13, 14, 17, 37, 41, 55, 56, 60, 62, 128, 157, 187, 203, 274, 278], "changelog": 0, "channel": [276, 278], "charact": 270, "characterist": 88, "check": [0, 39, 233, 275], "checkpoint": [0, 91, 187, 276], "chefponi": 0, "cheslei": 0, "child": 57, "choic": 209, "choos": [37, 274, 275], "chosen": [37, 193, 274], "christi": 0, "chunk": [190, 200], "ci": [0, 278], "circular": 268, "cl": 103, "clamp": 46, "clarifi": 0, "class": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 31, 32, 33, 36, 37, 40, 41, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 236, 239, 253, 254, 255, 256, 262, 270, 274, 277], "classic": 222, "classif": 76, "classifici": 278, "classmethod": [18, 37, 52, 65, 89, 91, 92, 103, 111, 113, 116, 121, 123, 128, 130, 140, 142, 161, 163, 166, 168, 170, 190, 195, 197, 203, 205, 207, 222, 224], "clean": 0, "clear": 91, "clearli": 0, "click": 278, "clone": [0, 89], "close": 83, "cloudpickl": 0, "clue": 275, "cngmid": 0, "code": [0, 37, 111, 209, 276, 278], "codecov": 0, "codeown": 0, "coeffici": 128, "coerc": [229, 230], "coercion": 228, "col": 41, "col_known": 41, "col_typ": 41, "cold": [37, 274], "collat": 4, "collate_fn": 4, "collect": 7, "column": [11, 13, 28, 29, 37, 39, 41, 91, 274], "com": [0, 278], "combin": [4, 37, 47, 56, 60, 211, 222, 274, 279], "come": [200, 274, 275, 277], "command": 278, "commerci": 278, "commit": [0, 278], "common": [37, 88, 91, 209, 236, 274, 275], "commun": 0, "compar": 166, "comparison": [128, 140], "compat": [14, 100, 193, 209, 234, 278], "competit": 128, "complet": 0, "compon": [71, 118, 193, 200, 222], "compos": [0, 193], "composit": [55, 56, 60, 279], "composite_metr": [56, 279], "compositemetr": 0, "comput": [0, 4, 7, 12, 15, 16, 45, 46, 47, 48, 55, 56, 58, 59, 60, 62, 68, 108, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 199, 211, 212, 213, 214, 215, 216, 217, 218, 258], "concat_sequ": 0, "concaten": [0, 79, 96, 97, 153, 259], "concatent": 0, "concentr": [37, 274], "cond": 186, "conda": [0, 276, 277, 278], "condit": [47, 128, 140, 278], "conduct": 265, "config": 0, "configur": [0, 5, 91, 99, 190, 193, 278], "configure_optim": [91, 99], "conform": 0, "conjug": 45, "connect": [119, 120, 128, 193], "consid": [275, 278], "consist": [0, 37, 128, 203, 209, 274], "consolid": 0, "constaint": 0, "constant": [28, 37, 200, 268, 274, 275], "constant_fill_strategi": [37, 274], "constrain": 152, "constraint": [89, 90, 91, 92, 108, 166], "construct": [32, 37, 103, 113, 123, 130, 142, 163, 168, 170, 190, 195, 207, 274], "construct_batch_group": 32, "construct_input_vector": [111, 161], "constructor": [37, 230], "consult": 275, "consumpt": 91, "contain": [0, 4, 5, 7, 37, 39, 41, 43, 49, 50, 51, 52, 65, 89, 91, 99, 103, 105, 112, 113, 115, 116, 118, 122, 123, 129, 130, 141, 142, 152, 153, 157, 162, 163, 167, 168, 169, 170, 172, 194, 195, 196, 197, 203, 204, 205, 206, 207, 223, 224, 278], "context": [4, 5, 47, 166, 177, 184, 193, 209, 278], "context_length": [4, 5, 46, 128, 140, 146, 147, 203], "context_s": [177, 184], "contigu": 89, "contin": [37, 140, 166, 209, 274], "continu": [0, 7, 8, 37, 89, 90, 91, 92, 108, 111, 118, 121, 140, 161, 166, 172, 209, 222, 274], "control": [71, 190, 203, 209, 278], "conveni": [0, 128, 140, 190], "convent": [91, 103], "converg": [37, 274, 276], "convers": [91, 108], "convert": [37, 56, 57, 58, 60, 63, 69, 71, 73, 76, 80, 83, 85, 89, 91, 108, 111, 256, 271, 274], "convex": [45, 46], "copi": [0, 37, 232, 236, 258, 278], "core": [0, 91], "correct": [0, 7, 39, 157], "correctli": 0, "correl": [203, 209], "correspond": [11, 37, 62, 89, 90, 91, 96, 111, 128, 161, 203, 274], "cost": 278, "could": [80, 83, 257, 279], "count": [9, 11, 17, 73, 80, 263], "coupl": [0, 37, 274], "covari": [28, 29, 72, 89, 90, 92, 121, 126, 127, 128, 138, 139, 140, 190, 193, 200, 203, 222, 274], "cover": 0, "coverag": 0, "cp": [45, 47], "cpflow": 0, "cpu": [0, 219, 266, 275, 277, 278], "creat": [0, 4, 32, 33, 37, 56, 89, 91, 92, 95, 103, 111, 113, 116, 121, 123, 128, 130, 140, 142, 161, 163, 166, 168, 170, 187, 190, 195, 197, 203, 205, 207, 222, 224, 260, 264, 274, 276], "create_log": [91, 111, 166], "create_test_inst": [103, 113, 123, 130, 142, 163, 168, 170, 195, 207], "create_test_instances_and_nam": 103, "creation": [0, 275], "crisp": 278, "cross": [76, 214, 215], "cross_attent": 215, "cross_mask": [214, 215], "crossentropi": 0, "cubic": 140, "cuda": 0, "current": [0, 14, 37, 38, 62, 89, 91, 140, 250, 274, 275, 278], "current_stag": 91, "custom": [0, 4, 37, 58, 91, 274], "cut": [37, 274], "cutoff": 276, "cw": [45, 47], "d": [0, 52, 65, 91, 203], "d1": [0, 4], "d2": [0, 4], "d_ff": [203, 209, 215], "d_kei": 211, "d_model": [178, 179, 193, 211, 212, 213, 215, 218], "d_valu": 211, "dai": [37, 41, 274, 276], "daili": 203, "danielgafni": 0, "data": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 67, 73, 80, 83, 89, 90, 91, 92, 99, 105, 111, 128, 140, 161, 190, 193, 203, 209, 212, 213, 218, 228, 264, 276, 277, 278], "data_futur": 41, "data_modul": [0, 5, 7], "data_sourc": [32, 33], "databas": 91, "dataclass": 0, "datafram": [11, 13, 18, 28, 29, 37, 41, 91, 111, 274], "dataload": [0, 4, 7, 34, 37, 91, 92, 99, 105, 108, 111, 128, 140, 166, 187, 190, 193, 274], "dataloader_idx": [91, 93, 99, 105], "datamodul": 7, "datapoint": 0, "dataset": [0, 2, 4, 5, 7, 26, 32, 33, 36, 37, 40, 41, 80, 83, 89, 91, 92, 111, 121, 128, 140, 161, 166, 190, 193, 203, 209, 222, 274, 276, 277], "dataset_paramet": [89, 90, 91, 92, 108], "datasset": 0, "date": [29, 276], "dd": 276, "ddp": 166, "ddp_spawn": 91, "de": [0, 17, 37, 80, 83, 91], "deal": [37, 274], "debug": [91, 187, 249], "decai": [89, 90, 91, 92, 108, 166], "decod": [0, 5, 7, 14, 33, 37, 79, 89, 90, 91, 92, 108, 111, 121, 140, 161, 166, 172, 189, 190, 193, 200, 203, 274, 275], "decode_autoregress": 89, "decode_on": 89, "decoded_index": 37, "decoder_cat": [7, 37, 172], "decoder_cont": [7, 37, 89, 172], "decoder_covariate_s": [140, 146, 147, 190, 203], "decoder_length": [0, 37, 89, 91, 95, 111, 161, 166], "decoder_output": 89, "decoder_output_dim": [190, 200], "decoder_target": 37, "decoder_vari": 92, "decoder_x_t": [144, 146, 147], "decodermlp": [0, 122, 123], "decompos": 118, "decomposit": [114, 118, 128, 140, 222], "decomposition_kernel": 222, "decor": 226, "deduc": 91, "deduce_default_output_paramet": [91, 190], "deep": [3, 4, 7, 278], "deepar": [72, 110, 112, 113], "deepconvexflow": 45, "deepconvexnet": 47, "deepcopi": 229, "deepvar": [0, 72, 111], "def": [0, 89, 91], "default": [0, 4, 7, 9, 11, 13, 14, 17, 28, 32, 33, 37, 41, 55, 56, 57, 58, 59, 60, 61, 62, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 103, 105, 108, 111, 113, 116, 118, 121, 123, 128, 130, 140, 142, 152, 155, 156, 157, 161, 163, 166, 168, 170, 178, 181, 187, 190, 193, 195, 197, 203, 205, 207, 209, 211, 212, 213, 214, 215, 216, 218, 222, 224, 233, 250, 260, 262, 264, 265, 268, 269, 274, 277, 278], "default_deps_to_show": 252, "default_loss": 91, "defin": [0, 9, 11, 17, 36, 37, 47, 52, 57, 58, 59, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 85, 91, 103, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 152, 157, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218, 274, 276], "degre": 128, "dehoyosb": 0, "delet": 0, "deliv": 190, "delta": [211, 214, 215, 217], "demand": [29, 37, 274], "denot": [37, 41, 90, 92, 190, 203, 274], "dens": [189, 193], "dep": [0, 250], "depend": [14, 17, 18, 91, 140, 152, 153, 190, 203, 209, 231, 232, 237, 241, 242, 244, 245, 246, 250, 252, 257, 275, 277, 278, 279], "dependabot": 0, "deploy": 277, "deps_info": 250, "deriv": [55, 58, 59, 62, 73, 76, 77, 78, 79, 80, 81, 82, 83, 85, 91], "descript": [17, 46], "design": [189, 203, 209, 222], "det": [12, 15, 16, 48], "detail": [0, 45, 46, 58, 91, 276, 277, 278], "determin": [0, 4, 9, 11, 13, 14, 17, 18, 37, 41, 71, 89, 91, 92, 153, 157, 187, 190, 262, 274], "determinist": 91, "dev": 278, "develop": [0, 252, 278], "deviat": [37, 92], "devic": [0, 71, 89, 91, 155, 156, 157, 219, 266], "deviceobjtyp": 266, "devid": 91, "dg": 46, "diagnos": [89, 90, 91, 92, 108, 128, 140, 166], "diagon": 72, "dict": [0, 4, 7, 9, 11, 17, 18, 32, 33, 37, 41, 52, 59, 65, 79, 80, 81, 83, 89, 90, 91, 92, 93, 96, 99, 105, 108, 111, 113, 116, 118, 121, 123, 128, 130, 140, 142, 152, 161, 163, 166, 168, 170, 172, 184, 187, 190, 193, 195, 197, 203, 205, 207, 209, 222, 224, 229, 234, 250, 251, 261, 266, 270, 274], "dictionari": [4, 7, 9, 11, 17, 18, 32, 33, 37, 41, 52, 65, 89, 90, 91, 92, 96, 99, 105, 108, 111, 113, 118, 121, 123, 130, 140, 142, 152, 161, 163, 166, 168, 170, 172, 190, 193, 195, 203, 207, 234, 235, 255, 266, 270, 274], "diff": 38, "differ": [0, 14, 32, 37, 38, 91, 140, 244, 245, 278], "diffus": 193, "dim": [45, 89, 91, 97, 193, 258, 265], "dimenion": 59, "dimens": [0, 39, 45, 47, 57, 58, 61, 67, 69, 70, 71, 72, 73, 74, 91, 97, 111, 152, 166, 178, 193, 200, 209, 211, 212, 213, 215, 218, 258, 260, 265, 268, 273], "dimension": [46, 190, 193, 200], "directli": [37, 62, 69, 89, 91, 257, 271, 276, 278], "directori": [91, 111], "disabl": [0, 46, 91], "discov": 65, "discuss": 278, "disk": [0, 37, 91, 93, 111, 278], "distribut": [7, 9, 11, 17, 37, 43, 45, 46, 48, 57, 61, 67, 68, 69, 70, 71, 72, 73, 74, 83, 89, 91, 111, 250, 274, 278], "distribution_argu": 57, "distribution_class": [57, 67, 70, 71, 72, 73, 74], "distribution_projector": 89, "distributionloss": [61, 67, 69, 70, 71, 73, 74, 111], "dlinear": [115, 116], "dm": 91, "do": [0, 7, 37, 41, 59, 91, 140, 166, 203, 274, 275, 276, 277, 278, 280], "doc": [227, 278, 280], "docstr": [0, 278], "document": [58, 91, 274, 275, 278, 279], "doe": [0, 33, 37, 41, 56, 62, 166, 274, 275], "doesn": 0, "domplex": 0, "don": [7, 91], "done": [0, 89, 90, 91, 92, 108, 128, 140, 166, 278], "dot": 181, "doubl": [0, 153], "down": [0, 89, 90, 91, 92, 108, 166], "download": [0, 7, 27, 276, 278], "downsampl": [37, 140, 274], "downsample_frequ": [140, 146], "draw": [47, 57, 61, 69, 89, 111], "drawn": [46, 47], "drive": 0, "drop": [0, 32, 33, 37], "drop_last": [32, 33], "dropout": [111, 121, 125, 128, 132, 133, 134, 135, 136, 140, 145, 146, 147, 155, 156, 157, 161, 166, 172, 175, 176, 177, 178, 181, 184, 187, 190, 193, 199, 200, 203, 209, 212, 213, 215, 216, 217, 222, 276], "dropout_categor": [0, 37], "dropout_r": 193, "dropout_rang": 187, "dsipt": 191, "dtype": [37, 41, 155, 156, 157, 274], "dual": 62, "due": 0, "dump": 91, "duplic": [155, 156, 157], "dure": [89, 90, 91, 92, 99, 105, 108, 111, 118, 121, 128, 140, 161, 166, 172, 190, 203, 209, 222, 280], "dx": [12, 15, 16], "dy": [12, 15, 16], "dynam": [89, 91, 152, 222, 247], "dz": 46, "e": [9, 11, 13, 14, 17, 18, 28, 37, 41, 46, 47, 57, 61, 73, 80, 83, 85, 89, 90, 91, 92, 99, 108, 111, 113, 121, 123, 128, 130, 140, 142, 152, 153, 161, 163, 166, 168, 170, 190, 193, 195, 203, 207, 234, 250, 266, 269, 274, 275, 278, 279], "e501": 4, "e_lay": [203, 209], "each": [0, 4, 5, 7, 9, 11, 13, 14, 17, 37, 41, 46, 47, 56, 60, 89, 90, 91, 96, 111, 113, 118, 123, 130, 140, 142, 153, 163, 168, 170, 184, 195, 207, 209, 274], "earli": 276, "early_stop": 0, "early_stop_callback": 276, "early_stop_threshold": [275, 276], "earlystop": [0, 276], "eas": [276, 277, 278, 279], "easili": [91, 279], "eava": 0, "edit": 280, "eeach": 28, "effect": [9, 11, 13, 14, 17, 37, 274], "effici": [37, 185, 267, 274], "efficient_comput": 258, "either": [9, 11, 17, 89, 91, 152, 153, 157, 159, 160, 222, 257, 263, 275, 278], "element": [0, 11, 13, 14, 17, 89, 103, 257], "els": [89, 91], "emb": 193, "embed": [90, 92, 111, 121, 140, 152, 153, 161, 166, 190, 193, 200, 203, 209, 212, 213, 218, 262], "embed_typ": [203, 212], "embedding_dim": 153, "embedding_label": [90, 92, 111, 121, 140, 161, 166, 190, 203], "embedding_pad": [90, 92, 111, 121, 140, 152, 161, 166, 190, 203], "embedding_s": [90, 92, 111, 121, 140, 152, 161, 166, 190, 203], "embeddingbag": [153, 166], "empir": 262, "emploi": [140, 203, 209], "empow": [203, 209], "empti": [89, 90, 91, 111, 152, 153, 161, 229, 230], "en": [37, 91, 258], "enabl": [0, 46, 91, 152, 278], "enable_metadata_rout": [9, 11, 13, 14, 17], "enc_in": [203, 209], "encod": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 37, 46, 58, 65, 67, 69, 70, 71, 72, 73, 74, 79, 90, 91, 92, 111, 121, 140, 155, 156, 157, 161, 166, 172, 189, 190, 193, 200, 203, 209, 213, 215, 222, 274, 275], "encoder_cat": [7, 37, 172], "encoder_cont": [7, 37, 89, 91, 172], "encoder_covariate_s": [140, 146, 147, 190, 203], "encoder_i": [146, 147], "encoder_length": [0, 37, 79, 89, 166, 274], "encoder_mask": 146, "encoder_target": [37, 79], "encoder_vari": 92, "encoder_x_t": [144, 146, 147], "encoderdecoderdatamodul": 193, "encodernorm": [0, 4, 7, 37, 80, 83, 274], "encount": [89, 90, 91, 92, 108, 166], "end": [0, 38, 89, 91, 93, 166], "endogen": [203, 209, 213], "endogenous_var": 209, "energi": [45, 46, 47, 71], "energy_scor": [46, 47], "enforce_sort": [89, 157], "enh": [0, 278], "enhanc": [166, 222, 277, 278], "ensembl": 128, "ensur": [0, 37, 193, 209, 268, 275, 278, 279], "entir": [9, 276], "entri": [9, 11, 17, 37, 89, 90, 91, 92, 96, 108, 140, 155, 156, 157, 166, 260, 274], "entropi": 76, "environ": [0, 250, 252], "eol": 0, "epoch": [4, 91, 93, 111, 166, 187], "epoch_end": 0, "epoch_mean": 91, "epres": 200, "equal": [37, 83, 97, 140, 222, 268], "equip": 45, "equival": [89, 90, 91, 92, 108, 166, 187, 267], "error": [0, 9, 11, 13, 14, 17, 62, 77, 79, 81, 85, 91, 108, 233, 279], "errorbar": 0, "es_num_sampl": [46, 47, 71], "es_sampl": 47, "estim": [9, 11, 13, 14, 17, 45, 71], "estimate_logdet": [45, 71], "etc": [2, 37, 91, 193, 203, 209, 277, 278], "eugenio": 0, "eval": 91, "evalu": [62, 222], "even": [38, 279], "event": 187, "event_shap": 46, "everi": [4, 37, 47, 68, 91, 125, 128, 132, 133, 134, 135, 140, 144, 145, 146, 147, 148, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 193, 199, 211, 212, 213, 214, 215, 216, 217, 218, 274, 278], "everth": [37, 274], "ewth": 0, "exact": [45, 62], "exactli": 153, "exampl": [0, 27, 28, 29, 30, 37, 56, 80, 83, 89, 91, 108, 274, 279], "example_imag": 91, "except": [0, 37, 274], "exclud": [0, 92], "execut": [252, 277], "exist": [0, 9, 11, 13, 14, 17, 37, 91, 240, 274], "exogen": [0, 203, 209], "exogenous_var": 209, "exp": [9, 11, 16, 17, 18, 28, 80, 83], "expand": 0, "expand_static_context": 166, "expans": 128, "expansion_coefficient_length": 128, "expect": [37, 91, 157], "experi": 91, "experiment": [0, 4, 40, 104, 278], "experimentwrit": 0, "experimment": 3, "expert": 278, "explan": 0, "explicit": 0, "explicitli": [0, 56], "explod": 91, "expm1": [9, 11, 17], "exponenti": [28, 80, 83, 222], "exptransform": 10, "extend": [0, 222], "extens": 280, "extra": [0, 37, 58, 89, 91, 270, 278], "extra_attribut": 270, "extra_repr": 58, "extract": [91, 92, 193], "extract_featur": 92, "extrem": [37, 274], "f": [41, 91, 186, 276, 278], "f2": 186, "factor": [89, 90, 91, 92, 108, 128, 140, 166, 203, 209, 217, 267], "fail": [0, 37, 236, 274], "failur": [0, 89, 90, 91, 92, 108, 128, 140, 166], "fallback": [140, 166], "fals": [4, 5, 7, 9, 11, 13, 14, 17, 28, 32, 33, 37, 45, 46, 48, 55, 56, 60, 62, 71, 89, 90, 91, 92, 93, 108, 111, 118, 128, 132, 137, 140, 153, 155, 156, 157, 166, 175, 177, 182, 183, 187, 190, 217, 260, 263, 265, 274, 276], "faq": 0, "far": [166, 275], "fast": 267, "fast_dev_run": [91, 111, 275], "fastai": 262, "faster": 275, "favicon": 0, "favourit": 276, "fdel": 227, "featur": [4, 7, 37, 41, 91, 92, 118, 172, 190, 193, 200, 203, 209, 212, 213, 216, 222, 233, 274, 278], "fed": [89, 91, 222], "feed": 209, "feedback": 0, "feedforward": 215, "fetch": 278, "few": 153, "fftpack": 267, "fget": 227, "fi": 41, "field": [91, 111], "fig": 276, "figur": [0, 37, 89, 91, 92, 128, 140, 166, 278], "file": [0, 27, 43, 91, 269, 280], "filenam": 37, "fill": [37, 38, 89, 90, 92, 97, 153, 190, 203, 274, 275], "fillvalu": 186, "filter": [0, 37, 269], "filter_func": 37, "final": 118, "find": [276, 278], "finder": [187, 275], "finish": 275, "finit": [0, 39], "first": [0, 4, 9, 13, 14, 17, 33, 37, 38, 41, 56, 58, 59, 60, 67, 69, 70, 71, 72, 73, 74, 89, 90, 91, 92, 103, 108, 111, 113, 123, 130, 142, 152, 161, 163, 166, 168, 170, 190, 193, 195, 203, 207, 259, 268, 272, 274, 275, 276, 278], "first_hidden_st": 89, "first_target": 89, "fit": [0, 4, 7, 9, 11, 13, 14, 17, 37, 166, 274, 276], "fit_transform": [11, 14], "fix": [153, 203, 212, 275, 278], "fkirali": 0, "flag": 0, "flat_categor": 37, "flatten": 216, "flexibl": [0, 154, 157, 277], "float": [0, 4, 7, 28, 37, 45, 46, 47, 56, 57, 58, 59, 60, 61, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 108, 111, 121, 125, 128, 140, 145, 147, 153, 155, 156, 157, 161, 166, 172, 175, 176, 177, 178, 181, 184, 187, 190, 193, 199, 200, 203, 209, 212, 213, 215, 216, 217, 222, 268, 269, 274], "flow": [45, 46, 47, 89, 90, 91, 92, 108, 128, 140, 166], "fly": [37, 274], "fn": 0, "fname": [27, 37], "fnhirwa": 0, "focu": 278, "foercast": [87, 106], "folder": [187, 278], "follow": [0, 7, 89, 90, 91, 92, 128, 161, 277, 278, 281], "fong": 0, "forc": 14, "forec": 203, "forecast": [0, 4, 37, 41, 42, 43, 46, 49, 50, 51, 52, 53, 59, 62, 63, 64, 66, 69, 71, 75, 84, 86, 89, 90, 91, 92, 99, 100, 101, 102, 103, 105, 108, 109, 110, 111, 114, 118, 126, 127, 128, 138, 139, 140, 164, 165, 166, 172, 189, 190, 193, 201, 203, 209, 220, 222, 225, 250, 253, 274, 275, 276, 279], "forecast_length": [132, 133, 134, 135, 137], "forecast_s": 144, "forecast_theta": 144, "forg": [276, 277, 278], "fork": 0, "form": [37, 111, 121, 140, 161, 166, 258], "format": [0, 7, 234, 270], "former": [47, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218], "formula": [47, 262], "forward": [0, 9, 11, 17, 18, 37, 47, 55, 56, 60, 62, 68, 80, 83, 90, 91, 92, 99, 105, 108, 111, 118, 121, 125, 128, 132, 133, 134, 135, 140, 144, 145, 146, 147, 148, 152, 153, 157, 161, 166, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 193, 199, 200, 203, 209, 211, 212, 213, 214, 215, 216, 217, 218, 222, 274, 275], "found": 281, "fourier": 267, "frame": 41, "framework": 278, "free": [91, 278], "freez": 275, "freq": [4, 203, 212], "frequenc": [4, 28, 140, 166, 203, 212, 269], "from": [7, 14, 28, 31, 32, 33, 37, 46, 47, 57, 58, 61, 69, 73, 80, 83, 89, 90, 91, 92, 105, 108, 111, 118, 121, 128, 140, 161, 166, 190, 193, 199, 203, 209, 222, 232, 236, 247, 249, 252, 262, 264, 267, 274, 275, 276, 278, 279], "from_dataset": [37, 89, 91, 92, 111, 121, 128, 140, 161, 166, 190, 203, 222, 274, 276], "from_paramet": 37, "fromkei": 0, "front": 275, "fset": 227, "full": [37, 91, 217, 274, 278], "fulli": [71, 119, 120, 128], "func": [249, 257], "function": [0, 4, 8, 9, 11, 16, 17, 18, 26, 36, 37, 44, 45, 46, 47, 54, 55, 56, 58, 60, 68, 71, 88, 89, 90, 91, 92, 99, 105, 108, 111, 118, 121, 125, 128, 131, 132, 133, 134, 135, 140, 143, 144, 145, 146, 147, 148, 154, 157, 161, 166, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 193, 199, 203, 209, 211, 212, 213, 214, 215, 216, 217, 218, 228, 232, 238, 249, 253, 256, 257, 269], "further": [46, 57, 91, 274, 275, 276, 279], "fusion": [0, 164, 165, 166, 173, 187], "futur": [37, 41, 89, 91, 118, 166, 190, 193, 200, 209, 274, 275, 278], "future_cov_dim": 200, "g": [0, 9, 11, 13, 14, 17, 18, 37, 41, 46, 47, 73, 80, 83, 89, 90, 91, 92, 99, 108, 121, 128, 152, 161, 166, 190, 193, 203, 234, 250, 266, 269, 274, 275, 279], "gamma": 83, "gap": [37, 274], "gasthau": 46, "gate": [176, 222], "gatedresidualnetwork": 184, "gaussian": 28, "gbilleypeco": 0, "gelu": [203, 209], "gener": [28, 37, 46, 89, 91, 108, 111, 128, 140, 190, 274, 276, 277, 278], "generalis": 0, "germankoch": 0, "get": [0, 11, 14, 37, 52, 56, 60, 65, 91, 103, 113, 116, 123, 130, 142, 152, 158, 163, 168, 170, 195, 197, 205, 207, 224, 234, 235, 274, 275, 277, 278], "get_attention_mask": 166, "get_base_test_param": [113, 123, 130, 142, 163, 168, 197, 205, 224], "get_cl": [52, 65, 103, 113, 116, 123, 130, 142, 163, 168, 170, 195, 197, 205, 207, 224], "get_embedding_s": 152, "get_encod": 65, "get_group": [32, 33], "get_mask": 0, "get_metadata": 41, "get_metric_test_param": [52, 65], "get_norm": 11, "get_paramet": [0, 11, 13, 14, 17, 37], "get_test_param": 103, "get_test_train_param": [116, 170, 195, 207], "get_transform": [18, 37], "git": [0, 278], "github": [0, 277, 278, 281], "give": [85, 91, 255, 256], "given": [9, 11, 12, 13, 14, 15, 16, 17, 37, 57, 91, 111, 152, 161, 269, 274], "global": [91, 203, 209], "glorot_norm": 140, "glorot_uniform": 140, "go": [61, 91, 278], "goal": 277, "goe": 91, "good": [91, 166, 262], "gpu": [0, 91, 275, 276, 277, 278], "grad": 0, "gradient": [0, 45, 46, 47, 89, 90, 91, 92, 108, 128, 140, 166], "gradient_clip": 0, "gradient_clip_v": 276, "gradient_clip_val_rang": 187, "graph": 256, "great": 275, "greater": [37, 83, 89], "greatli": 278, "grid": 91, "group": [0, 11, 13, 14, 32, 33, 37, 41, 90, 92, 152, 190, 203, 263, 274], "group1_norm": 11, "group2_norm": 11, "group_id": [37, 41, 274, 276], "group_nam": [11, 14], "groupbi": [37, 263, 274], "groupedsampl": 33, "groupnorm": [0, 13, 37, 274], "gru": [0, 89, 111, 154, 158, 159, 160, 161], "guid": [0, 9, 11, 13, 14, 17, 278], "guidanc": [0, 276, 277], "h": [4, 45, 203, 212], "h_i": [46, 47], "ha": [0, 9, 11, 13, 14, 17, 36, 37, 39, 58, 80, 83, 89, 91, 108, 128, 140, 152, 157, 274, 276], "had": 0, "half": 85, "hand": [37, 274], "handl": [0, 2, 7, 36, 58, 59, 65, 79, 154, 155, 156, 157, 209, 213, 277], "handle_no_encod": [155, 156, 157], "happen": [7, 91, 275], "hardwar": 7, "hash": 278, "have": [0, 18, 32, 33, 37, 41, 56, 80, 83, 91, 111, 153, 166, 274, 275, 277, 278, 279], "he_uniform": 140, "head": [166, 178, 193, 209, 211, 216], "head_dropout": 216, "heavili": 278, "help": [37, 274, 275, 278], "helper": [0, 253], "here": [37, 79, 91, 274, 279], "heurist": 140, "hidden": [46, 47, 69, 71, 89, 111, 121, 140, 155, 156, 157, 161, 166, 190, 193, 200, 209, 222], "hidden_continuous_s": [140, 166, 187, 276], "hidden_continuous_size_rang": 187, "hidden_s": [46, 47, 68, 69, 71, 111, 121, 125, 140, 145, 146, 147, 155, 156, 157, 161, 166, 172, 175, 176, 177, 184, 187, 190, 193, 199, 200, 203, 209, 222, 276], "hidden_size_rang": 187, "hidden_st": [46, 47, 89, 111, 155, 156, 157, 161, 222], "hiddenst": [155, 156, 157], "hierarch": 140, "high": [0, 277], "higher": [140, 222], "highest": 278, "hint": 0, "histogram": [37, 263, 264], "histor": [79, 209], "histori": [0, 37, 274, 277], "hit": [138, 139, 140, 146, 147], "hold": [0, 37, 274], "holidai": [37, 90, 92, 190, 203, 274], "hood": 37, "hook": [0, 47, 68, 91, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218], "horizon": [42, 46, 91, 128, 140, 166, 222, 277, 279], "hotfix": 0, "hourli": 203, "how": [9, 11, 13, 14, 17, 18, 37, 58, 71, 83, 91, 190, 274, 275, 276, 277, 278], "howev": [7, 37, 91, 274], "hparam": [89, 91], "html": [91, 276, 278], "http": [0, 91, 118, 193, 209, 222, 258, 276, 278], "huang": [45, 47], "hx": 157, "hyper": 0, "hyperparamet": [46, 47, 89, 90, 91, 92, 111, 121, 161, 166, 185, 187, 203, 222, 275, 276, 277], "hyperparamt": 0, "i": [0, 2, 4, 7, 9, 11, 13, 14, 17, 28, 29, 32, 33, 36, 37, 38, 39, 41, 45, 46, 47, 56, 57, 61, 62, 69, 71, 79, 80, 83, 85, 89, 90, 91, 92, 103, 105, 108, 110, 111, 113, 118, 121, 123, 128, 130, 140, 142, 152, 153, 155, 156, 157, 161, 163, 165, 166, 168, 170, 187, 189, 190, 193, 195, 200, 203, 207, 209, 222, 229, 230, 233, 234, 241, 242, 250, 257, 260, 264, 268, 274, 275, 276, 277, 278, 279, 280], "icnn_hidden_s": 71, "icnn_num_lay": 71, "id": [0, 11, 28, 37], "idea": 91, "ideal": [37, 274], "ident": [9, 17, 37, 274], "identifi": [29, 37, 38, 41, 91, 274, 275], "idx": [0, 89, 91, 128, 140, 166, 255], "iff": [37, 274], "iget": 255, "ignor": [0, 9, 11, 13, 14, 17, 47, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 153, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218, 265, 275], "ignore_na": 14, "iloc": 41, "imag": 91, "immuat": 256, "implement": [4, 7, 11, 16, 32, 57, 58, 88, 90, 91, 92, 104, 105, 118, 124, 131, 154, 166, 173, 186, 189, 190, 191, 199, 200, 203, 209, 210, 220, 258, 267, 276, 277, 279], "impli": 203, "implicit": 69, "implicitquantilenetworkdistributionloss": 0, "import": [28, 29, 37, 80, 83, 91, 108, 111, 121, 128, 161, 166, 236, 239, 240, 241, 242, 243, 244, 245, 246, 250, 252, 275, 276, 279], "importlib": 250, "improv": [37, 89, 90, 111, 140, 161, 274, 278], "in_featur": [145, 148], "inattent": 0, "includ": [0, 4, 7, 37, 89, 91, 105, 118, 128, 152, 190, 193, 200, 209, 274, 278], "inconsist": 0, "incorpor": 222, "incorrect": [0, 39], "increas": [0, 37, 41, 140, 274, 275, 279], "incur": 278, "independ": [61, 89], "index": [0, 4, 5, 7, 28, 32, 33, 37, 41, 57, 58, 67, 69, 70, 71, 72, 73, 74, 89, 91, 95, 99, 100, 105, 111, 128, 140, 153, 166, 193, 259, 272, 274, 275, 276, 277, 278], "indexes_to_exclud": 193, "indic": [18, 37, 38, 45, 89, 90, 91, 92, 111, 121, 140, 152, 153, 161, 166, 200, 274, 275], "individu": [118, 278], "inf": [166, 178, 181], "infer": [7, 37, 46, 91, 152, 264, 274, 275, 276], "infinit": [0, 39], "info": [4, 249], "inform": [4, 7, 18, 37, 58, 121, 193, 203, 209, 250, 251, 274, 277, 278], "inherit": [4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 32, 33, 37, 41, 46, 48, 52, 54, 57, 58, 61, 65, 89, 90, 91, 92, 93, 95, 101, 102, 103, 108, 113, 116, 123, 130, 142, 163, 166, 168, 170, 195, 197, 205, 207, 219, 224, 227, 247, 254, 255, 256, 275], "init": [14, 55, 56, 60, 62], "init_hidden_st": [155, 156, 157], "initi": [0, 7, 9, 32, 33, 45, 47, 52, 57, 58, 59, 61, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 91, 125, 128, 132, 133, 134, 135, 140, 144, 145, 146, 147, 148, 149, 153, 155, 156, 157, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 193, 209, 211, 212, 213, 214, 215, 216, 217, 218], "initial_hidden_st": [155, 156, 157], "initialis": [155, 156, 157, 193, 222], "initialparameterrepresentermixin": [14, 17, 91], "inplac": [0, 37], "input": [4, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 37, 45, 46, 47, 62, 65, 69, 89, 91, 92, 99, 105, 108, 111, 118, 128, 140, 152, 153, 155, 156, 157, 161, 166, 172, 190, 200, 203, 209, 212, 213, 216, 218, 222, 257, 258, 274], "input_chunk_length": [190, 200], "input_dim": [199, 200], "input_embedding_flag": 184, "input_projection_s": 222, "input_s": [0, 68, 69, 125, 136, 155, 156, 157, 174, 175, 176, 177, 180, 184, 222], "input_vector": [89, 111, 161], "insert": [91, 111, 161], "insid": [9, 11, 13, 14, 17, 91], "instal": [37, 71, 233, 234, 235, 241, 242, 250, 274, 277], "instanc": [0, 11, 37, 41, 46, 47, 65, 68, 95, 99, 103, 105, 113, 116, 118, 123, 125, 130, 132, 133, 134, 135, 142, 144, 145, 146, 147, 148, 163, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 197, 199, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 224, 274], "instanti": 276, "instead": [0, 9, 11, 13, 14, 17, 47, 59, 68, 89, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218, 278], "instruct": [277, 278], "insur": 83, "int": [4, 5, 7, 9, 28, 32, 33, 37, 38, 45, 46, 47, 57, 61, 68, 69, 71, 72, 89, 90, 91, 92, 93, 96, 99, 105, 108, 111, 118, 121, 125, 128, 136, 137, 140, 144, 145, 146, 147, 152, 153, 155, 156, 157, 161, 166, 172, 174, 175, 176, 177, 178, 180, 183, 184, 187, 190, 193, 199, 200, 203, 209, 211, 212, 213, 215, 216, 217, 218, 222, 255, 258, 260, 262, 263, 264, 265, 267, 268, 270, 274], "integ": [0, 7, 14, 37, 41, 89, 90, 92, 111, 121, 161, 190, 203, 264, 274], "integr": [0, 3, 4, 278], "intend": 278, "interest": [91, 113, 123, 130, 142, 163, 168, 170, 195, 207], "interfac": 0, "intern": [0, 45, 47, 68, 93, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 153, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 190, 211, 212, 213, 214, 215, 216, 217, 218, 222, 235], "interpol": [140, 166], "interpolation_mod": [140, 144, 146], "interpret": [37, 91, 128, 140, 166, 178, 277], "interpret_output": 166, "interv": [67, 91, 111], "intra": [203, 209], "introduc": 277, "intuit": 278, "invers": [9, 11, 17, 18, 37, 105, 260], "inverse_preprocess": 18, "inverse_torch": [9, 11, 17, 18], "inverse_transform": [11, 14, 17, 37], "invert": [48, 260], "io": 91, "ipynb": 0, "is_energy_scor": [45, 46], "is_numer": 14, "isinst": 89, "isol": 0, "isort": 0, "issu": [0, 39, 275, 278], "item": [14, 32, 89, 91, 255], "iter": [0, 7, 14, 32, 33, 45, 91, 111, 161], "its": [0, 55, 56, 60, 62, 71, 91, 128, 140, 166, 190, 209, 276], "iwhich": [37, 274], "j": 260, "jacktang": 0, "jacobian": [12, 15, 16, 48], "jakeforesei": 0, "jakeforsei": 0, "januschowski": 46, "jdb78": 0, "jit": 0, "job": 0, "jointli": [203, 209], "julian": 0, "jupyt": 0, "jurgispod": 0, "just": [45, 91, 257], "justinneumann": 0, "k": [41, 178, 181, 276], "kan": 46, "keep": [111, 275, 278, 279], "kei": [4, 7, 32, 33, 37, 89, 91, 111, 121, 140, 161, 166, 209, 211, 217, 234, 250, 263, 274], "kernel": [118, 222], "keword": 275, "keyerror": 14, "keyword": [0, 37, 62, 65, 91, 111, 193, 274], "kigawa": 0, "know": [89, 90, 111, 161], "knowledg": 278, "known": [7, 37, 41, 92, 108, 111, 121, 128, 140, 161, 166, 190, 203, 274], "krylov": 45, "kwarg": [0, 4, 13, 17, 37, 55, 56, 58, 59, 60, 62, 65, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 91, 92, 108, 111, 118, 121, 128, 140, 153, 155, 156, 161, 166, 187, 190, 193, 203, 209, 222, 269], "l": [91, 219], "l0z1k": 0, "label": [0, 14, 37, 76, 90, 92, 111, 121, 140, 161, 166, 203, 274], "labelencod": [14, 37, 274], "labels_hat": 91, "lag": [37, 89, 90, 111, 161, 274], "lag_posit": 89, "lagged_target": [37, 89], "lagged_target_posit": [89, 90], "lagged_vari": 37, "lagged_varnam": [37, 274], "lambda": [89, 90, 91, 92, 108, 166, 276], "lanczo": 45, "larg": [37, 274, 275, 279], "larger": [37, 89, 90, 91, 92, 108, 152, 166, 267, 274], "largest": [37, 267, 274], "last": [32, 33, 37, 41, 57, 58, 67, 69, 70, 71, 72, 73, 74, 108, 140, 216, 268, 273, 274], "last_encoder_target": 89, "later": 276, "latest": [0, 37, 91, 274], "latter": [47, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218], "layer": [0, 4, 47, 71, 111, 118, 121, 128, 140, 152, 161, 166, 190, 193, 200, 203, 209, 211, 214, 215, 216, 222], "lazywher": 186, "lead": [0, 9, 11, 17], "leak": 0, "leakag": 0, "leakyrelu": 140, "learn": [0, 3, 4, 7, 37, 89, 90, 91, 92, 99, 105, 108, 118, 128, 140, 166, 172, 187, 209, 250, 274, 275, 276, 277, 278], "learning_r": [89, 90, 91, 92, 108, 128, 140, 166, 203, 276], "learning_rate_rang": 187, "learningratelogg": 0, "learningratemonitor": [0, 276], "least": [89, 90, 91, 111, 161], "lecun_norm": 140, "left": 268, "len": [0, 37, 91, 260], "lenght": 260, "length": [0, 4, 5, 7, 9, 37, 38, 46, 59, 69, 71, 79, 89, 91, 103, 128, 140, 153, 154, 155, 156, 157, 166, 209, 213, 218, 260, 272, 274, 275, 277], "less": [140, 166], "level": [28, 46, 187, 203, 209, 277], "liabil": 278, "librari": [3, 71, 118, 250, 276, 278], "licens": 0, "life": 0, "lightn": [7, 58, 91, 187, 275, 276, 277, 278], "lightning_log": 187, "lightning_modul": 91, "lightningdatamodul": [4, 7], "lightningmetr": [56, 60, 62, 63, 166, 203], "lightningmodul": [89, 91, 92, 93, 99, 121], "like": [0, 4, 32, 33, 37, 91, 155, 156, 157, 193, 256, 273, 274, 278], "likelihood": [46, 57, 61, 67, 69, 71], "liklihood": 71, "limit": [0, 37, 274], "limit_train_batch": [187, 275, 276], "line": [0, 58, 269, 270], "linear": [16, 91, 114, 118, 140, 166, 176, 184], "link": [83, 278], "lint": 0, "linux": 278, "list": [0, 4, 5, 7, 9, 11, 13, 17, 37, 38, 39, 41, 47, 48, 56, 57, 58, 59, 60, 61, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 85, 89, 90, 91, 92, 96, 97, 99, 103, 105, 108, 111, 113, 116, 118, 121, 123, 128, 130, 140, 142, 145, 146, 147, 152, 161, 163, 166, 168, 170, 172, 190, 193, 195, 197, 203, 205, 207, 209, 214, 224, 230, 250, 252, 257, 259, 261, 266, 268, 270, 271, 274], "liter": [91, 93, 111, 222], "live": 27, "ll": 278, "load": [0, 37, 91, 193, 274, 276], "loader": [0, 35], "loc": 37, "local": [4, 7, 278], "local_rank": [4, 7], "locat": [0, 236, 252], "lock": 0, "log": [9, 11, 12, 15, 16, 17, 18, 46, 48, 58, 70, 71, 83, 89, 90, 91, 92, 99, 105, 108, 111, 118, 121, 128, 140, 161, 166, 172, 187, 203, 209, 275, 276, 277], "log1p": [9, 11, 17, 80, 83], "log_abs_det_jacobian": [12, 15, 16], "log_dict": 91, "log_dir": 187, "log_embed": 166, "log_gradient_flow": [89, 90, 91, 92, 108, 128, 140, 166], "log_interpret": [128, 140, 166], "log_interv": [89, 90, 91, 92, 108, 128, 140, 166, 275, 276], "log_metr": [91, 99], "log_predict": 91, "log_prob": [46, 48], "log_scal": [0, 92], "log_val_interv": [89, 90, 91, 92, 108, 128, 140, 166], "logdet": [45, 46], "logger": [0, 91, 275], "logging_metr": [89, 90, 91, 92, 99, 105, 108, 111, 118, 121, 128, 140, 161, 166, 172, 190, 203, 209], "logic": [91, 93], "logit": [0, 9, 11, 17, 67], "lognorm": 70, "long": [37, 89, 118, 153, 189, 190, 193, 222, 275], "long_term_forecast": 203, "longer": [0, 166, 275], "longtensor": [89, 90, 92, 157, 166, 260, 264], "look": [91, 275, 278], "lookback": [128, 140], "loop": [0, 91], "loss": [46, 47, 51, 52, 57, 59, 61, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 99, 105, 108, 111, 118, 121, 128, 140, 161, 166, 172, 193, 203, 209, 222, 276, 277, 278, 279], "loss0": 91, "loss1": 91, "lost": 0, "lot": [209, 275], "low": 72, "lower": [0, 9, 11, 17, 140], "lowrankmultivariatenorm": 72, "lr": [89, 90, 91, 92, 108, 166], "lr_find": [0, 275, 276], "lr_logger": 276, "lr_schedul": [99, 105, 118, 172, 209], "lr_scheduler_param": [99, 105, 118, 172, 209], "lru_cach": 235, "lstm": [0, 89, 111, 154, 158, 159, 160, 161, 166, 222], "lstm_layer": 166, "luke": 0, "lukemerrick": 0, "m": [4, 203], "m1": [0, 45], "m2": 45, "m4": 128, "maartensukel": 0, "mac": 0, "machin": 278, "maco": [0, 278], "madprogram": 0, "mae": [56, 91, 108, 111, 121, 128, 140, 161, 166, 190, 203, 279], "magicmock": 247, "mai": [37, 41, 278], "main": [0, 166, 250], "mainli": 278, "maintain": 278, "major": 234, "make": [37, 46, 72, 89, 91, 108, 166, 278], "make_grid": 91, "manag": [231, 232, 278], "mani": [0, 9, 11, 17, 190, 209], "manner": [32, 33, 89], "manual": [37, 274, 280], "map": [14, 16, 37, 41, 57, 67, 69, 70, 71, 72, 73, 74, 89, 90, 91, 92, 99, 108, 111, 121, 140, 152, 161, 166, 190, 203, 274], "map_x_to_distribut": [57, 67, 70, 71, 72, 73, 74], "mape": [111, 121, 128, 140, 161, 166, 190, 203], "marco": 0, "marcrb2": 0, "martinomensio": 0, "mase": [0, 111, 121, 128, 140, 161, 190], "mask": [59, 79, 155, 156, 157, 166, 178, 181, 217, 219, 260, 265], "mask_bia": [166, 178, 181], "mask_flag": 217, "mask_loss": 59, "match": [140, 273], "matplotlib": [0, 89, 91, 92, 128, 140, 166, 233, 275], "matrix": [72, 153, 222], "max": [9, 11, 15, 17, 85, 140, 264, 276], "max_characters_before_break": 270, "max_depth": 0, "max_embedding_s": 152, "max_encoder_length": [0, 7, 37, 166, 274, 276], "max_epoch": [187, 276], "max_lag": 37, "max_len": 218, "max_length": [0, 9, 38], "max_lr": 276, "max_prediction_length": [7, 37, 274, 276], "max_seq_len": 179, "max_siz": 262, "maximum": [0, 7, 9, 32, 33, 37, 38, 46, 69, 71, 187, 218, 262, 264, 274, 277], "mbelniak": 0, "mean": [0, 32, 33, 37, 41, 55, 57, 58, 59, 61, 67, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 91, 92, 108, 111, 128, 140, 166, 263, 265, 274, 279], "meant": 105, "mechan": [9, 11, 13, 14, 17, 190, 203, 209, 211, 215, 217, 219], "median": 275, "member": [4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 32, 33, 37, 41, 46, 48, 52, 65, 93, 95, 101, 102, 103, 113, 116, 123, 130, 142, 163, 168, 170, 195, 197, 205, 207, 219, 224, 227, 254, 255, 256], "memori": [0, 37, 91, 222, 274], "mercuriali": 0, "merg": [0, 278], "messag": 233, "meta": [9, 11, 13, 14, 17], "metadata": [0, 4, 5, 7, 9, 11, 13, 14, 17, 41, 103, 105, 118, 172, 193, 206, 207, 209, 274], "metadata_rout": [9, 11, 13, 14, 17], "method": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 32, 33, 37, 41, 45, 46, 47, 48, 52, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 93, 95, 99, 101, 102, 103, 105, 108, 111, 113, 116, 118, 121, 123, 125, 128, 130, 132, 133, 134, 135, 140, 142, 144, 145, 146, 147, 148, 152, 153, 155, 156, 157, 161, 163, 166, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 193, 195, 197, 199, 200, 203, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 222, 224, 227, 249, 254, 255, 256, 274, 275, 276], "method_kwarg": [9, 11, 17], "metric": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 99, 105, 108, 111, 118, 121, 128, 140, 161, 166, 172, 187, 209, 222, 277], "metric1": 0, "metric2": 0, "might": [83, 91, 111, 275, 278], "min": [0, 264, 276], "min_delta": 276, "min_encoder_length": [0, 7, 37, 274], "min_lag": 37, "min_length": [37, 38], "min_period": 134, "min_prediction_idx": [0, 7, 37, 274, 276], "min_prediction_length": [7, 37, 274], "mind": [111, 279], "mini": [32, 33], "minim": [0, 91], "minimum": [0, 7, 37, 38, 72, 89, 90, 91, 92, 108, 128, 166, 187, 264, 274], "minor": 234, "miss": [0, 7, 33, 37, 38, 41, 89, 97, 274, 275, 277, 278], "mix": [0, 166, 178, 181], "mixin": [18, 255, 256], "mlp": [0, 121, 123, 124, 125, 190], "mlstm": 222, "mm": 276, "mnt": [0, 278], "mock": [0, 236], "mode": [4, 55, 56, 60, 62, 89, 91, 93, 111, 128, 140, 153, 157, 268, 276], "mode_kwarg": [91, 93, 111], "model": [4, 7, 9, 11, 17, 37, 46, 63, 72, 80, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 115, 116, 118, 119, 120, 121, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 193, 195, 197, 199, 200, 201, 203, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 224, 274, 276, 277], "model_overview": 280, "model_path": 187, "modelsummari": 0, "modif": [0, 203, 209], "modifi": [91, 256, 279], "modul": [0, 2, 3, 4, 5, 7, 34, 35, 36, 42, 45, 46, 47, 50, 53, 58, 68, 86, 87, 88, 91, 99, 105, 109, 114, 118, 119, 125, 126, 131, 132, 133, 134, 135, 138, 144, 145, 146, 147, 148, 149, 150, 152, 153, 158, 159, 164, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 190, 191, 193, 199, 200, 201, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 231, 236, 237, 248, 250, 256, 269, 277], "modulelist": [89, 90, 91, 92, 108, 111, 121, 128, 140, 161, 166, 190, 203], "monitor": 276, "monoton": [0, 89, 90, 91, 92, 108, 166], "monotone_constaint": 166, "monotone_constraint": [89, 90, 91, 92, 108, 166], "month": 29, "more": [7, 46, 89, 90, 91, 92, 103, 105, 108, 140, 166, 274, 275, 277, 278], "most": [0, 89, 110, 111, 121, 128, 161, 278], "mostli": [0, 166, 279], "move": [0, 71, 118, 236, 266], "moving_avg": 118, "mp": 0, "mqf2": [0, 44, 46, 71, 276, 277, 278], "mqf2distribut": 48, "mseloss": 193, "much": 275, "mulipl": 60, "multi": [42, 58, 91, 166, 178, 209, 277, 279], "multi_target": 37, "multiembed": [0, 92], "multihorizon": 59, "multihorizonloss": 91, "multihorizonmetr": [0, 57, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 108, 121, 128, 140, 161, 166, 190, 203], "multiloss": 0, "multinorm": [0, 37, 274], "multipl": [0, 7, 9, 11, 13, 17, 32, 33, 37, 56, 84, 89, 90, 91, 92, 96, 108, 140, 153, 166, 190, 203, 247, 270, 274, 276, 277, 278, 279], "multipli": [28, 56, 60, 140], "multivari": [4, 28, 46, 61, 66, 71, 72, 89, 111, 203, 276, 277, 278], "multivariatedistributionloss": 72, "multivariatenormaldistributionloss": 111, "musleh": 222, "must": [37, 41, 91, 153, 274], "mutabl": 0, "mutat": [0, 235], "my": 275, "my_cool_pickable_object": 91, "my_first_paramet": 91, "myclass": [113, 123, 130, 142, 163, 168, 170, 195, 207], "mylightningmodul": 91, "mymodel": 91, "n": [126, 127, 128, 131, 138, 139, 140, 146, 147, 153, 262, 267, 278], "n_add_dec": 193, "n_add_enc": 193, "n_batch_sampl": [58, 67, 69, 70, 71, 72, 73, 74], "n_block": [140, 146], "n_decoder_step": 89, "n_decoder_time_step": [37, 91], "n_encoder_time_step": 37, "n_featur": 37, "n_group": 11, "n_head": [178, 203, 209, 211], "n_hidden_lay": [121, 125], "n_layer": [140, 146, 147], "n_loss_sampl": 69, "n_output": [91, 279], "n_paramt": [57, 61, 69], "n_plotting_sampl": 111, "n_quantil": [91, 108, 216], "n_sampl": [57, 61, 69, 89, 111, 121, 155, 156, 157, 161, 166, 279], "n_seri": 28, "n_smapl": [111, 161], "n_stack": 140, "n_target": 91, "n_theta": 147, "n_timestep": [57, 61, 69], "n_trial": 187, "n_validation_sampl": 111, "n_var": [213, 216], "na": [14, 37, 39, 274], "naive_level": [140, 146], "name": [0, 9, 11, 13, 14, 17, 18, 27, 32, 33, 37, 39, 41, 57, 58, 59, 61, 65, 67, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 89, 90, 91, 92, 103, 108, 111, 140, 152, 161, 166, 193, 203, 209, 234, 244, 245, 246, 250, 252, 256, 269, 270, 274], "named_paramet": 91, "namedtupl": [91, 255, 256], "nan": [14, 38, 97, 186, 265, 275], "nanencod": 0, "nanlabelencod": [0, 4, 7, 37, 274], "nativ": 140, "navig": 278, "nb_harmon": 134, "nbeat": [0, 129, 130, 132, 133, 134, 135, 136, 137, 140], "nbeatsblock": [133, 134, 135], "ndarrai": [9, 11, 13, 14, 17, 18, 37, 38, 91, 96, 111, 121, 137, 161, 166], "ndim": 39, "nearest": 140, "necessari": [2, 7, 13, 63, 79, 89, 90, 91, 92, 97, 108, 166], "necessarili": [37, 41, 274], "need": [0, 7, 47, 68, 73, 91, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 155, 156, 157, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218, 257, 276, 278], "neg": [0, 57, 61, 67, 69, 71, 73, 89, 90, 91, 92, 108, 166], "negativebinomi": 73, "netowrk": 108, "network": [37, 45, 46, 47, 55, 56, 57, 58, 59, 60, 61, 62, 67, 69, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 108, 109, 110, 111, 119, 120, 121, 128, 140, 155, 156, 157, 161, 166, 190, 193, 209, 222, 274, 276, 277], "network_input": 91, "neural": [45, 46, 128, 140, 274, 277], "new": [37, 58, 91, 95, 111, 121, 140, 152, 161, 166, 187, 193, 274, 275, 276, 277, 278], "newli": 4, "next": [38, 89, 91, 267], "nf": 216, "nhit": [128, 141, 142, 144, 145, 147, 148, 149], "nn": [0, 45, 47, 68, 89, 90, 91, 92, 99, 105, 108, 111, 118, 121, 125, 128, 131, 132, 133, 134, 135, 140, 144, 145, 146, 147, 148, 152, 153, 155, 156, 157, 158, 161, 166, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 190, 193, 203, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "no_encod": [155, 156, 157], "node_rank": [4, 7], "nois": [28, 193], "non": [0, 166, 209], "none": [0, 4, 7, 9, 11, 13, 14, 17, 37, 41, 45, 46, 47, 55, 56, 57, 58, 59, 60, 61, 62, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 85, 89, 90, 91, 92, 93, 95, 99, 105, 108, 111, 118, 121, 125, 128, 134, 136, 140, 152, 153, 155, 156, 157, 161, 166, 172, 174, 175, 176, 177, 178, 180, 181, 184, 186, 187, 190, 193, 200, 203, 209, 211, 214, 215, 216, 217, 222, 227, 229, 230, 250, 264, 265, 270, 274], "noqa": 4, "norm": [11, 121, 125, 222], "norm_lay": 214, "normal": [0, 4, 7, 9, 11, 13, 17, 28, 37, 46, 58, 67, 69, 70, 71, 72, 73, 74, 80, 83, 89, 91, 92, 105, 111, 121, 140, 157, 166, 200, 203, 214, 222, 274, 275], "normaldistributionloss": 111, "normalis": 0, "normalized_predict": [0, 91], "normalized_prediction_paramet": 89, "note": [9, 11, 13, 14, 17, 80, 83, 105, 118, 153, 190, 209, 252], "notebook": [0, 281], "noth": 275, "now": [0, 89, 276, 278], "np": [9, 11, 13, 14, 17, 18, 37, 38, 91, 96], "num": 41, "num_block": 128, "num_block_lay": [128, 132, 133, 134, 135], "num_decoder_lay": [190, 200], "num_encoder_lay": [190, 200], "num_input": 184, "num_lay": [155, 156, 157, 172, 222], "num_sampl": 47, "num_seri": 30, "num_stack": 128, "num_work": [4, 7, 91, 111, 276], "numba": [0, 37, 274], "number": [0, 4, 7, 28, 32, 33, 37, 45, 46, 47, 57, 59, 61, 69, 71, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 89, 90, 91, 92, 108, 111, 121, 128, 140, 152, 155, 156, 157, 161, 166, 178, 187, 190, 193, 200, 203, 209, 211, 212, 213, 216, 222, 252, 262, 263, 267, 270, 273, 275, 276, 279], "number_of_id": 37, "numel_batch": 47, "numer": [14, 41], "numpi": [0, 14], "o": 252, "obc": 41, "obj": [103, 229, 230, 257, 270], "object": [0, 9, 11, 13, 14, 17, 18, 32, 33, 37, 45, 46, 64, 65, 91, 103, 219, 229, 230, 236, 240, 254, 255, 256, 257, 261, 266, 271, 274, 276], "observ": [37, 41, 46, 47, 140, 274], "obtain": [46, 91, 92, 152, 166, 209], "occasion": 0, "octoberfest": [90, 92, 190, 203], "od": 193, "oexclud": 193, "off": 0, "offici": 278, "offset": 153, "often": [91, 110], "on_after_backward": 91, "on_epoch_end": [0, 91, 166], "on_fit_end": 166, "on_load_checkpoint": 91, "on_predict_batch_end": 93, "on_predict_epoch_end": 93, "on_save_checkpoint": 91, "on_test_epoch_end": 91, "on_train_epoch_end": 91, "on_validation_epoch_end": 91, "one": [0, 7, 37, 47, 61, 68, 80, 83, 91, 103, 110, 111, 121, 125, 132, 133, 134, 135, 140, 144, 145, 146, 147, 148, 161, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 193, 199, 211, 212, 213, 214, 215, 216, 217, 218, 250, 274, 278, 279], "one_off_target": [111, 161], "ones": [38, 91, 276, 277], "onli": [0, 4, 7, 9, 11, 13, 14, 17, 37, 41, 54, 62, 73, 89, 90, 91, 92, 108, 111, 113, 118, 121, 123, 128, 130, 140, 142, 153, 157, 163, 166, 168, 170, 187, 195, 207, 209, 274, 278, 279], "onto": [128, 140], "oom": 91, "op": 265, "open": 278, "oper": [37, 58, 91, 166, 265, 274, 278], "oppos": 71, "optim": [0, 45, 71, 89, 90, 91, 92, 99, 105, 108, 118, 128, 140, 166, 172, 187, 193, 209, 276, 279], "optim_config": 193, "optimize_hyperparamet": [0, 166], "optimizer_param": [89, 90, 91, 92, 99, 105, 108, 118, 166, 172, 209], "option": [0, 4, 7, 9, 11, 13, 14, 17, 28, 32, 33, 37, 41, 56, 57, 58, 59, 60, 61, 62, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 99, 105, 108, 111, 118, 121, 128, 140, 152, 153, 157, 161, 166, 172, 178, 181, 187, 190, 193, 200, 203, 209, 211, 214, 215, 216, 217, 222, 233, 250, 260, 262, 263, 265, 269, 274], "optuna": [0, 185, 187, 275, 277], "orangeh": 0, "order": [90, 91, 92, 111, 121, 140, 152, 161, 166, 278], "org": [0, 118, 193, 209, 222, 258, 276, 278], "origin": [0, 9, 11, 13, 14, 17, 37, 58, 67, 69, 70, 71, 72, 73, 74, 105, 166, 278], "orthogon": 140, "other": [4, 5, 9, 11, 13, 14, 17, 37, 56, 58, 99, 128, 274, 275, 278, 279], "otherwis": [4, 7, 9, 11, 13, 14, 17, 37, 39, 45, 46, 103, 111, 152, 222, 229, 230, 257, 274, 276, 277, 278], "our": [277, 278], "out": [0, 14, 72, 80, 83, 89, 90, 91, 92, 108, 111, 128, 140, 166, 265, 275, 276, 277, 278, 279], "out_featur": [145, 148], "outlier": [46, 279], "outperform": 128, "output": [7, 9, 11, 12, 15, 16, 17, 37, 45, 55, 56, 57, 58, 59, 60, 61, 62, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 93, 95, 96, 99, 105, 108, 111, 118, 121, 128, 140, 152, 153, 157, 161, 166, 172, 190, 200, 203, 216, 217, 222, 255, 256, 257, 274], "output_attent": 217, "output_chunk_length": [190, 200], "output_dim": [199, 200], "output_dir": [91, 93, 111], "output_nam": [91, 111], "output_s": [0, 91, 121, 125, 136, 140, 146, 147, 152, 161, 166, 172, 177, 180, 183, 190, 203, 222, 276], "output_to_predict": 89, "output_transform": [89, 90, 91, 92, 108, 166], "outputmixin": 95, "outsid": 0, "over": [37, 41, 46, 91, 108, 166, 193, 222, 265, 274], "overal": 62, "overfit": [37, 209, 274], "overflow": 275, "overhead": 0, "overlap": [4, 37, 209, 274], "overrid": [37, 58, 59, 62, 76, 77, 78, 79, 80, 81, 82, 83, 85, 91, 93], "overridden": [47, 65, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218], "overriden": [55, 58, 59, 62, 65, 91], "overview": 250, "overwrit": [0, 14, 37, 89], "overwritten": [37, 91, 280], "own": [0, 58, 91], "p": 83, "pack": [157, 259, 272], "packag": [0, 2, 34, 43, 49, 50, 51, 91, 99, 103, 112, 113, 115, 116, 122, 123, 129, 130, 141, 142, 162, 163, 167, 168, 169, 170, 194, 195, 196, 197, 204, 205, 223, 224, 225, 234, 235, 244, 245, 246, 250, 252, 275, 276, 277, 278], "packedsequ": [59, 79, 157, 259, 272], "pad": [157, 268], "page": [0, 277, 278], "panda": [0, 37, 41, 274], "pandoc": 0, "panel": 128, "pannel": [128, 140], "paper": [46, 199, 222], "param": [7, 113, 116, 123, 130, 142, 163, 168, 170, 195, 197, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 224], "paramet": [0, 4, 5, 7, 9, 11, 13, 14, 17, 18, 27, 28, 32, 33, 37, 38, 39, 41, 45, 46, 47, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 96, 97, 99, 103, 105, 108, 111, 113, 116, 118, 121, 123, 128, 130, 140, 142, 152, 153, 155, 156, 157, 158, 161, 163, 166, 168, 170, 172, 178, 181, 187, 190, 193, 195, 197, 200, 203, 205, 207, 209, 222, 224, 233, 250, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "parameter_set": 103, "parameterswher": 11, "parametr": 66, "paramref": 7, "paramt": 91, "park": 46, "pars": 0, "part": [0, 187], "partial": [0, 45, 46, 91], "particular": [0, 89, 274, 279], "particularli": [0, 9, 37, 274], "pass": [0, 9, 11, 13, 14, 17, 36, 37, 47, 68, 89, 90, 91, 92, 99, 105, 108, 111, 118, 121, 125, 128, 132, 133, 134, 135, 140, 144, 145, 146, 147, 148, 153, 157, 161, 166, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 193, 199, 200, 203, 209, 211, 212, 213, 214, 215, 216, 217, 218, 222, 257, 274], "past": [111, 161, 190, 193, 200], "patch": [203, 209, 213, 234], "patch_len": 213, "patch_length": [203, 209], "path": [27, 46, 269], "patienc": [89, 90, 91, 92, 108, 128, 140, 166, 276], "pattern": 7, "pavelzw": 0, "pd": [9, 11, 13, 14, 17, 18, 28, 29, 37, 41, 91, 274], "pdf": [118, 222], "pep": [0, 234, 250], "per": [37, 69, 71, 75, 84, 89, 90, 91, 92, 108, 128, 140, 166, 190, 222, 274], "per_sample_weight": 153, "percentag": [78, 82], "perez": 0, "perform": [37, 47, 68, 89, 90, 108, 111, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 161, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 199, 203, 209, 211, 212, 213, 214, 215, 216, 217, 218, 274], "period": [92, 128, 140, 269], "persist": [55, 56, 60, 62, 193], "persistence_weight": 193, "phoeenniixx": 0, "picnn": [45, 46, 47], "pietsjoh": 0, "pip": [71, 276, 277, 278], "pipelin": [0, 9, 11, 13, 14, 17], "pkg": [91, 99], "pl": 276, "pl_modul": 93, "place": [0, 58, 67, 69, 70, 71, 72, 73, 74, 275], "plain": 37, "plan": 0, "plate": 209, "plateau": [89, 90, 91, 92, 108, 166], "plateua": [89, 90, 91, 92, 108, 166], "pleas": [9, 11, 13, 14, 17, 278], "plot": [0, 37, 89, 91, 92, 111, 128, 140, 166, 275, 276, 277], "plot_attent": 166, "plot_interpret": [128, 140, 166], "plot_predict": [89, 91, 166], "plot_prediction_actual_by_vari": 92, "plot_random": 37, "plot_seasonality_and_generic_on_secondary_axi": 128, "plt": [37, 92, 128, 140, 166], "plu": [37, 274], "point": [0, 49, 56, 57, 58, 60, 62, 69, 73, 76, 77, 78, 79, 80, 81, 82, 83, 85, 103, 140, 190, 275, 279], "poisson": [80, 83], "poissonloss": 0, "polynomi": 128, "pool": 140, "pooling_mod": [140, 146, 147], "pooling_s": [140, 146, 147], "popular": [110, 278], "posit": [0, 7, 11, 37, 38, 89, 90, 91, 92, 108, 111, 121, 153, 155, 156, 157, 161, 166, 193, 218, 267], "possibl": [91, 128, 140, 166, 275, 278], "possibli": 267, "post": [18, 55, 56, 60, 62], "potenti": [0, 45, 63], "power": [46, 83, 165, 278], "pr": [0, 278], "pranavbhatp": 0, "pre": [0, 18, 278], "precis": [0, 166, 178, 181], "predefin": 264, "predicion": 92, "prediciton_length": 46, "predict": [4, 5, 7, 32, 33, 37, 46, 55, 56, 57, 58, 60, 61, 62, 65, 69, 71, 73, 76, 80, 83, 85, 89, 90, 91, 92, 93, 94, 99, 105, 108, 111, 118, 121, 128, 140, 161, 165, 166, 172, 190, 193, 209, 274, 275, 277, 279], "predict_dataload": [4, 7], "predict_depend": 91, "predict_kwarg": 93, "predict_mod": [0, 37, 274], "predict_step": [91, 99, 105], "prediction_horizon": 279, "prediction_kwarg": [89, 91, 111, 166], "prediction_length": [4, 5, 37, 46, 69, 71, 105, 118, 128, 140, 146, 147, 172, 203, 274], "prediction_output": [105, 118], "prediction_shap": 91, "predictor": [128, 140, 190], "prefer": [37, 274], "prefit": [37, 274], "prefittet": [37, 274], "prefix": 99, "prelu": 140, "prepar": [0, 4, 7, 65], "preparatori": 0, "prepare_data": 7, "prepare_data_per_nod": [4, 7], "prepare_test_input": 65, "preprocess": [7, 18], "prescal": 184, "present": [0, 7, 9, 11, 17, 37, 91, 111, 250, 274], "pretti": 252, "prevent": [0, 37, 91, 209, 256, 274, 278], "previou": [37, 274, 278], "previous": 0, "previous_target": 89, "price": [37, 274], "primarili": 274, "prime": 267, "print": [58, 249, 252, 270, 276], "privat": 0, "probabilist": [0, 69, 109, 110, 111], "probabilti": 37, "probabl": [37, 45, 57, 58, 59, 61, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 193, 274, 275], "probe": 91, "problem": [0, 36, 37, 274, 275, 279], "proce": [276, 277, 278], "process": [0, 7, 18, 36, 91, 140, 166, 193, 278], "produc": [91, 166, 222], "product": [37, 40, 41, 181, 274], "profession": 277, "profile_fnam": 269, "progress": [91, 111, 276], "proj_siz": [156, 157], "project": [0, 190, 193, 200, 211, 214, 222, 278], "projector": 89, "promot": [37, 41, 274], "propag": [155, 156, 157], "properti": [0, 4, 7, 11, 37, 46, 89, 90, 91, 92, 99, 140, 190, 203, 226, 227], "proport": [4, 7], "propos": [46, 278], "prototyp": 40, "provid": [2, 9, 11, 13, 14, 17, 18, 37, 47, 65, 152, 209, 274, 275, 276, 277], "prune": 187, "pruner": [0, 187], "ptf": [0, 105], "public": 0, "publish": [0, 278], "pull": 0, "purpos": [0, 62], "push": 278, "put": 91, "py": [0, 37, 128, 140, 190, 274], "pyproject": 0, "pyro": [258, 267], "pytest": 0, "python": [0, 250, 251, 252, 278], "pytorch": [4, 7, 9, 11, 17, 37, 41, 43, 49, 50, 53, 62, 63, 64, 71, 87, 91, 100, 101, 102, 103, 106, 121, 187, 190, 199, 200, 203, 209, 225, 250, 253, 274, 275, 276], "pytorch_forecast": [4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 41, 45, 46, 47, 48, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 105, 108, 111, 113, 116, 118, 121, 123, 125, 128, 130, 132, 133, 134, 135, 136, 137, 140, 142, 144, 145, 146, 147, 148, 149, 152, 153, 155, 156, 157, 158, 161, 163, 166, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 193, 195, 197, 199, 200, 203, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 224, 227, 229, 230, 233, 234, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279], "pytorch_lightn": 190, "pytorch_optim": [89, 90, 91, 92, 108, 166], "pytorch_rang": 0, "pyupgrad": 0, "q": [85, 178, 181], "quadrat": 45, "qualiti": 278, "quantil": [0, 9, 11, 17, 46, 47, 50, 51, 52, 56, 57, 58, 59, 60, 61, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 85, 91, 108, 111, 121, 140, 161, 166, 216, 276, 277, 278, 279], "quantileloss": [121, 140, 161, 166, 193, 276], "quantiles_kwarg": [89, 91, 111, 166], "queri": [152, 211, 217], "quick": 278, "quickli": [91, 276], "r": 193, "rais": [0, 9, 11, 13, 14, 17, 39, 62, 92, 233], "raise_error": 233, "random": [7, 28, 37, 274, 277], "randomize_length": [7, 37, 274], "randomli": [32, 33, 37], "rang": [0, 37, 57, 58, 59, 61, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 140, 166, 187, 190, 264, 274, 275], "ranger": [0, 89, 90, 91, 92, 108, 166], "rank": [4, 7, 72], "rate": [89, 90, 91, 92, 99, 105, 108, 118, 128, 140, 166, 172, 178, 181, 187, 200, 209, 212, 213, 215, 216, 217, 222, 275, 276], "rather": [32, 33, 111, 161], "ratio": 275, "raw": [91, 111, 190], "re": [18, 58, 80, 83, 89, 91, 276], "read": 278, "readm": 0, "readthedoc": [0, 91], "real": [37, 58, 67, 69, 70, 71, 72, 73, 74, 91, 92, 203, 209, 274, 277], "reason": [152, 275, 277], "recent": [0, 89, 128], "recip": [47, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218], "recommend": [7, 37, 91, 128, 274], "reconcil": [203, 209], "recurr": [109, 110, 111, 121, 159, 160, 161, 222], "recurrentnetwork": [0, 162, 163], "reduc": [0, 59, 83, 89, 90, 91, 92, 108, 128, 140, 166, 190, 279], "reduce_loss": 59, "reduce_lr_on_plateau": [99, 105, 118, 172, 209], "reduce_on_plateau_min_lr": [89, 90, 91, 92, 108, 166], "reduce_on_plateau_pati": [89, 90, 91, 92, 108, 128, 140, 166, 276], "reduce_on_plateau_reduct": [89, 90, 91, 92, 108, 166], "reduct": [0, 57, 58, 59, 61, 62, 67, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 108, 166, 263], "redund": [0, 166], "ref": 233, "refactor": [0, 236], "refer": [0, 4, 37, 41, 46, 118, 209, 233, 258, 274, 278], "reflect": 268, "reformat": 0, "regard": 91, "regardless": [128, 140, 187], "regist": [47, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218], "regress": [0, 83, 89, 278], "regular": [203, 209], "regularis": 0, "rel": [4, 5, 7, 37, 45, 274], "relat": [0, 7, 37, 92, 121, 203, 222, 274, 278], "relax": 0, "releas": 278, "relev": [9, 11, 13, 14, 17, 89], "reli": [0, 276], "reload": 7, "reload_dataloaders_every_n_epoch": 7, "relu": [9, 11, 17, 121, 125, 128, 140, 193, 203, 209, 215], "remain": [61, 200], "remot": 278, "remov": [111, 161, 193, 278], "remove_var": 193, "renam": 0, "render": 45, "repeat": [155, 156, 157], "repeat_interleav": [155, 156, 157], "repetit": [155, 156, 157], "replac": [0, 105, 140, 155, 156, 157], "replic": 268, "repo": [0, 45, 47, 278], "report": 0, "repres": 200, "represent": [58, 203, 209], "reproduc": 0, "request": [0, 9, 11, 13, 14, 17], "requir": [0, 2, 9, 11, 17, 45, 58, 62, 67, 69, 70, 71, 72, 73, 74, 89, 91, 111, 140, 152, 153, 190, 233, 278], "rescal": [0, 9, 11, 17, 18, 58, 67, 69, 70, 71, 72, 73, 74, 89, 91], "rescale_paramet": [57, 58, 67, 69, 70, 71, 72, 73, 74], "research": 277, "reset": [0, 37, 55, 56, 60, 62], "reset_overwrite_valu": 37, "reshap": 46, "residu": [177, 190, 193, 199, 200], "residualblock": 193, "respect": [190, 203, 209], "restor": 91, "result": [0, 46, 56, 60, 80, 83, 91, 111, 140, 187, 256, 279], "resum": [0, 187], "retain": [9, 11, 13, 14, 17], "retriev": 252, "return": [0, 4, 7, 9, 11, 13, 14, 17, 18, 27, 28, 29, 32, 33, 37, 38, 39, 41, 46, 47, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 96, 97, 99, 103, 105, 108, 111, 113, 116, 118, 121, 123, 128, 130, 140, 142, 152, 153, 155, 156, 157, 158, 161, 163, 166, 168, 170, 172, 187, 190, 193, 195, 197, 200, 203, 205, 207, 209, 222, 224, 233, 234, 236, 250, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272], "return_decoder_length": [91, 93, 111], "return_histogram": 263, "return_i": [91, 93, 111], "return_index": [91, 93, 111], "return_norm": [9, 11, 13, 14, 17], "return_x": [91, 93, 111], "reumar": 0, "revers": [0, 9, 11, 17, 18, 80, 83], "revert": 16, "review": 278, "richer": 222, "right": [268, 278], "rmse": [111, 121, 128, 140, 161, 166, 190, 203], "rnn": [46, 59, 79, 89, 111, 155, 156, 158, 161, 163, 259, 272], "rnn_layer": [111, 161], "rnnbase": 157, "robust": [0, 9, 11, 17, 46, 105, 222], "robustscal": [4, 7, 37, 274], "roll": 89, "root": 81, "rotat": [37, 274], "rout": [9, 11, 13, 14, 17], "row": [11, 37, 91, 111, 255, 274], "rsampl": 46, "rtol": 45, "rtype": [4, 267], "ruff": 0, "rule": 0, "run": [0, 47, 68, 91, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 199, 211, 212, 213, 214, 215, 216, 217, 218, 275, 278], "runner": 0, "rustyconov": 0, "ruthotto": 46, "s101": 0, "safoniuk": 0, "same": [0, 37, 62, 91, 103, 111, 128, 140, 153, 235, 246, 263, 274, 276, 278], "sampl": [0, 7, 29, 31, 32, 33, 37, 41, 46, 47, 48, 57, 59, 61, 69, 71, 89, 91, 111, 128, 140, 161, 166, 258, 259, 272, 274, 275, 279], "sample_img": 91, "sample_n": 0, "sample_path": 46, "sample_shap": 46, "sampler": [0, 7, 32, 33, 37], "sanity_check": 91, "save": [37, 55, 56, 60, 62, 91, 187, 269], "save_hyperparamet": 91, "scalabl": 222, "scalar": 222, "scale": [0, 4, 7, 8, 9, 11, 13, 14, 17, 18, 37, 46, 58, 67, 69, 70, 71, 72, 73, 74, 79, 89, 91, 92, 105, 166, 181, 203, 217, 274], "scale_by_group": 11, "scale_s": 37, "scaleddotproductattent": [166, 178], "scaler": [0, 4, 7, 11, 37, 274], "scenario": [0, 203], "schedul": [0, 89, 90, 91, 92, 99, 105, 108, 118, 166, 172, 193, 209, 276], "scheduler_config": 193, "schmitt": 0, "scienc": 277, "scikit": [0, 37, 250, 274], "scipi": [0, 267], "score": [45, 46, 47, 48, 57, 71, 181, 203, 217], "scriptmodul": [45, 47, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 153, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 211, 212, 213, 214, 215, 216, 217, 218], "search": 277, "season": [28, 37, 89, 90, 111, 118, 128, 161, 222, 274], "seasonalit": [37, 89, 90, 111, 161, 274], "second": [9, 11, 13, 17, 37, 38, 59, 90, 91, 92, 128, 152, 187, 190, 203, 259, 260, 269, 272, 275], "secondari": [128, 166], "section": [0, 7, 276, 277], "see": [0, 7, 9, 11, 13, 14, 17, 39, 45, 47, 58, 89, 91, 92, 111, 121, 161, 166, 203, 274, 275, 278, 279], "seed": 28, "seek": 275, "seem": 275, "select": [0, 37, 92, 140, 166, 252, 255, 274], "self": [0, 9, 11, 13, 14, 17, 37, 59, 89, 91, 92, 166, 215], "self_attent": 215, "selu": 140, "sens": 37, "sensit": 71, "seon82": 0, "separ": [9, 91, 118], "seq_length": 30, "sequenc": [0, 7, 9, 37, 38, 41, 111, 153, 154, 155, 156, 157, 161, 200, 218, 259, 272, 274], "sequence_length": 37, "sequentialflow": 47, "sequentialnet": 46, "seri": [0, 3, 4, 5, 7, 9, 11, 13, 14, 17, 18, 28, 31, 35, 37, 38, 41, 46, 69, 91, 99, 105, 114, 118, 128, 140, 166, 172, 189, 190, 193, 201, 203, 209, 212, 213, 218, 222], "serial": 0, "series_idx": 5, "serv": [4, 62], "set": [0, 7, 37, 46, 91, 92, 103, 111, 113, 116, 121, 123, 130, 140, 142, 163, 166, 168, 170, 178, 181, 187, 190, 195, 197, 203, 205, 207, 209, 222, 224, 275, 276], "set_config": [9, 11, 13, 14, 17], "set_fit_request": 14, "set_overwrite_valu": [37, 91], "set_transform_request": [9, 11, 13, 14, 17], "setup": [0, 4, 7, 276], "sfalkena": 0, "sgd": [0, 89, 90, 91, 92, 99, 105, 108, 118, 166, 172, 209], "shape": [0, 7, 37, 46, 57, 61, 69, 91, 105, 108, 118, 152, 153, 200, 260, 279], "share": [45, 47, 68, 88, 118, 125, 128, 132, 133, 134, 135, 140, 144, 145, 146, 147, 148, 153, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 190, 211, 212, 213, 214, 215, 216, 217, 218], "share_single_variable_network": 166, "share_theta": 132, "shared_weight": [140, 146], "shift": [37, 83, 89, 274], "short": [37, 274], "short_term_forecast": 203, "shortest": [37, 274], "should": [0, 9, 11, 13, 14, 17, 18, 37, 38, 41, 47, 55, 56, 57, 58, 59, 60, 61, 62, 68, 80, 83, 89, 90, 91, 92, 108, 111, 125, 128, 132, 133, 134, 135, 140, 144, 145, 146, 147, 148, 152, 153, 161, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 199, 203, 211, 212, 213, 214, 215, 216, 217, 218, 236, 274, 275, 278], "show": [89, 91, 111, 166, 270, 276], "show_future_observ": [89, 91, 166], "show_progress_bar": [91, 111], "show_vers": [0, 249], "shown": [128, 140], "shuffl": [4, 32, 33, 37], "side": 268, "sigma_init": 72, "sigma_minimum": 72, "sigmoid": 140, "signific": 278, "significantli": [89, 90, 91, 92, 108, 166], "silenc": 0, "silent": [47, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218], "similar": [0, 65, 140, 166, 190, 278], "similarli": 276, "simpl": [119, 120, 159, 160, 161], "simpli": [0, 91, 108, 275], "simultan": [90, 92, 190, 203], "sinc": [47, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218], "singl": [0, 4, 41, 46, 58, 59, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 91, 93, 152, 203, 255, 277], "single_variable_grn": 184, "size": [4, 7, 32, 33, 37, 46, 69, 71, 89, 90, 91, 92, 111, 118, 121, 140, 152, 161, 166, 184, 190, 193, 200, 203, 216, 222, 260, 262, 263, 267, 268, 275, 276, 279], "skbase": [100, 232, 236], "skew": 92, "skip": [91, 174, 175, 193], "skip_siz": [174, 175], "sklearn": [9, 11, 13, 14, 17, 37, 249, 250, 274], "sktime": [0, 232, 236, 249, 252, 278], "sku": 29, "slice": [0, 37, 255], "slide": [4, 37, 46, 274], "slow": [89, 90, 91, 92, 108, 166], "slstm": 222, "small": [9, 11, 17], "smaller": [32, 33, 83, 140], "smape": [56, 89, 90, 91, 92, 108, 111, 121, 128, 140, 161, 166, 190, 203, 222, 279], "smooth": 140, "snapshot": 278, "snumumrik": 0, "so": [0, 45, 89, 91, 278], "soft": [0, 278], "softplu": [9, 11, 16, 17, 140], "sohaib": 0, "sole": [128, 140, 190], "solv": 0, "some": [0, 9, 11, 13, 14, 17, 38, 155, 156, 157, 255, 274, 275], "someth": [91, 275], "something_cool_i_want_to_sav": 91, "sort": [0, 157], "sort_valu": [37, 274], "sourc": [0, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 37, 38, 39, 41, 45, 46, 47, 48, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 93, 95, 96, 97, 99, 101, 102, 103, 105, 108, 111, 113, 116, 118, 121, 123, 125, 128, 130, 132, 133, 134, 135, 136, 137, 140, 142, 144, 145, 146, 147, 148, 149, 152, 153, 155, 156, 157, 158, 161, 163, 166, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 193, 195, 197, 199, 200, 203, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 224, 227, 229, 230, 233, 234, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274], "space": [0, 9, 11, 17, 58, 67, 69, 70, 71, 72, 73, 74, 89, 90, 91, 92, 108, 166, 200], "span": 92, "spawn": 91, "special": [2, 9, 36, 37, 41, 65, 103, 274], "specif": [9, 11, 17, 37, 65, 91, 111, 274, 275, 277, 278], "specifi": [7, 71, 91, 153, 190, 193, 222, 278], "specifici": 278, "sped": [37, 274], "speed": [0, 275], "spell": 0, "sphinx": 0, "split": [4, 7], "sponsor": 0, "spot": 276, "sqrt": [37, 57, 58, 59, 61, 67, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82], "squar": 81, "squeez": 91, "stabil": [9, 11, 17, 222], "stack": [91, 128, 140, 200, 268, 275], "stack_sliding_view": 46, "stack_typ": 128, "stage": [4, 7, 91, 111], "standard": [0, 9, 11, 17, 37, 92, 278], "standardscal": [4, 7, 37, 274], "standarscal": [37, 274], "start": [0, 5, 7, 37, 38, 153, 193, 274, 275, 277, 278], "start_idx": 5, "state": [0, 7, 45, 46, 47, 55, 56, 58, 60, 62, 68, 89, 91, 111, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 153, 155, 156, 157, 161, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 203, 209, 211, 212, 213, 214, 215, 216, 217, 218, 277], "state_dict": [55, 56, 60, 62], "static": [4, 7, 14, 37, 41, 90, 91, 92, 111, 121, 128, 140, 152, 161, 166, 172, 190, 203, 274, 278], "static_categor": [37, 90, 92, 111, 121, 140, 161, 166, 190, 203, 274, 276], "static_categorical_featur": [7, 172], "static_continuous_featur": [7, 172], "static_cov_dim": 200, "static_hidden_s": [140, 146, 147], "static_r": [0, 37, 90, 92, 111, 121, 140, 161, 166, 190, 203, 274, 276], "static_s": [140, 146, 147, 190, 203], "static_vari": 92, "statist": [62, 91], "statsmodel": 0, "statu": 41, "std": 92, "step": [4, 37, 38, 75, 84, 89, 91, 99, 105, 111, 118, 128, 140, 161, 166, 190, 193, 200, 209, 222, 274, 278], "step_lr": [99, 105, 118, 172, 209], "step_output": 99, "still": [0, 9, 11, 17, 61, 278], "stop": [37, 187, 276], "stop_random": [37, 276], "store": [0, 41, 91, 276], "str": [4, 7, 9, 11, 13, 14, 17, 18, 27, 37, 39, 41, 57, 58, 59, 61, 62, 65, 67, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 96, 99, 103, 105, 108, 111, 118, 121, 128, 140, 144, 145, 147, 152, 157, 158, 161, 166, 172, 184, 187, 190, 193, 203, 209, 212, 215, 222, 233, 250, 261, 263, 265, 266, 268, 269, 270, 274], "strategi": [37, 91, 274, 275], "strict": 278, "strictli": 45, "stride": 4, "string": [0, 37, 58, 90, 92, 99, 105, 111, 118, 121, 128, 140, 161, 166, 172, 209, 250], "strongli": 276, "studi": [0, 187], "sub": [0, 2, 9, 11, 13, 14, 17], "sub_modul": [132, 133, 134, 135, 136, 137, 144, 145, 146, 147, 148, 149, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 200, 211, 212, 213, 214, 215, 216, 217, 218, 219], "subclass": [47, 65, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218], "submodul": [125, 243], "subnet": 193, "subsampl": 277, "subsequ": [37, 41, 274], "subseri": [37, 274], "subset": [37, 274], "subspac": 45, "successivehalvingprun": 187, "suggest": 276, "suit": [0, 278], "sum": [91, 92, 118, 152, 153, 166, 263, 265], "sum_": [46, 47], "sum_i": [46, 47], "summar": [0, 140, 166], "summari": 91, "super": 91, "support": [7, 33, 37, 62, 89, 99, 105, 118, 140, 153, 172, 190, 209, 278], "suppport": 0, "surpris": 0, "swiftli": 278, "switch": [0, 91], "symmetr": 82, "sync": 62, "synchornis": 33, "synchron": [0, 37], "synchronis": 33, "syntax": 0, "sys_info": 251, "system": [0, 249, 251, 278], "t": [0, 7, 89, 91, 128, 193], "tag": [103, 278], "taget": 0, "take": [9, 18, 37, 45, 47, 68, 80, 83, 89, 90, 91, 92, 108, 121, 125, 128, 132, 133, 134, 135, 140, 144, 145, 146, 147, 148, 161, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 199, 203, 211, 212, 213, 214, 215, 216, 217, 218, 265, 274, 275, 278, 279], "taken": [37, 153, 262], "tanh": 140, "target": [4, 7, 9, 11, 13, 17, 28, 37, 41, 52, 58, 59, 62, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 99, 105, 108, 111, 121, 128, 140, 161, 166, 190, 200, 203, 209, 216, 266, 274, 275, 276], "target_dim": [105, 118], "target_lag": [89, 90, 111, 161], "target_nam": [37, 91], "target_norm": [4, 7, 37, 80, 83, 274], "target_po": 89, "target_posit": [89, 92], "target_scal": [0, 9, 11, 13, 14, 17, 37, 58, 67, 69, 70, 71, 72, 73, 74, 89, 91, 105, 111, 161], "target_window": 216, "task": [37, 203, 274], "task_nam": 203, "tau": [211, 214, 215, 217], "tell": 91, "templat": 0, "tempor": [0, 164, 165, 166, 173, 187, 190, 193, 200, 203, 209], "temporal_decoder_hidden": [190, 200], "temporal_fusion_transform": [166, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187], "temporal_hidden_size_futur": [190, 200], "temporal_width_futur": [190, 200], "temporalfusiontransform": [0, 167, 168, 187, 276], "temporari": [0, 105], "tend": 279, "tensor": [0, 4, 9, 11, 13, 14, 17, 18, 37, 39, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 96, 97, 99, 105, 108, 111, 118, 121, 125, 128, 134, 135, 140, 144, 145, 147, 152, 153, 155, 156, 157, 161, 166, 172, 174, 178, 180, 184, 190, 193, 199, 200, 203, 209, 222, 258, 259, 260, 261, 263, 264, 265, 266, 268, 272, 273, 274, 279], "tensorboard": [128, 140, 166, 187, 276, 277], "tensorboardlogg": 0, "term": [37, 45, 46, 108, 118, 189, 190, 193, 222, 278], "termin": 278, "tesnor": 46, "test": [4, 7, 26, 37, 40, 52, 65, 91, 99, 103, 105, 113, 116, 118, 123, 130, 142, 163, 168, 170, 172, 195, 197, 205, 207, 209, 224, 239, 240, 241, 242, 243, 244, 245, 246, 247, 274, 276, 278], "test_acc": 91, "test_acc_": 91, "test_cas": 65, "test_dataload": [4, 7], "test_loss": 91, "test_loss_": 91, "test_safe_import": [239, 240, 241, 242, 243, 244, 245, 246, 247], "test_step": [7, 91, 99], "text": [16, 91], "tft": [0, 169, 170, 276], "th": 103, "than": [32, 33, 37, 89, 103, 140, 152, 166, 274, 275], "thedataset": 91, "thei": [0, 90, 92, 190, 203, 275, 279], "them": [7, 14, 47, 68, 91, 93, 103, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 157, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 211, 212, 213, 214, 215, 216, 217, 218, 268, 275, 278], "themodel": 190, "therefor": [80, 83, 153], "thereof": [37, 91], "thetas_dim": [132, 133, 134, 135], "thi": [0, 2, 4, 7, 9, 11, 13, 14, 17, 32, 33, 36, 37, 41, 45, 46, 47, 58, 59, 62, 65, 68, 72, 73, 80, 83, 88, 89, 90, 91, 92, 103, 105, 108, 118, 125, 128, 132, 133, 134, 135, 140, 144, 145, 146, 147, 148, 153, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 193, 199, 203, 209, 211, 212, 213, 214, 215, 216, 217, 218, 222, 233, 250, 256, 257, 274, 275, 278, 279, 280], "third": [152, 275], "those": [57, 153, 275], "threshold": 46, "threshold_input": 46, "through": [0, 37, 166, 274, 278], "throughout": 209, "throught": 91, "throw": 89, "thuml": [0, 118, 209], "tide": [0, 189, 190, 191, 194, 195, 196, 197, 199, 200], "time": [0, 3, 4, 5, 7, 9, 28, 31, 32, 33, 35, 37, 38, 41, 46, 61, 69, 75, 84, 89, 90, 91, 92, 99, 105, 108, 111, 114, 118, 128, 140, 152, 155, 156, 157, 161, 166, 172, 187, 189, 190, 193, 200, 201, 203, 209, 212, 213, 218, 222, 275, 276, 278], "time_idx": [28, 37, 41, 274, 276], "time_idx_first": 37, "time_idx_first_predict": 37, "time_idx_last": 37, "time_last": 37, "time_series_dataset": [4, 7], "time_step": 200, "time_varying_categoricals_decod": [90, 92, 111, 121, 140, 161, 166, 190, 203], "time_varying_categoricals_encod": [90, 92, 111, 121, 140, 161, 166, 190, 203], "time_varying_known_categor": [37, 274, 276], "time_varying_known_r": [37, 274, 276], "time_varying_reals_decod": [90, 92, 111, 121, 140, 161, 166, 190, 203], "time_varying_reals_encod": [90, 92, 111, 121, 140, 161, 166, 190, 203], "time_varying_unknown_categor": [37, 274, 276], "time_varying_unknown_r": [37, 274, 276], "timedistributedembeddingbag": 0, "timef": 203, "timeout": 187, "timepoint": [37, 274], "timeseri": [0, 2, 4, 5, 7, 28, 29, 36, 37, 38, 39, 40, 42, 86, 88, 89, 90, 91, 92, 108, 111, 121, 126, 127, 128, 138, 139, 140, 161, 164, 165, 166, 190, 203, 222, 225, 274, 275, 277, 278], "timeseriesdataset": [0, 31, 32, 33, 36, 80, 83, 89, 91, 92, 111, 121, 128, 140, 161, 166, 190, 203, 274, 275, 276], "timeseriesdatatyp": 37, "timeseriestyp": 37, "timestep": [7, 28, 37, 59, 89, 91, 108, 128, 166, 259, 272, 274], "timex": [0, 4, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219], "titl": [89, 91, 166, 278], "tj": 0, "tklerx": 0, "tmct": 0, "to_dataload": [37, 91, 274, 276], "to_network_output": [0, 91, 256], "to_predict": [56, 57, 58, 60, 69, 73, 76, 80, 83, 85, 89, 91, 108, 111, 166], "to_quantil": [56, 57, 58, 60, 69, 71, 76, 80, 85, 89, 91, 108, 111, 166], "togeth": [32, 37, 41, 90, 92, 111, 121, 140, 161, 166, 190, 203, 274], "token": [203, 209], "toler": 45, "toml": 0, "too": [37, 274, 275], "tool": 2, "top": [263, 278], "topic": 278, "torch": [0, 4, 7, 9, 11, 13, 14, 17, 18, 37, 39, 46, 55, 56, 57, 58, 59, 60, 61, 62, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 96, 97, 99, 105, 108, 111, 118, 128, 140, 152, 155, 156, 157, 166, 172, 190, 193, 200, 209, 258, 259, 260, 263, 265, 266, 268, 272, 273, 274, 276, 278], "torch_stabl": [276, 278], "torchmetr": [0, 62, 63], "torchmetricsusererror": 62, "torchnorm": [4, 7, 9, 11, 13, 37, 65, 274], "torchvis": 91, "total": [37, 59, 83, 193, 200, 263], "toward": [0, 277], "tpu": 91, "tqdm": 0, "trace": [0, 256], "tradit": 128, "train": [0, 4, 5, 7, 37, 46, 89, 90, 91, 92, 99, 105, 108, 111, 118, 121, 128, 140, 161, 166, 172, 178, 181, 187, 193, 203, 209, 222, 274, 276, 277, 278, 279], "train_dataload": [4, 7, 187, 276], "train_val_test_split": [4, 7], "trainabl": 183, "trainable_add": [174, 175, 180], "trainer": [0, 7, 91, 93, 111, 113, 116, 123, 130, 142, 163, 168, 170, 187, 190, 195, 197, 205, 207, 224, 275, 276], "trainer_kwarg": [91, 111, 187], "training_cutoff": 276, "training_epoch_mean": 91, "training_step": [91, 99], "training_step_output": 91, "transform": [4, 9, 11, 12, 13, 14, 15, 16, 17, 18, 37, 48, 67, 80, 83, 89, 90, 91, 92, 105, 108, 111, 121, 140, 161, 164, 165, 166, 173, 187, 190, 203, 209, 267, 274, 277], "transform_output": [0, 89, 91, 105, 108], "transform_valu": 37, "transformeddistribut": 48, "transformermixin": [14, 17], "transformermodel": 190, "transformmixin": [14, 17], "transpar": 0, "transport": 45, "treat": [153, 275], "treatment": 2, "trend": [28, 118, 128, 222], "tri": 7, "trial": 187, "triangular": 219, "tridiagon": 45, "trivial": [2, 274], "true": [0, 4, 7, 9, 11, 13, 14, 17, 37, 46, 57, 89, 91, 92, 108, 118, 121, 125, 128, 136, 140, 155, 156, 157, 166, 174, 180, 181, 187, 217, 233, 260, 265, 274, 275, 276], "trust": 0, "trze": 37, "tslib": [3, 4, 5, 104, 105], "tslibbasemodel": [118, 209], "tslibdatamodul": [5, 105, 118, 209], "tsmixer": 0, "tune": [0, 166, 186, 187, 275, 276, 277], "tuner": [0, 276], "tupl": [0, 4, 5, 7, 9, 11, 13, 14, 17, 37, 38, 46, 65, 79, 89, 90, 91, 92, 93, 99, 105, 111, 121, 134, 135, 137, 140, 144, 147, 152, 155, 156, 157, 161, 166, 178, 187, 190, 200, 203, 222, 256, 257, 261, 263, 266, 272, 274], "tupleoutputmixin": 91, "tutori": [26, 37, 274, 275, 276, 277], "tweak": 0, "tweedi": [0, 83], "twelv": [203, 209], "two": [0, 46, 57, 73, 128, 140], "txt": 269, "type": [0, 4, 9, 11, 13, 14, 17, 18, 27, 28, 29, 32, 33, 37, 38, 39, 41, 46, 47, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 96, 97, 99, 103, 105, 108, 111, 113, 118, 123, 128, 130, 140, 142, 152, 153, 155, 156, 157, 158, 161, 163, 166, 168, 170, 172, 187, 190, 193, 195, 197, 200, 203, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 222, 224, 228, 233, 234, 250, 251, 257, 259, 260, 262, 265, 268, 271, 272, 274, 278], "typic": [37, 89, 140, 190], "typo": 0, "u": 41, "unbias": 279, "unchang": [9, 11, 13, 14, 17, 39], "under": [37, 278], "underli": [0, 14, 37], "understand": [37, 91, 274, 275, 276], "understood": 37, "unfamiliar": 278, "unfold": 46, "uni": 66, "unifi": 0, "union": [4, 7, 9, 11, 13, 14, 17, 18, 37, 59, 79, 89, 90, 91, 92, 96, 99, 105, 108, 118, 121, 140, 152, 157, 158, 161, 166, 172, 187, 190, 209, 257, 259, 266, 268, 270, 272, 274], "uniqu": [41, 152], "unit": [67, 128, 132, 133, 134, 135, 140, 176], "univari": [128, 203], "univers": 45, "unknown": [0, 14, 37, 41, 274, 275], "unkown": 92, "unless": 7, "unnorm": [37, 91, 274], "unobserv": [37, 274], "unpack": 272, "unrealist": 275, "unrol": 46, "unscal": 37, "unseen": 0, "unsqueez": [89, 273], "until": 278, "unus": 14, "up": [0, 37, 38, 91, 97, 152, 166, 274, 275, 279], "updat": [9, 11, 13, 14, 17, 55, 56, 58, 59, 60, 62, 79, 108, 278], "update_kwarg": 37, "upgrad": 0, "upon": 276, "upper": [0, 9, 11, 17], "upstream": 278, "url": [0, 278], "us": [0, 4, 5, 7, 9, 11, 13, 14, 17, 18, 27, 37, 40, 41, 45, 46, 48, 56, 57, 60, 62, 69, 71, 72, 80, 83, 89, 90, 91, 92, 93, 99, 103, 105, 108, 110, 111, 113, 118, 121, 123, 128, 130, 140, 142, 152, 153, 155, 156, 157, 161, 163, 166, 168, 170, 172, 187, 190, 193, 195, 200, 203, 207, 209, 211, 212, 222, 229, 230, 233, 234, 250, 257, 268, 274, 275, 276, 277, 278, 279], "usag": [0, 278], "use_layer_norm": [190, 199, 200], "use_learning_rate_find": 187, "use_metr": [91, 108], "use_norm": 203, "user": [0, 9, 11, 13, 14, 17, 278], "usernam": 278, "usual": [89, 90, 91, 92, 108, 166, 278], "util": [0, 7, 9, 11, 13, 14, 17, 37, 91, 190, 227, 229, 230, 231, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273], "v": [0, 89, 90, 91, 92, 108, 128, 140, 166, 178, 181, 277, 278], "v1": 101, "v2": [0, 40, 102, 105, 191, 206, 209], "vakker": 0, "val": [91, 99], "val_acc": 91, "val_acc_": 91, "val_dataload": [4, 7, 187, 276], "val_loss": [91, 276], "val_loss_": 91, "valid": [0, 4, 5, 7, 37, 46, 89, 90, 91, 92, 99, 105, 108, 111, 113, 118, 123, 128, 130, 140, 142, 163, 166, 168, 170, 172, 187, 195, 207, 209, 274, 276], "validate_arg": [46, 48], "validation_step": [7, 91, 99], "valu": [0, 4, 7, 9, 11, 14, 17, 28, 32, 33, 37, 38, 39, 41, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 69, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 97, 99, 103, 105, 108, 111, 118, 121, 128, 140, 152, 153, 161, 166, 172, 190, 203, 209, 211, 217, 234, 250, 257, 263, 265, 268, 270, 271, 274, 275, 277, 278], "valueerror": [39, 92], "vanish": 91, "vari": [0, 37, 274, 279], "variabl": [4, 7, 8, 11, 37, 41, 55, 56, 58, 60, 62, 89, 90, 91, 92, 108, 111, 118, 121, 140, 152, 161, 166, 184, 190, 193, 203, 209, 252, 274, 275, 277], "variable_group": [37, 274], "variable_nam": 0, "variable_to_group_map": 37, "varianc": 83, "variant": 222, "variat": [118, 203, 209], "varieti": 36, "variou": [7, 37, 228, 274, 278], "ve": 278, "vector": [89, 90, 92, 111, 121, 140, 152, 153, 161, 166, 190, 203], "venv": 278, "verbos": [187, 276], "veri": [91, 166, 275, 278], "verifi": 278, "version": [0, 9, 11, 13, 14, 17, 27, 37, 40, 91, 118, 186, 234, 235, 250, 251, 252], "via": [0, 4, 16, 89, 166, 190, 276, 277, 278], "view": 153, "visit": 278, "vist": 277, "visual": [0, 277], "visualis": 0, "vmprof": 269, "volum": 29, "w": [46, 47], "wa": [0, 37, 274], "wai": [36, 153], "want": [0, 37, 91, 193, 274, 278], "warn": [0, 14, 105, 187, 275], "we": [45, 73, 91, 193, 276, 278, 279], "weather": [37, 41, 274], "weight": [0, 37, 41, 56, 60, 62, 79, 89, 90, 91, 92, 105, 108, 118, 128, 140, 153, 166, 184, 193, 217, 274, 276], "weight_decai": [89, 90, 91, 92, 108, 128, 140, 166], "weightedrandomsampl": 37, "welcom": 278, "were": [0, 13, 17], "what": [91, 275], "whatev": 91, "when": [0, 4, 16, 37, 46, 56, 89, 90, 91, 92, 93, 108, 128, 140, 153, 166, 190, 274, 275, 278, 279], "where": [0, 5, 32, 33, 37, 38, 46, 47, 90, 91, 92, 97, 108, 111, 121, 128, 140, 152, 155, 156, 157, 161, 166, 190, 200, 203, 209, 269, 274, 278, 279], "whether": [4, 5, 7, 14, 37, 39, 46, 118, 128, 140, 181, 200, 203, 217, 233, 274], "which": [0, 7, 11, 14, 27, 32, 33, 37, 41, 46, 47, 55, 56, 57, 58, 59, 60, 61, 62, 67, 69, 71, 83, 89, 90, 91, 92, 108, 110, 111, 121, 128, 140, 147, 152, 161, 166, 184, 187, 189, 193, 203, 209, 222, 259, 264, 268, 272, 274, 275, 276, 277, 278], "whicht": 257, "while": [14, 47, 68, 91, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 199, 211, 212, 213, 214, 215, 216, 217, 218, 276, 278, 279], "whl": [276, 278], "whom": 257, "whose": [37, 257, 267, 273], "why": 275, "wide": 36, "widen": 0, "width": [128, 190], "wiki": 258, "wikipedia": 258, "window": [4, 5, 37, 46, 216, 274, 276, 278], "window_strid": 4, "wise": 255, "wish": [276, 278], "within": [4, 7, 37, 41, 47, 68, 125, 132, 133, 134, 135, 144, 145, 146, 147, 148, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 199, 200, 211, 212, 213, 214, 215, 216, 217, 218, 222, 274], "without": [28, 37, 46, 59, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 91, 126, 127, 128, 190, 193, 203, 209, 275, 278], "won": 91, "work": [0, 2, 9, 11, 13, 14, 17, 62, 63, 193, 275, 276, 278], "worker": [4, 7, 91, 111], "world": [203, 209, 277], "would": [37, 274], "wrap": [13, 62], "write": [0, 91, 93, 111, 278], "write_interv": [91, 93, 111], "write_on_batch_end": 93, "write_on_epoch_end": 93, "wrongfulli": 0, "x": [0, 9, 11, 12, 13, 15, 16, 17, 20, 21, 22, 23, 37, 41, 47, 57, 58, 61, 67, 68, 69, 70, 71, 72, 73, 74, 89, 91, 92, 95, 97, 99, 105, 108, 111, 118, 121, 125, 128, 132, 133, 134, 135, 140, 145, 148, 152, 153, 155, 156, 157, 161, 166, 172, 174, 175, 176, 177, 179, 180, 182, 183, 184, 190, 193, 199, 200, 203, 209, 212, 213, 214, 215, 216, 218, 222, 260, 261, 266, 276, 279], "x_": [146, 147], "x_cat": [111, 161], "x_categor": [90, 92, 111, 121, 140, 152, 161, 166, 190, 203], "x_cont": [0, 111, 161], "x_futur": 200, "x_in": 200, "x_mark": 212, "x_mask": [214, 215], "x_past": 200, "x_real": [90, 92, 111, 121, 140, 161, 166, 190, 203], "x_static": 200, "x_to_index": [37, 91], "xiaokongkong": 0, "xinyuwuu": 0, "xlstm": [222, 224], "xlstm_type": 222, "xlstmtime": [220, 223, 224], "y": [0, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 37, 41, 48, 78, 82, 85, 91, 92, 95, 99, 108, 111, 128, 140, 166, 200], "y_actual": [55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 69, 71, 76, 77, 78, 79, 80, 81, 82, 83, 85], "y_hat": [99, 105], "y_pred": [52, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 69, 71, 73, 76, 77, 78, 79, 80, 81, 82, 83, 85, 92], "y_true": 83, "yaml": 0, "yarnabrina": 0, "ye": 45, "yet": 89, "yield": 39, "yml": 0, "you": [0, 7, 9, 11, 13, 14, 17, 37, 58, 89, 90, 91, 111, 161, 274, 275, 276, 277, 278], "your": [37, 58, 62, 89, 90, 91, 111, 161, 274, 275, 276, 278], "yourself": [7, 275], "yyyi": 276, "z": [46, 47], "z_i": [46, 47], "zero": [0, 4, 7, 9, 11, 14, 17, 90, 92, 111, 121, 140, 152, 153, 155, 156, 157, 161, 166, 190, 203]}, "titles": ["Release Notes", "API", "data", "_tslib_data_module", "TslibDataModule", "_TslibDataset", "data_module", "EncoderDecoderTimeSeriesDataModule", "encoders", "EncoderNormalizer", "Expm1Transform", "GroupNormalizer", "MinusOneTransform", "MultiNormalizer", "NaNLabelEncoder", "ReLuTransform", "SoftplusTransform", "TorchNormalizer", "TransformMixIn", "_clipped_log", "_clipped_logit", "_identity", "_minus_one", "_plus_one", "_square", "softplus_inv", "examples", "_get_data_by_filename", "generate_ar_data", "get_stallion_data", "load_toydata", "samplers", "GroupedSampler", "TimeSynchronizedBatchSampler", "tests", "timeseries", "_timeseries", "TimeSeriesDataSet", "_find_end_indices", "check_for_nonfinite", "_timeseries_v2", "TimeSeries", "metrics", "_distributions_pkg", "_mqf2_utils", "DeepConvexNet", "MQF2Distribution", "SequentialNet", "TransformedMQF2Distribution", "_point_pkg", "_quantile_pkg", "_quantile_loss_pkg", "QuantileLoss_pkg", "base_metrics", "_base_metrics", "AggregationMetric", "CompositeMetric", "DistributionLoss", "Metric", "MultiHorizonMetric", "MultiLoss", "MultivariateDistributionLoss", "TorchMetricWrapper", "convert_torchmetric_to_pytorch_forecasting_metric", "_base_object", "_BasePtMetric", "distributions", "BetaDistributionLoss", "ImplicitQuantileNetwork", "ImplicitQuantileNetworkDistributionLoss", "LogNormalDistributionLoss", "MQF2DistributionLoss", "MultivariateNormalDistributionLoss", "NegativeBinomialDistributionLoss", "NormalDistributionLoss", "point", "CrossEntropy", "MAE", "MAPE", "MASE", "PoissonLoss", "RMSE", "SMAPE", "TweedieLoss", "quantile", "QuantileLoss", "models", "base", "_base_model", "AutoRegressiveBaseModel", "AutoRegressiveBaseModelWithCovariates", "BaseModel", "BaseModelWithCovariates", "PredictCallback", "PredictTuple", "Prediction", "_concatenate_output", "_torch_cat_na", "_base_model_v2", "BaseModel", "_base_object", "_BasePtForecaster", "_BasePtForecasterV2", "_BasePtForecaster_Common", "_tslib_base_model_v2", "TslibBaseModel", "base_model", "baseline", "Baseline", "deepar", "_deepar", "DeepAR", "_deepar_pkg", "DeepAR_pkg", "dlinear", "_dlinear_pkg_v2", "DLinear_pkg_v2", "_dlinear_v2", "DLinear", "mlp", "_decodermlp", "DecoderMLP", "_decodermlp_pkg", "DecoderMLP_pkg", "submodules", "FullyConnectedModule", "nbeats", "_nbeats", "NBeats", "_nbeats_pkg", "NBeats_pkg", "sub_modules", "NBEATSBlock", "NBEATSGenericBlock", "NBEATSSeasonalBlock", "NBEATSTrendBlock", "linear", "linspace", "nhits", "_nhits", "NHiTS", "_nhits_pkg", "NHiTS_pkg", "sub_modules", "IdentityBasis", "MLP", "NHiTS", "NHiTSBlock", "StaticFeaturesEncoder", "init_weights", "nn", "embeddings", "MultiEmbedding", "TimeDistributedEmbeddingBag", "rnn", "GRU", "LSTM", "RNN", "get_rnn", "rnn", "_rnn", "RecurrentNetwork", "_rnn_pkg", "RecurrentNetwork_pkg", "temporal_fusion_transformer", "_tft", "TemporalFusionTransformer", "_tft_pkg", "TemporalFusionTransformer_pkg", "_tft_pkg_v2", "TFT_pkg_v2", "_tft_v2", "TFT", "sub_modules", "AddNorm", "GateAddNorm", "GatedLinearUnit", "GatedResidualNetwork", "InterpretableMultiHeadAttention", "PositionalEncoder", "ResampleNorm", "ScaledDotProductAttention", "TimeDistributed", "TimeDistributedInterpolation", "VariableSelectionNetwork", "tuning", "_lazywhere", "optimize_hyperparameters", "tide", "_tide", "TiDEModel", "_tide_dsipts", "_tide_v2", "TIDE", "_tide_v2_pkg", "TIDE_pkg_v2", "_tide_pkg", "TiDEModel_pkg", "sub_modules", "_ResidualBlock", "_TideModule", "timexer", "_timexer", "TimeXer", "_timexer_pkg", "TimeXer_pkg", "_timexer_pkg_v2", "TimeXer_pkg_v2", "_timexer_v2", "TimeXer", "sub_modules", "AttentionLayer", "DataEmbedding_inverted", "EnEmbedding", "Encoder", "EncoderLayer", "FlattenHead", "FullAttention", "PositionalEmbedding", "TriangularCausalMask", "xlstm", "_xlstm", "xLSTMTime", "_xlstm_pkg", "xLSTMTime_pkg", "utils", "_classproperty", "classproperty", "_coerce", "_coerce_to_dict", "_coerce_to_list", "_dependencies", "_dependencies", "_check_matplotlib", "_get_installed_packages", "_get_installed_packages_private", "_safe_import", "tests", "test_safe_import", "test_import_class", "test_import_existing_object", "test_import_missing_module", "test_import_present_module", "test_import_submodule", "test_import_with_different_pkg_name_1", "test_import_with_different_pkg_name_2", "test_import_without_pkg_name", "test_multiple_inheritance_from_mock", "_maint", "_show_versions", "_get_deps_info", "_get_sys_info", "show_versions", "_utils", "InitialParameterRepresenterMixIn", "OutputMixIn", "TupleOutputMixIn", "apply_to_list", "autocorrelation", "concat_sequences", "create_mask", "detach", "get_embedding_size", "groupby_apply", "integer_histogram", "masked_op", "move_to_device", "next_fast_len", "padded_stack", "profile", "repr_class", "to_list", "unpack_sequence", "unsqueeze_like", "Data", "FAQ", "Getting started", "PyTorch Forecasting Documentation", "Installation", "Metrics", "Models", "Tutorials"], "titleterms": {"0": 0, "01": 0, "02": 0, "03": 0, "04": 0, "05": 0, "06": 0, "07": 0, "08": 0, "09": 0, "1": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "16": 0, "18": 0, "2": 0, "2020": 0, "2021": 0, "2022": 0, "2023": 0, "23": 0, "24": 0, "26": 0, "27": 0, "28": 0, "3": 0, "30": 0, "31": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "_base_metr": 54, "_base_model": 88, "_base_model_v2": 98, "_base_object": [64, 100], "_baseptforecast": 101, "_baseptforecaster_common": 103, "_baseptforecasterv2": 102, "_baseptmetr": 65, "_check_matplotlib": 233, "_classproperti": 226, "_clipped_log": 19, "_clipped_logit": 20, "_coerc": 228, "_coerce_to_dict": 229, "_coerce_to_list": 230, "_concatenate_output": 96, "_decodermlp": 120, "_decodermlp_pkg": 122, "_deepar": 110, "_deepar_pkg": 112, "_depend": [231, 232], "_distributions_pkg": 43, "_dlinear_pkg_v2": 115, "_dlinear_v2": 117, "_find_end_indic": 38, "_get_data_by_filenam": 27, "_get_deps_info": 250, "_get_installed_packag": 234, "_get_installed_packages_priv": 235, "_get_sys_info": 251, "_ident": 21, "_lazywher": 186, "_maint": 248, "_minus_on": 22, "_mqf2_util": 44, "_nbeat": 127, "_nbeats_pkg": 129, "_nhit": 139, "_nhits_pkg": 141, "_plus_on": 23, "_point_pkg": 49, "_quantile_loss_pkg": 51, "_quantile_pkg": 50, "_residualblock": 199, "_rnn": 160, "_rnn_pkg": 162, "_safe_import": 236, "_show_vers": 249, "_squar": 24, "_tft": 165, "_tft_pkg": 167, "_tft_pkg_v2": 169, "_tft_v2": 171, "_tide": 189, "_tide_dsipt": 191, "_tide_pkg": 196, "_tide_v2": 192, "_tide_v2_pkg": 194, "_tidemodul": 200, "_timeseri": 36, "_timeseries_v2": 40, "_timex": 202, "_timexer_pkg": 204, "_timexer_pkg_v2": 206, "_timexer_v2": 208, "_torch_cat_na": 97, "_tslib_base_model_v2": 104, "_tslib_data_modul": 3, "_tslibdataset": 5, "_util": 253, "_xlstm": 221, "_xlstm_pkg": 223, "ad": 0, "addnorm": 174, "aggregationmetr": 55, "all": 0, "an": 278, "api": [0, 1, 276], "apply_to_list": 257, "architectur": 0, "attentionlay": 211, "autocorrel": 258, "autoregressivebasemodel": 89, "autoregressivebasemodelwithcovari": 90, "base": 87, "base_metr": 53, "base_model": 106, "baselin": [107, 108], "basemodel": [91, 99], "basemodelwithcovari": 92, "beat": 0, "best": 278, "betadistributionloss": 67, "better": 0, "branch": 0, "break": 0, "bug": 0, "bugfix": 0, "case": 0, "chang": 0, "check_for_nonfinit": 39, "classif": 0, "classproperti": 227, "clone": 278, "compat": 0, "compositemetr": 56, "concat_sequ": 259, "contribut": 278, "contributor": 0, "control": 0, "convert_torchmetric_to_pytorch_forecasting_metr": 63, "creat": [275, 278], "create_mask": 260, "crossentropi": 76, "data": [0, 2, 274], "data_modul": 6, "dataembedding_invert": 212, "dataset": 275, "decodermlp": 121, "decodermlp_pkg": 123, "deepar": [0, 109, 111], "deepar_pkg": 113, "deepconvexnet": 45, "dens": 198, "depend": 0, "deprec": 0, "design": 278, "detach": 261, "detail": [274, 279], "detect": 0, "distribut": [0, 66], "distributionloss": 57, "dlinear": [114, 117, 118], "dlinear_pkg_v2": 116, "doc": 0, "document": [0, 277], "e": 0, "edg": 0, "edit": 278, "embed": 151, "encod": [0, 8, 198, 214], "encoderdecodertimeseriesdatamodul": 7, "encoderlay": 215, "encodernorm": 9, "enembed": 213, "enhanc": 0, "environ": 278, "exampl": [26, 276], "exogen": [202, 208], "expm1transform": 10, "faq": 275, "featur": 0, "fix": 0, "flattenhead": 216, "forecast": [117, 277, 278], "fork": 278, "from": 0, "fullattent": 217, "fullyconnectedmodul": 125, "gateaddnorm": 175, "gatedlinearunit": 176, "gatedresidualnetwork": 177, "gener": 0, "generate_ar_data": 28, "get": 276, "get_embedding_s": 262, "get_rnn": 158, "get_stallion_data": 29, "groupby_appli": 263, "groupedsampl": 32, "groupnorm": 11, "gru": 155, "guidelin": 278, "highlight": 0, "hit": 0, "how": 0, "hyperparamet": 0, "identitybasi": 144, "implement": 0, "implicitquantilenetwork": 68, "implicitquantilenetworkdistributionloss": 69, "improv": 0, "indic": 277, "init_weight": 149, "initialparameterrepresentermixin": 254, "input": 0, "instal": [0, 276, 278], "integer_histogram": 264, "interpret": [0, 275], "interpretablemultiheadattent": 178, "lag": 0, "latest": 278, "lightn": 0, "linear": 136, "linspac": 137, "load_toydata": 30, "log": 0, "lognormaldistributionloss": 70, "loss": 0, "lstm": 156, "ltsf": 117, "mae": 77, "main": 276, "mainten": 0, "make": 0, "mape": 78, "mase": 79, "masked_op": 265, "master": 0, "metric": [0, 42, 58, 279], "minor": 0, "minusonetransform": 12, "mlp": [119, 145], "model": [0, 86, 117, 275, 280], "modifi": 0, "more": 0, "move_to_devic": 266, "mqf2distribut": 46, "mqf2distributionloss": 71, "multi": 0, "multiembed": 152, "multihorizonmetr": 59, "multiloss": 60, "multinorm": 13, "multivari": 0, "multivariatedistributionloss": 61, "multivariatenormaldistributionloss": 72, "n": 0, "nanlabelencod": 14, "nbeat": [126, 128], "nbeats_pkg": 130, "nbeatsblock": 132, "nbeatsgenericblock": 133, "nbeatsseasonalblock": 134, "nbeatstrendblock": 135, "negativebinomialdistributionloss": 73, "network": 0, "new": 0, "next_fast_len": 267, "nhit": [138, 140, 146], "nhits_pkg": 142, "nhitsblock": 147, "nn": 150, "normaldistributionloss": 74, "note": 0, "obtain": 278, "optimize_hyperparamet": 187, "output": 0, "outputmixin": 255, "over": 0, "padded_stack": 268, "patch": 0, "perform": 0, "pip": 0, "poetri": 0, "point": 75, "poissonloss": 80, "positionalembed": 218, "positionalencod": 179, "practic": 278, "predict": [0, 95], "predictcallback": 93, "predicttupl": 94, "principl": 278, "profil": 269, "pull": 278, "pytorch": [0, 117, 277, 278], "quantil": 84, "quantileloss": 85, "quantileloss_pkg": 52, "recommend": 278, "recurrentnetwork": 161, "recurrentnetwork_pkg": 163, "releas": 0, "relutransform": 15, "remov": 0, "repositori": 278, "repr_class": 270, "request": 278, "resamplenorm": 180, "rmse": 81, "rnn": [154, 157, 159], "sampler": 31, "scaleddotproductattent": 181, "sequentialnet": 47, "seri": [198, 202, 208, 274], "set": [274, 278], "show_vers": 252, "simpl": 0, "simplifi": 0, "smape": 82, "softplus_inv": 25, "softplustransform": 16, "start": 276, "staticfeaturesencod": 148, "sub_modul": [131, 143, 173, 198, 210], "submit": 278, "submodul": 124, "subsequ": 0, "successor": 0, "support": 0, "tabl": 277, "target": 0, "technic": 278, "temporal_fusion_transform": 164, "temporalfusiontransform": 166, "temporalfusiontransformer_pkg": 168, "test": [0, 34, 237], "test_import_class": 239, "test_import_existing_object": 240, "test_import_missing_modul": 241, "test_import_present_modul": 242, "test_import_submodul": 243, "test_import_with_different_pkg_name_1": 244, "test_import_with_different_pkg_name_2": 245, "test_import_without_pkg_nam": 246, "test_multiple_inheritance_from_mock": 247, "test_safe_import": 238, "tft": 172, "tft_pkg_v2": 170, "tide": [188, 193, 198], "tide_pkg_v2": 195, "tidemodel": 190, "tidemodel_pkg": 197, "time": [198, 202, 208, 274], "timedistribut": 182, "timedistributedembeddingbag": 153, "timedistributedinterpol": 183, "timeseri": [35, 41], "timeseriesdataset": 37, "timesynchronizedbatchsampl": 33, "timex": [201, 202, 203, 208, 209], "timexer_pkg": 205, "timexer_pkg_v2": 207, "to_list": 271, "torchmetricwrapp": 62, "torchnorm": 17, "train": 275, "transform": [0, 202, 208], "transformedmqf2distribut": 48, "transformmixin": 18, "triangularcausalmask": 219, "tslibbasemodel": 105, "tslibdatamodul": 4, "tune": 185, "tupleoutputmixin": 256, "tutori": [0, 281], "tweedieloss": 83, "unpack_sequ": 272, "unsqueeze_lik": 273, "up": 278, "updat": 0, "usag": 276, "util": 225, "v0": 0, "v1": 0, "variabl": [0, 202, 208], "variableselectionnetwork": 184, "variou": 0, "verbos": 0, "version": 278, "virtual": 278, "xlstm": 220, "xlstmtime": 222, "xlstmtime_pkg": 224}})